<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>J!nl!n&#39;s Blog</title>
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://daijinlin.com/"/>
  <updated>2017-04-05T09:12:48.038Z</updated>
  <id>http://daijinlin.com/</id>
  
  <author>
    <name>J!nl!n</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>算法之插入排序</title>
    <link href="http://daijinlin.com/2017/01/29/algorithm-insertion-sort/"/>
    <id>http://daijinlin.com/2017/01/29/algorithm-insertion-sort/</id>
    <published>2017-01-29T10:10:13.000Z</published>
    <updated>2017-04-05T09:12:48.038Z</updated>
    
    <content type="html"><![CDATA[<p>　　<strong> 概述：</strong>（Insertion Sort）是一种简单直观的排序算法。它的工作原理是通过构建有序序列，对于未排序数据，在已排序序列中从后向前扫描，找到相应位置并插入。插入排序在实现上，通常采用in-place排序（即只需用到O(1)的额外空间的排序），因而在从后向前扫描过程中，需要反复把已排序元素逐步向后挪位，为最新元素提供插入空间。<br><a id="more"></a></p>
<h4 id="选择排序"><a href="#选择排序" class="headerlink" title="选择排序"></a>选择排序</h4><p><img src="/res/algorithm/Insertion_sort_animation.gif" alt="插入排序"></p>
<table>
<thead>
<tr>
<th style="text-align:center">分类</th>
<th style="text-align:center">数据结构</th>
<th style="text-align:center">时间复杂度</th>
<th style="text-align:center">最优时间复杂度</th>
<th style="text-align:center">平均时间复杂度</th>
<th style="text-align:center">空间复杂度</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">插入排序</td>
<td style="text-align:center">数组</td>
<td style="text-align:center">О(n²)</td>
<td style="text-align:center">О(n)</td>
<td style="text-align:center">О(n²)</td>
<td style="text-align:center">总共О(n), 辅助空间 O(1)</td>
</tr>
</tbody>
</table>
<p>使用插入排序为一列数字进行排序的过程<br><img src="/res/algorithm/220px-Insertion-sort-example-300px.gif" alt="插入排序"></p>
<h4 id="代码范例"><a href="#代码范例" class="headerlink" title="代码范例"></a>代码范例</h4><h4 id="C语言"><a href="#C语言" class="headerlink" title="C语言"></a>C语言</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">insertion_sort</span><span class="params">(<span class="keyword">int</span> arr[], <span class="keyword">int</span> len)</span> </span>&#123;</div><div class="line">    <span class="keyword">int</span> i, j;</div><div class="line">    <span class="keyword">int</span> temp;</div><div class="line">    <span class="keyword">for</span> (i = <span class="number">1</span>; i &lt; len; i++) &#123;</div><div class="line">    temp = arr[i]; </div><div class="line">    <span class="comment">//與已排序的數逐一比較，大於temp時，該數向後移</span></div><div class="line">    j = i - <span class="number">1</span>;  </div><div class="line">    <span class="comment">// 如果将赋值放到下一行的for循环内, 会导致在第10行出现j未声明的错误</span></div><div class="line">    <span class="keyword">for</span> (; j &gt;= <span class="number">0</span> &amp;&amp; arr[j] &gt; temp; j--) &#123;</div><div class="line">        <span class="comment">//j循环到-1时，由于[[短路求值]](http://zh.wikipedia.org/wiki/短路求值)，不会运算array[-1]</span></div><div class="line">        arr[j + <span class="number">1</span>] = arr[j];</div><div class="line">    &#125;</div><div class="line">    arr[j + <span class="number">1</span>] = temp; </div><div class="line">    <span class="comment">//被排序数放到正确的位置</span></div><div class="line">   &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h4 id="Python"><a href="#Python" class="headerlink" title="Python"></a>Python</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">insert_sort</span><span class="params">(lst)</span>:</span></div><div class="line">    n=len(lst)</div><div class="line">    <span class="keyword">if</span> n == <span class="number">1</span>: <span class="keyword">return</span> lst</div><div class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1</span>, n):</div><div class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> range(i, <span class="number">0</span>, <span class="number">-1</span>):</div><div class="line">            <span class="keyword">if</span> lst[j] &lt; lst[j<span class="number">-1</span>] : lst[j], lst[j<span class="number">-1</span>] = lst[j<span class="number">-1</span>], lst[j]</div><div class="line">    <span class="keyword">return</span> lst</div></pre></td></tr></table></figure>
<h4 id="Python的另一个版本"><a href="#Python的另一个版本" class="headerlink" title="Python的另一个版本"></a>Python的另一个版本</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">insertion_sort</span><span class="params">(lst)</span>:</span></div><div class="line">    <span class="keyword">if</span> len(lst) == <span class="number">1</span>:</div><div class="line">        <span class="keyword">return</span> lst</div><div class="line"></div><div class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1</span>, len(lst)):</div><div class="line">        temp = lst[i]</div><div class="line">        j = i - <span class="number">1</span></div><div class="line">        <span class="keyword">while</span> j &gt;= <span class="number">0</span> <span class="keyword">and</span> temp &lt; lst[j]:</div><div class="line">            lst[j + <span class="number">1</span>] = lst[j]</div><div class="line">            j -= <span class="number">1</span></div><div class="line">        lst[j + <span class="number">1</span>] = temp</div><div class="line">    <span class="keyword">return</span> lst</div></pre></td></tr></table></figure>
<h4 id="Java"><a href="#Java" class="headerlink" title="Java"></a>Java</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">insertion_sort</span><span class="params">(<span class="keyword">int</span>[] arr)</span> </span>&#123;</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; arr.length - <span class="number">1</span>; i++) &#123;   </div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j = i+<span class="number">1</span>; j &gt; <span class="number">0</span>; j--) &#123;</div><div class="line">            <span class="keyword">if</span>(arr[j-<span class="number">1</span>] &lt;= arr[j])</div><div class="line">                <span class="keyword">break</span>;</div><div class="line">            <span class="keyword">int</span> temp = arr[j];</div><div class="line">            arr[j] = arr[j-<span class="number">1</span>];</div><div class="line">            arr[j-<span class="number">1</span>] = temp;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h4 id="Java的另一个版本"><a href="#Java的另一个版本" class="headerlink" title="Java的另一个版本"></a>Java的另一个版本</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 将arr[i] 插入到arr[0]...arr[i - 1]中</span></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">insertion_sort</span><span class="params">(<span class="keyword">int</span>[] arr)</span> </span>&#123;</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; arr.length; i++ ) &#123;</div><div class="line">        <span class="keyword">int</span> temp = arr[i];</div><div class="line">        <span class="keyword">int</span> j = i - <span class="number">1</span>;  </div><div class="line">        <span class="comment">//如果将赋值放到下一行的for循环内, 会导致在第13行出现j未声明的错误</span></div><div class="line">        <span class="keyword">for</span> (; j &gt;= <span class="number">0</span> &amp;&amp; arr[j] &gt; temp; j-- ) &#123;</div><div class="line">            arr[j + <span class="number">1</span>] = arr[j];</div><div class="line">        &#125;</div><div class="line">        arr[j + <span class="number">1</span>] = temp;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h4 id="JavaScript"><a href="#JavaScript" class="headerlink" title="JavaScript"></a>JavaScript</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">Array</span>.prototype.insertion_sort = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="keyword">var</span> i,j;</div><div class="line">    <span class="keyword">for</span>(i = <span class="number">1</span>;i &lt; <span class="keyword">this</span>.length; i++) &#123;</div><div class="line">        <span class="keyword">for</span>(j = <span class="number">0</span>; j &lt; i; j++)&#123;</div><div class="line">            <span class="keyword">if</span>(<span class="keyword">this</span>[j] &gt; <span class="keyword">this</span>[i]) &#123;</div><div class="line">                <span class="keyword">this</span>.splice(j, <span class="number">0</span>, <span class="keyword">this</span>[i]);</div><div class="line">                <span class="keyword">this</span>.splice(i+<span class="number">1</span>, <span class="number">1</span>);</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> <span class="keyword">this</span>;</div><div class="line">&#125;;</div></pre></td></tr></table></figure>
<h4 id="PHP"><a href="#PHP" class="headerlink" title="PHP"></a>PHP</h4><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">insertion_sort</span><span class="params">(&amp;$arr)</span> </span>&#123;</div><div class="line">    <span class="comment">//php的陣列視為基本型別，所以必須用傳參考才能修改原陣列</span></div><div class="line">    <span class="keyword">for</span> ($i = <span class="number">1</span>; $i &lt; count($arr); $i++) &#123;</div><div class="line">         $temp = $arr[$i];</div><div class="line">         <span class="keyword">for</span> ($j = $i - <span class="number">1</span>; $j &gt;= <span class="number">0</span> &amp;&amp; $arr[$j] &gt; $temp; $j--)</div><div class="line">         $arr[$j + <span class="number">1</span>] = $arr[$j];</div><div class="line">         $arr[$j + <span class="number">1</span>] = $temp;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h4 id="复杂度分析"><a href="#复杂度分析" class="headerlink" title="复杂度分析"></a>复杂度分析</h4><p>如果目标是把n个元素的序列升序排列，那么采用插入排序存在最好情况和最坏情况。最好情况就是，序列已经是升序排列了，在这种情况下，需要进行的比较操作需<code>(n-1)</code>次即可。最坏情况就是，序列是降序排列，那么此时需要进行的比较共有<code>n(n-1)/2</code>次。插入排序的赋值操作是比较操作的次数加上<code>(n-1)</code>次。平均来说插入排序算法复杂度为<code>О(n²)</code>。因而，插入排序不适合对于数据量比较大的排序应用。但是，如果需要排序的数据量很小，例如，量级小于千，那么插入排序还是一个不错的选择。 插入排序在工业级库中也有着广泛的应用，在STL的sort算法和stdlib的qsort算法中，都将插入排序作为快速排序的补充，用于少量元素的排序（通常为8个或以下）。</p>
<p>参考：<a href="https://zh.wikipedia.org/wiki/%E6%8F%92%E5%85%A5%E6%8E%92%E5%BA%8F" target="_blank" rel="external">https://zh.wikipedia.org/wiki/%E6%8F%92%E5%85%A5%E6%8E%92%E5%BA%8F</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;　　&lt;strong&gt; 概述：&lt;/strong&gt;（Insertion Sort）是一种简单直观的排序算法。它的工作原理是通过构建有序序列，对于未排序数据，在已排序序列中从后向前扫描，找到相应位置并插入。插入排序在实现上，通常采用in-place排序（即只需用到O(1)的额外空间的排序），因而在从后向前扫描过程中，需要反复把已排序元素逐步向后挪位，为最新元素提供插入空间。&lt;br&gt;
    
    </summary>
    
      <category term="插入排序" scheme="http://daijinlin.com/categories/%E6%8F%92%E5%85%A5%E6%8E%92%E5%BA%8F/"/>
    
    
      <category term="算法" scheme="http://daijinlin.com/tags/%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>算法之选择排序</title>
    <link href="http://daijinlin.com/2017/01/29/algorithm-selection-sort/"/>
    <id>http://daijinlin.com/2017/01/29/algorithm-selection-sort/</id>
    <published>2017-01-29T09:50:43.000Z</published>
    <updated>2017-04-05T09:12:48.038Z</updated>
    
    <content type="html"><![CDATA[<p>　　<strong> 概述：</strong>选择排序（Selection sort）是一种简单直观的排序算法。它的工作原理是，首先在未排序序列中找到最小（大）元素，存放到排序序列的起始位置，然后，再从剩余未排序元素中继续寻找最小（大）元素，然后放到已排序序列的末尾。以此类推，直到所有元素均排序完毕。<br><a id="more"></a></p>
<h4 id="选择排序"><a href="#选择排序" class="headerlink" title="选择排序"></a>选择排序</h4><p><img src="/res/algorithm/Selection_sort_animation.gif" alt="选择排序"></p>
<table>
<thead>
<tr>
<th style="text-align:center">分类</th>
<th style="text-align:center">数据结构</th>
<th style="text-align:center">时间复杂度</th>
<th style="text-align:center">最优时间复杂度</th>
<th style="text-align:center">平均时间复杂度</th>
<th style="text-align:center">空间复杂度</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">选择排序</td>
<td style="text-align:center">数组</td>
<td style="text-align:center">О(n²)</td>
<td style="text-align:center">О(n²)</td>
<td style="text-align:center">О(n²)</td>
<td style="text-align:center">总共О(n), 辅助空间 O(1)</td>
</tr>
</tbody>
</table>
<h4 id="代码范例"><a href="#代码范例" class="headerlink" title="代码范例"></a>代码范例</h4><h4 id="C语言"><a href="#C语言" class="headerlink" title="C语言"></a>C语言</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">selection_sort</span><span class="params">(<span class="keyword">int</span> arr[], <span class="keyword">int</span> len)</span> </span>&#123;</div><div class="line">    <span class="keyword">int</span> i, j, min, temp;</div><div class="line">    <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; len - <span class="number">1</span>; i++) &#123;</div><div class="line">        min = i;</div><div class="line">        <span class="keyword">for</span> (j = i + <span class="number">1</span>; j &lt; len; j++)</div><div class="line">            <span class="keyword">if</span> (arr[min] &gt; arr[j])</div><div class="line">                min = j;</div><div class="line">        temp = arr[min];</div><div class="line">        arr[min] = arr[i];</div><div class="line">        arr[i] = temp;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h4 id="Python"><a href="#Python" class="headerlink" title="Python"></a>Python</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">selection_sort</span><span class="params">(L)</span>:</span></div><div class="line">    N = len(L)</div><div class="line">    exchanges_count = <span class="number">0</span></div><div class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(N<span class="number">-1</span>):</div><div class="line">        min_index = i</div><div class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> range(i+<span class="number">1</span>, N):</div><div class="line">            <span class="keyword">if</span> L[min_index] &gt; L[j]:</div><div class="line">                min_index = j</div><div class="line">        <span class="keyword">if</span> min_index != i:</div><div class="line">            L[min_index], L[i] = L[i], L[min_index]</div><div class="line">            exchanges_count += <span class="number">1</span></div><div class="line">        print(<span class="string">'iteration #&#123;&#125;: &#123;&#125;'</span>.format(i, L))</div><div class="line">    print(<span class="string">'Total &#123;&#125; swappings'</span>.format(exchanges_count))</div><div class="line">    <span class="keyword">return</span> L</div><div class="line"></div><div class="line">testlist = [<span class="number">17</span>, <span class="number">23</span>, <span class="number">20</span>, <span class="number">14</span>, <span class="number">12</span>, <span class="number">25</span>, <span class="number">1</span>, <span class="number">20</span>, <span class="number">81</span>, <span class="number">14</span>, <span class="number">11</span>, <span class="number">12</span>]</div><div class="line">print(<span class="string">'Before selection sort: &#123;&#125;'</span>.format(testlist))</div><div class="line">print(<span class="string">'After selection sort:  &#123;&#125;'</span>.format(selection_sort(testlist)))</div></pre></td></tr></table></figure>
<h4 id="Java"><a href="#Java" class="headerlink" title="Java"></a>Java</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">selection_sort</span><span class="params">(<span class="keyword">int</span>[] arr)</span> </span>&#123;</div><div class="line">    <span class="keyword">int</span> i, j, min, temp, len = arr.length;</div><div class="line">    <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; len - <span class="number">1</span>; i++) &#123;</div><div class="line">        min = i;</div><div class="line">        <span class="keyword">for</span> (j = i + <span class="number">1</span>; j &lt; len; j++)</div><div class="line">            <span class="keyword">if</span> (arr[min] &gt; arr[j])</div><div class="line">                min = j;</div><div class="line">        temp = arr[min];</div><div class="line">        arr[min] = arr[i];</div><div class="line">        arr[i] = temp;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h4 id="JavaScript"><a href="#JavaScript" class="headerlink" title="JavaScript"></a>JavaScript</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">Array</span>.prototype.selection_sort = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="keyword">var</span> i, j, min;</div><div class="line">    <span class="keyword">var</span> temp;</div><div class="line">    <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; <span class="keyword">this</span>.length - <span class="number">1</span>; i++) &#123;</div><div class="line">        min = i;</div><div class="line">        <span class="keyword">for</span> (j = i + <span class="number">1</span>; j &lt; <span class="keyword">this</span>.length; j++)</div><div class="line">            <span class="keyword">if</span> (<span class="keyword">this</span>[min] &gt; <span class="keyword">this</span>[j])</div><div class="line">                min = j;</div><div class="line">        temp = <span class="keyword">this</span>[min];</div><div class="line">        <span class="keyword">this</span>[min] = <span class="keyword">this</span>[i];</div><div class="line">        <span class="keyword">this</span>[i] = temp;</div><div class="line">    &#125;</div><div class="line">&#125;;</div></pre></td></tr></table></figure>
<h4 id="PHP"><a href="#PHP" class="headerlink" title="PHP"></a>PHP</h4><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">swap</span><span class="params">(&amp;$x, &amp;$y)</span> </span>&#123;</div><div class="line">    $t = $x;</div><div class="line">    $x = $y;</div><div class="line">    $y = $t;</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">selection_sort</span><span class="params">(&amp;$arr)</span> </span>&#123;<span class="comment">//php的陣列視為基本型別，所以必須用傳參考才能修改原陣列</span></div><div class="line">    <span class="keyword">for</span> ($i = <span class="number">0</span>; $i &lt; count($arr) - <span class="number">1</span>; $i++) &#123;</div><div class="line">        $min = $i;</div><div class="line">        <span class="keyword">for</span> ($j = $i + <span class="number">1</span>; $j &lt; count($arr); $j++)</div><div class="line">            <span class="keyword">if</span> ($arr[$min] &gt; $arr[$j])</div><div class="line">                $min = $j;</div><div class="line">        swap($arr[$min], $arr[$i]);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h4 id="复杂度分析"><a href="#复杂度分析" class="headerlink" title="复杂度分析"></a>复杂度分析</h4><p>选择排序的交换操作介于 <code>0</code>和 <code>(n-1)</code>次之间。选择排序的比较操作为 <code>n(n-1)/2</code>次之间。选择排序的赋值操作介于 <code>0</code>和 <code>3(n-1)</code>次之间。<br>比较次数 <code>О(n²)</code>，比较次数与关键字的初始状态无关，总的比较次数<code>N=(n-1)+(n-2)+...+1=n * (n-1)/2</code>。交换次数<code>O(n)</code>，最好情况是，已经有序，交换0次；最坏情况是，逆序，交换<code>n-1</code>次。交换次数比冒泡排序较少，由于交换所需CPU时间比比较所需的CPU时间多，<code>n</code>值较小时，选择排序比冒泡排序快。<br>原地操作几乎是选择排序的唯一优点，当空间复杂度要求较高时，可以考虑选择排序；实际适用的场合非常罕见。</p>
<p>参考：<a href="https://zh.wikipedia.org/wiki/%E9%80%89%E6%8B%A9%E6%8E%92%E5%BA%8F" target="_blank" rel="external">https://zh.wikipedia.org/wiki/%E9%80%89%E6%8B%A9%E6%8E%92%E5%BA%8F</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;　　&lt;strong&gt; 概述：&lt;/strong&gt;选择排序（Selection sort）是一种简单直观的排序算法。它的工作原理是，首先在未排序序列中找到最小（大）元素，存放到排序序列的起始位置，然后，再从剩余未排序元素中继续寻找最小（大）元素，然后放到已排序序列的末尾。以此类推，直到所有元素均排序完毕。&lt;br&gt;
    
    </summary>
    
      <category term="选择排序" scheme="http://daijinlin.com/categories/%E9%80%89%E6%8B%A9%E6%8E%92%E5%BA%8F/"/>
    
    
      <category term="算法" scheme="http://daijinlin.com/tags/%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>算法之冒泡排序</title>
    <link href="http://daijinlin.com/2017/01/29/algorithm-bubble-sort/"/>
    <id>http://daijinlin.com/2017/01/29/algorithm-bubble-sort/</id>
    <published>2017-01-29T07:50:50.000Z</published>
    <updated>2017-04-05T09:12:48.038Z</updated>
    
    <content type="html"><![CDATA[<p>　　<strong> 概述：</strong>冒泡排序（Bubble Sort）是一种简单的排序算法。它重复地走访过要排序的数列，一次比较两个元素，如果他们的顺序错误就把他们交换过来。走访数列的工作是重复地进行直到没有再需要交换，也就是说该数列已经排序完成。这个算法的名字由来是因为越小的元素会经由交换慢慢“浮”到数列的顶端。<br><a id="more"></a></p>
<h4 id="冒泡排序"><a href="#冒泡排序" class="headerlink" title="冒泡排序"></a>冒泡排序</h4><p><img src="/res/algorithm/Bubble_sort_animation.gif" alt="冒泡排序"></p>
<table>
<thead>
<tr>
<th style="text-align:center">分类</th>
<th style="text-align:center">数据结构</th>
<th style="text-align:center">时间复杂度</th>
<th style="text-align:center">最优时间复杂度</th>
<th style="text-align:center">平均时间复杂度</th>
<th style="text-align:center">空间复杂度</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">交换排序</td>
<td style="text-align:center">数组</td>
<td style="text-align:center">О(n²)</td>
<td style="text-align:center">О(n)</td>
<td style="text-align:center">О(n²)</td>
<td style="text-align:center">总共О(n), 辅助空间 O(1)</td>
</tr>
</tbody>
</table>
<h4 id="伪代码"><a href="#伪代码" class="headerlink" title="伪代码"></a>伪代码</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">function bubble_sort (array, length) &#123;</div><div class="line">    var i, j;</div><div class="line">    for(i from 0 to length-1)&#123;</div><div class="line">        for(j from 0 to length-1-i)&#123;</div><div class="line">            if (array[j] &gt; array[j+1])</div><div class="line">                swap(array[j], array[j+1])</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">函数 冒泡排序 输入 一个数组名称为array 其长度为length </div><div class="line">    i 从 0 到 (length - 1) </div><div class="line">        j 从 0 到 (length - 1 - i) </div><div class="line">            如果 array[j] &gt; array[j + 1] </div><div class="line">                交换 array[j] 和 array[j + 1] 的值 </div><div class="line">            如果结束 </div><div class="line">        j循环结束 </div><div class="line">    i循环结束 </div><div class="line">函数结束</div></pre></td></tr></table></figure>
<h4 id="助记码"><a href="#助记码" class="headerlink" title="助记码"></a>助记码</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">i∈[0,N-1)                //循环N-1遍</div><div class="line">  j∈[0,N-1-i)            //每遍循环要处理的无序部分</div><div class="line">    swap(j,j+1)          //两两排序（升序/降序）</div></pre></td></tr></table></figure>
<p><img src="/res/algorithm/Bubble_sort.jpg" alt="冒泡排序助记图"></p>
<h4 id="代码范例"><a href="#代码范例" class="headerlink" title="代码范例"></a>代码范例</h4><h4 id="C语言"><a href="#C语言" class="headerlink" title="C语言"></a>C语言</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">bubble_sort</span><span class="params">(<span class="keyword">int</span> arr[], <span class="keyword">int</span> len)</span> </span>&#123;</div><div class="line">    <span class="keyword">int</span> i, j, temp;</div><div class="line">    <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; len - <span class="number">1</span>; i++)</div><div class="line">        <span class="keyword">for</span> (j = <span class="number">0</span>; j &lt; len - <span class="number">1</span> - i; j++)</div><div class="line">            <span class="keyword">if</span> (arr[j] &gt; arr[j + <span class="number">1</span>]) &#123;</div><div class="line">                temp = arr[j];</div><div class="line">                arr[j] = arr[j + <span class="number">1</span>];</div><div class="line">                arr[j + <span class="number">1</span>] = temp;</div><div class="line">            &#125;</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</div><div class="line">    <span class="keyword">int</span> arr[] = &#123; <span class="number">22</span>, <span class="number">34</span>, <span class="number">3</span>, <span class="number">32</span>, <span class="number">82</span>, <span class="number">55</span>, <span class="number">89</span>, <span class="number">50</span>, <span class="number">37</span>, <span class="number">5</span>, <span class="number">64</span>, <span class="number">35</span>, <span class="number">9</span>, <span class="number">70</span> &#125;;</div><div class="line">    <span class="keyword">int</span> len = (<span class="keyword">int</span>) <span class="keyword">sizeof</span>(arr) / <span class="keyword">sizeof</span>(*arr);</div><div class="line">    bubble_sort(arr, len);</div><div class="line">    <span class="keyword">int</span> i;</div><div class="line">    <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; len; i++)</div><div class="line">        <span class="built_in">printf</span>(<span class="string">"%d "</span>, arr[i]);</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h4 id="Python"><a href="#Python" class="headerlink" title="Python"></a>Python</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">bubble</span><span class="params">(List)</span>:</span></div><div class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> range(len(List) - <span class="number">1</span>, <span class="number">0</span>, <span class="number">-1</span>):</div><div class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">0</span>, j):</div><div class="line">            <span class="keyword">if</span> List[i] &gt; List[i+<span class="number">1</span>]:</div><div class="line">                List[i], List[i+<span class="number">1</span>] = List[i+<span class="number">1</span>], List[i]</div><div class="line">    <span class="keyword">return</span> List</div></pre></td></tr></table></figure>
<h4 id="Java"><a href="#Java" class="headerlink" title="Java"></a>Java</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">selection_sort</span><span class="params">(<span class="keyword">int</span>[] arr)</span> </span>&#123;</div><div class="line">    <span class="keyword">int</span> temp = <span class="number">0</span>;</div><div class="line">    <span class="keyword">int</span> size = numbers.length;</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span> ; i &lt; size-<span class="number">1</span>; i ++) &#123;</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">0</span> ;j &lt; size-<span class="number">1</span>-i ; j++) &#123;</div><div class="line">            <span class="keyword">if</span>(numbers[j] &gt; numbers[j+<span class="number">1</span>]) &#123;</div><div class="line">                temp = numbers[j];</div><div class="line">                numbers[j] = numbers[j+<span class="number">1</span>];</div><div class="line">                numbers[j+<span class="number">1</span>] = temp;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h4 id="JavaScript"><a href="#JavaScript" class="headerlink" title="JavaScript"></a>JavaScript</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">Array</span>.prototype.bubble_sort = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="keyword">var</span> i, j, temp;</div><div class="line">    <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; <span class="keyword">this</span>.length - <span class="number">1</span>; i++)</div><div class="line">        <span class="keyword">for</span> (j = <span class="number">0</span>; j &lt; <span class="keyword">this</span>.length - <span class="number">1</span> - i; j++)</div><div class="line">            <span class="keyword">if</span> (<span class="keyword">this</span>[j] &gt; <span class="keyword">this</span>[j + <span class="number">1</span>]) &#123;</div><div class="line">                temp = <span class="keyword">this</span>[j];</div><div class="line">                <span class="keyword">this</span>[j] = <span class="keyword">this</span>[j + <span class="number">1</span>];</div><div class="line">                <span class="keyword">this</span>[j + <span class="number">1</span>] = temp;</div><div class="line">            &#125;</div><div class="line">    <span class="keyword">return</span> <span class="keyword">this</span>;</div><div class="line">&#125;;</div><div class="line"><span class="keyword">var</span> num = [<span class="number">22</span>, <span class="number">34</span>, <span class="number">3</span>, <span class="number">32</span>, <span class="number">82</span>, <span class="number">55</span>, <span class="number">89</span>, <span class="number">50</span>, <span class="number">37</span>, <span class="number">5</span>, <span class="number">64</span>, <span class="number">35</span>, <span class="number">9</span>, <span class="number">70</span>];</div><div class="line">num.bubble_sort();</div><div class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; num.length; i++)</div><div class="line">    <span class="built_in">document</span>.body.innerHTML += num[i] + <span class="string">" "</span>;</div></pre></td></tr></table></figure>
<h4 id="PHP"><a href="#PHP" class="headerlink" title="PHP"></a>PHP</h4><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">swap</span><span class="params">(&amp;$x, &amp;$y)</span> </span>&#123;</div><div class="line">    $t = $x;</div><div class="line">    $x = $y;</div><div class="line">    $y = $t;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">bubble_sort</span><span class="params">(&amp;$arr)</span> </span>&#123;<span class="comment">//php的陣列視為基本型別，所以必須用傳參考才能修改原陣列</span></div><div class="line">    <span class="keyword">for</span> ($i = <span class="number">0</span>; $i &lt; count($arr) - <span class="number">1</span>; $i++)</div><div class="line">        <span class="keyword">for</span> ($j = <span class="number">0</span>; $j &lt; count($arr) - <span class="number">1</span> - $i; $j++)</div><div class="line">            <span class="keyword">if</span> ($arr[$j] &gt; $arr[$j + <span class="number">1</span>])</div><div class="line">                swap($arr[$j], $arr[$j + <span class="number">1</span>]);</div><div class="line">&#125;</div><div class="line"></div><div class="line">$arr = <span class="keyword">array</span>(<span class="number">21</span>, <span class="number">34</span>, <span class="number">3</span>, <span class="number">32</span>, <span class="number">82</span>, <span class="number">55</span>, <span class="number">89</span>, <span class="number">50</span>, <span class="number">37</span>, <span class="number">5</span>, <span class="number">64</span>, <span class="number">35</span>, <span class="number">9</span>, <span class="number">70</span>);</div><div class="line">bubble_sort($arr);</div><div class="line"><span class="keyword">for</span> ($i = <span class="number">0</span>; $i &lt; count($arr); $i++)</div><div class="line">    <span class="keyword">echo</span> $arr[$i] . <span class="string">' '</span>;</div></pre></td></tr></table></figure>
<h4 id="复杂度分析"><a href="#复杂度分析" class="headerlink" title="复杂度分析"></a>复杂度分析</h4><p>冒泡排序对<code>n</code>个项目需要<code>О(n²)</code>的比较次数，且可以原地排序。尽管这个算法是最简单了解和实现的排序算法之一，但它对于少数元素之外的数列排序是很没有效率的。<br>冒泡排序是与插入排序拥有相等的运行时间，但是两种算法在需要的交换次数却很大地不同。在最好的情况，冒泡排序需要 <code>О(n²)</code>次交换，而插入排序只要最多<code>O(n)</code>交换。冒泡排序的实现（类似下面）通常会对已经排序好的数列拙劣地运行（<code>О(n²)</code>），而插入排序在这个例子只需要<code>O(n)</code>个运算。因此很多现代的算法教科书避免使用冒泡排序，而用插入排序替换之。冒泡排序如果能在内部循环第一次运行时，使用一个旗标来表示有无需要交换的可能，也可以把最好的复杂度降低到<code>O(n)</code>。在这个情况，已经排序好的数列就无交换的需要。若在每次走访数列时，把走访顺序反过来，也可以稍微地改进效率。有时候称为鸡尾酒排序，因为算法会从数列的一端到另一端之间穿梭往返。</p>
<p>参考：<a href="https://zh.wikipedia.org/wiki/%E5%86%92%E6%B3%A1%E6%8E%92%E5%BA%8F" target="_blank" rel="external">https://zh.wikipedia.org/wiki/%E5%86%92%E6%B3%A1%E6%8E%92%E5%BA%8F</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;　　&lt;strong&gt; 概述：&lt;/strong&gt;冒泡排序（Bubble Sort）是一种简单的排序算法。它重复地走访过要排序的数列，一次比较两个元素，如果他们的顺序错误就把他们交换过来。走访数列的工作是重复地进行直到没有再需要交换，也就是说该数列已经排序完成。这个算法的名字由来是因为越小的元素会经由交换慢慢“浮”到数列的顶端。&lt;br&gt;
    
    </summary>
    
      <category term="冒泡排序" scheme="http://daijinlin.com/categories/%E5%86%92%E6%B3%A1%E6%8E%92%E5%BA%8F/"/>
    
    
      <category term="算法" scheme="http://daijinlin.com/tags/%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>Apk打包流程</title>
    <link href="http://daijinlin.com/2016/07/12/Apk%E6%89%93%E5%8C%85%E6%B5%81%E7%A8%8B/"/>
    <id>http://daijinlin.com/2016/07/12/Apk打包流程/</id>
    <published>2016-07-12T06:22:34.000Z</published>
    <updated>2017-04-12T06:49:35.470Z</updated>
    
    <content type="html"><![CDATA[<p>　　<strong> 概述：</strong>Android 构建系统编译应用资源和源代码，然后将它们打包成可供您测试、部署、签署和分发的 APK。<br><a id="more"></a></p>
<h4 id="基本流程"><a href="#基本流程" class="headerlink" title="基本流程"></a>基本流程</h4><p>在构建过程中，Android项目将被编译并打包成.apk文件，该apk文件是二进制文件的容器。它包含在设备或模拟器上运行应用程序所需的所有信息，例如已编译的.dex文件（.class文件转换为Dalvik字节码），二进制版本的AndroidManifest.xml文件，已编译资源（resources.arsc）和未编译的资源文件。下图是早起<a href="https://stuff.mit.edu/afs/sipb/project/android/docs/tools/building/index.html" target="_blank" rel="external">官网</a>的一张构建流程图<br><img src="/res/compile/build-simplified.png" alt="简单流程图"></p>
<p>再来看一张稍微详细一点<br><img src="/res/compile/android_build.png" alt="详细流程图"></p>
<p>从上面的流程图，我们可以看出apk打包流程可以分为以下七步</p>
<ul>
<li>1.通过aapt打包res资源文件，生成R.java、resources.arsc和res文件（二进制 &amp; 非二进制如res/raw和pic保持原样）</li>
<li>2.处理.aidl文件，生成对应的Java接口文件</li>
<li>3.通过Java Compiler编译R.java、Java接口文件、Java源文件，生成.class文件</li>
<li>4.通过dex命令，将.class文件和第三方库中的.class文件处理生成classes.dex</li>
<li>5.通过apkbuilder工具，将aapt生成的resources.arsc和res文件、assets文件和classes.dex一起打包生成apk</li>
<li>6.通过Jarsigner工具，对上面的apk进行debug或release签名</li>
<li>7.通过zipalign工具，将签名后的apk进行对齐处理。</li>
</ul>
<p>以上是基于比较早起使用Eclipse作为IDE开发打包的流程。而如今几乎Android Studio空前盛行的大环境下。新<a href="https://developer.android.com/studio/build/index.html?hl=zh-cn#build-process" target="_blank" rel="external">官网</a>也给出了最新的构建过程图，完全基于Android Studio使用Gradle作为构建工具<br><img src="/res/compile/build-process_2x.png" alt="典型 Android 应用模块的构建流程"></p>
<p>典型 Android 应用模块的构建流程通常依循下列步骤：</p>
<ul>
<li>1.编译器将您的源代码转换成 DEX（Dalvik Executable) 文件（其中包括运行在 Android 设备上的字节码），将所有其他内容转换成已编译资源。</li>
<li>2.APK 打包器将 DEX 文件和已编译资源合并成单个 APK。不过，必须先签署 APK，才能将应用安装并部署到 Android 设备上。</li>
<li>3.APK 打包器使用调试或发布密钥库签署您的 APK：<ul>
<li>a.如果您构建的是调试版本的应用（即专用于测试和分析的应用），打包器会使用调试密钥库签署您的应用。Android Studio 自动使用调试密钥库配置新项目。</li>
<li>b.如果您构建的是打算向外发布的发布版本应用，打包器会使用发布密钥库签署您的应用。要创建发布密钥库，请阅读在 Android Studio 中签署您的应用。</li>
</ul>
</li>
<li>4.在生成最终 APK 之前，打包器会使用 zipalign 工具对应用进行优化，减少其在设备上运行时的内存占用。</li>
</ul>
<p>最后再看一张更加详细的流程图，高能预警<br><img src="/res/compile/android_build_detail.png" alt=""></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;　　&lt;strong&gt; 概述：&lt;/strong&gt;Android 构建系统编译应用资源和源代码，然后将它们打包成可供您测试、部署、签署和分发的 APK。&lt;br&gt;
    
    </summary>
    
      <category term="打包" scheme="http://daijinlin.com/categories/%E6%89%93%E5%8C%85/"/>
    
    
  </entry>
  
  <entry>
    <title>简单分析RecyclerView三大流程</title>
    <link href="http://daijinlin.com/2016/05/13/three-step-of-recyclerview/"/>
    <id>http://daijinlin.com/2016/05/13/three-step-of-recyclerview/</id>
    <published>2016-05-13T12:02:46.000Z</published>
    <updated>2017-04-12T05:59:50.425Z</updated>
    
    <content type="html"><![CDATA[<p>　　<strong> 概述：</strong>在日常开发中，列表的使用非常的普遍，从起初的AdapterView到现在的RecyclerView都实现了展示大量数据集，而内存不会出现OOM的情况。它们各自都实现了对应的缓存机制来实现回收功能。关于RecyclerView的缓存机制，后续使用独立篇幅介绍，本篇着重从View的三大基本流程分析。<br><a id="more"></a><br>本篇所有源码基于<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">compile &apos;com.android.support:recyclerview-v7:25.3.1&apos;</div></pre></td></tr></table></figure></p>
<h4 id="onMeasure"><a href="#onMeasure" class="headerlink" title="onMeasure"></a>onMeasure</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Override</span></div><div class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onMeasure</span><span class="params">(<span class="keyword">int</span> widthSpec, <span class="keyword">int</span> heightSpec)</span> </span>&#123;</div><div class="line">    <span class="comment">// 如果LayoutManager为空，则走默认的measure逻辑</span></div><div class="line">    <span class="keyword">if</span> (mLayout == <span class="keyword">null</span>) &#123;</div><div class="line">        defaultOnMeasure(widthSpec, heightSpec);</div><div class="line">        <span class="keyword">return</span>;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">if</span> (mLayout.mAutoMeasure) &#123; <span class="comment">// 如果LayoutManager设置了setAutoMeasureEnabled为true</span></div><div class="line">        <span class="comment">// 第一部分：</span></div><div class="line">        <span class="comment">// 1) 调用LayoutManager#onMeasure，在其内部调用了RecyclerView#defaultOnMeasure，然后调用LayoutManager.chooseSize。</span></div><div class="line">        <span class="comment">// 2) 检查如果width和height都是精确值，那么就不用再根据内容进行计算所需要的width和height，跳过之后的步骤。如果有其中任何一个值不是精确值，则进入到下面计算所需长宽的步骤。</span></div><div class="line">        <span class="keyword">final</span> <span class="keyword">int</span> widthMode = MeasureSpec.getMode(widthSpec);</div><div class="line">        <span class="keyword">final</span> <span class="keyword">int</span> heightMode = MeasureSpec.getMode(heightSpec);</div><div class="line">        <span class="keyword">final</span> <span class="keyword">boolean</span> skipMeasure = widthMode == MeasureSpec.EXACTLY</div><div class="line">                &amp;&amp; heightMode == MeasureSpec.EXACTLY;</div><div class="line">        mLayout.onMeasure(mRecycler, mState, widthSpec, heightSpec);</div><div class="line">        <span class="keyword">if</span> (skipMeasure || mAdapter == <span class="keyword">null</span>) &#123;</div><div class="line">            <span class="keyword">return</span>;</div><div class="line">        &#125;</div><div class="line">        <span class="comment">// 第二部分：</span></div><div class="line">        <span class="comment">// 1) 开启布局流程计算出所有Child的边界</span></div><div class="line">        <span class="comment">// 2) 然后根据计算出的Child的边界计算出RecyclerView的所需width和height</span></div><div class="line">        <span class="comment">// 3) 检查是否需要再次测量</span></div><div class="line">        <span class="keyword">if</span> (mState.mLayoutStep == State.STEP_START) &#123;</div><div class="line">            dispatchLayoutStep1();</div><div class="line">        &#125;</div><div class="line">        <span class="comment">// set dimensions in 2nd step. Pre-layout should happen with old dimensions for</span></div><div class="line">        <span class="comment">// consistency</span></div><div class="line">        mLayout.setMeasureSpecs(widthSpec, heightSpec);</div><div class="line">        mState.mIsMeasuring = <span class="keyword">true</span>;</div><div class="line">        dispatchLayoutStep2();</div><div class="line"></div><div class="line">        <span class="comment">// now we can get the width and height from the children.</span></div><div class="line">        <span class="comment">// 布局过程结束，根据Children中的边界信息计算并设置RecyclerView长宽的测量值</span></div><div class="line">        mLayout.setMeasuredDimensionFromChildren(widthSpec, heightSpec);</div><div class="line"></div><div class="line">        <span class="comment">// if RecyclerView has non-exact width and height and if there is at least one child</span></div><div class="line">        <span class="comment">// which also has non-exact width &amp; height, we have to re-measure.</span></div><div class="line">        <span class="comment">// 检查是否需要再次测量。如果RecyclerView仍然有非精确的宽和高，或者这里还有至少一个Child还有非精确的宽和高，我们就需要在此测量。</span></div><div class="line">        <span class="keyword">if</span> (mLayout.shouldMeasureTwice()) &#123;</div><div class="line">            mLayout.setMeasureSpecs(</div><div class="line">                MeasureSpec.makeMeasureSpec(getMeasuredWidth(), MeasureSpec.EXACTLY),</div><div class="line">                    MeasureSpec.makeMeasureSpec(getMeasuredHeight(), MeasureSpec.EXACTLY));</div><div class="line">            mState.mIsMeasuring = <span class="keyword">true</span>;</div><div class="line">            dispatchLayoutStep2();</div><div class="line">            <span class="comment">// now we can get the width and height from the children.</span></div><div class="line">            mLayout.setMeasuredDimensionFromChildren(widthSpec, heightSpec);</div><div class="line">        &#125;</div><div class="line">    &#125; <span class="keyword">else</span> &#123;</div><div class="line">        <span class="comment">// 第一部分：如果RecyclerView已经设置了Size固定，则执行LayoutManager#onMeasure方法</span></div><div class="line">        <span class="keyword">if</span> (mHasFixedSize) &#123;</div><div class="line">            mLayout.onMeasure(mRecycler, mState, widthSpec, heightSpec);</div><div class="line">            <span class="keyword">return</span>;</div><div class="line">        &#125;</div><div class="line">        <span class="comment">// 第二部分：</span></div><div class="line">        <span class="comment">// 1) 如果在测量的过程中有数据有更新，则先处理更新的数据</span></div><div class="line">        <span class="comment">// 2) 执行自定义测量流程，这需要自定义的LayoutManager#onMeasure方法。</span></div><div class="line">        <span class="comment">// custom onMeasure</span></div><div class="line">        <span class="keyword">if</span> (mAdapterUpdateDuringMeasure) &#123;</div><div class="line">            eatRequestLayout();</div><div class="line">            onEnterLayoutOrScroll();</div><div class="line">            processAdapterUpdatesAndSetAnimationFlags();</div><div class="line">            onExitLayoutOrScroll();</div><div class="line"></div><div class="line">            <span class="keyword">if</span> (mState.mRunPredictiveAnimations) &#123;</div><div class="line">                mState.mInPreLayout = <span class="keyword">true</span>;</div><div class="line">            &#125; <span class="keyword">else</span> &#123;</div><div class="line">                <span class="comment">// consume remaining updates to provide a consistent state with the layout pass.</span></div><div class="line">                mAdapterHelper.consumeUpdatesInOnePass();</div><div class="line">                mState.mInPreLayout = <span class="keyword">false</span>;</div><div class="line">            &#125;</div><div class="line">            mAdapterUpdateDuringMeasure = <span class="keyword">false</span>;</div><div class="line">            resumeRequestLayout(<span class="keyword">false</span>);</div><div class="line">        &#125;</div><div class="line">        <span class="comment">// 处理完新更新的数据，然后执行自定义测量操作。</span></div><div class="line">        <span class="keyword">if</span> (mAdapter != <span class="keyword">null</span>) &#123;</div><div class="line">            mState.mItemCount = mAdapter.getItemCount();</div><div class="line">        &#125; <span class="keyword">else</span> &#123;</div><div class="line">            mState.mItemCount = <span class="number">0</span>;</div><div class="line">        &#125;</div><div class="line">        eatRequestLayout();</div><div class="line">        mLayout.onMeasure(mRecycler, mState, widthSpec, heightSpec);</div><div class="line">        resumeRequestLayout(<span class="keyword">false</span>);</div><div class="line">        mState.mInPreLayout = <span class="keyword">false</span>; <span class="comment">// clear</span></div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>通常情况下，进入的都是自动测量模式。系统提供的<code>LinearLayoutManager</code>、<code>GridLayoutManager</code>、<code>StaggeredGridLayoutManager</code>基本上都在构造函数中直接或者间接设置了<code>setAutoMeasureEnabled</code>为<code>true</code>。如果我们自定义<code>LayoutManager</code>的时候，需要根据需求决定是否开启自动测量，默认是不开启的。</p>
<h4 id="onLayout"><a href="#onLayout" class="headerlink" title="onLayout"></a>onLayout</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Override</span></div><div class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onLayout</span><span class="params">(<span class="keyword">boolean</span> changed, <span class="keyword">int</span> l, <span class="keyword">int</span> t, <span class="keyword">int</span> r, <span class="keyword">int</span> b)</span> </span>&#123;</div><div class="line">    TraceCompat.beginSection(TRACE_ON_LAYOUT_TAG);</div><div class="line">    dispatchLayout();</div><div class="line">    TraceCompat.endSection();</div><div class="line">    mFirstLayoutComplete = <span class="keyword">true</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">dispatchLayout</span><span class="params">()</span> </span>&#123;</div><div class="line">    ...省略部分代码</div><div class="line">    mState.mIsMeasuring = <span class="keyword">false</span>;</div><div class="line">    <span class="keyword">if</span> (mState.mLayoutStep == State.STEP_START) &#123;</div><div class="line">        <span class="comment">// 1) 没有执行过布局流程的情况</span></div><div class="line">        dispatchLayoutStep1();</div><div class="line">        mLayout.setExactMeasureSpecsFrom(<span class="keyword">this</span>);</div><div class="line">        dispatchLayoutStep2();</div><div class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (mAdapterHelper.hasUpdates() || mLayout.getWidth() != getWidth() ||</div><div class="line">            mLayout.getHeight() != getHeight()) &#123;</div><div class="line">        <span class="comment">// First 2 steps are done in onMeasure but looks like we have to run again due to</span></div><div class="line">        <span class="comment">// changed size.</span></div><div class="line">        <span class="comment">// 2) 执行过布局流程，但是之后size又有变化的情况</span></div><div class="line">        mLayout.setExactMeasureSpecsFrom(<span class="keyword">this</span>);</div><div class="line">        dispatchLayoutStep2();</div><div class="line">    &#125; <span class="keyword">else</span> &#123;</div><div class="line">        <span class="comment">// 3) 执行过布局流程，可以直接使用之前数据的情况</span></div><div class="line">        <span class="comment">// always make sure we sync them (to ensure mode is exact)</span></div><div class="line">        mLayout.setExactMeasureSpecsFrom(<span class="keyword">this</span>);</div><div class="line">    &#125;</div><div class="line">    dispatchLayoutStep3();</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>可以看出<code>RecyclerView</code>的布局过程分为3步：<code>dispatchLayoutStep1</code>，<code>dispatchLayoutStep2</code>和<code>dispatchLayoutStep3</code>。在上面自动测量过程中我们为了得到Child的边界值，使用了<code>dispatchLayoutStep1</code>和<code>dispatchLayoutStep2</code>，所以在<code>dispatchLayout</code>中分了三种情况进行处理</p>
<ul>
<li>1.没有执行过布局流程的情况</li>
<li>2.执行过布局流程，但是之后size又有变化的情况</li>
<li>3.执行过布局流程，可以直接使用之前数据的情况</li>
</ul>
<p>不过，无论何种情况，最终都是完成<code>dispatchLayoutStep1</code>，<code>dispatchLayoutStep2</code>和<code>dispatchLayoutStep3</code>这三步，其中<code>dispatchLayoutStep1</code>就是pre layout，<code>dispatchLayoutStep3</code>是post layout，而<code>dispatchLayoutStep2</code>是处理真正测量&amp;布局的了。这样的情况区分只是为了避免重复计算。接下来按步分析。</p>
<h4 id="dispatchLayoutStep1"><a href="#dispatchLayoutStep1" class="headerlink" title="dispatchLayoutStep1"></a>dispatchLayoutStep1</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"> * The first step of a layout where we;</div><div class="line"> * - process adapter updates</div><div class="line"> * - decide which animation should run</div><div class="line"> * - save information about current views</div><div class="line"> * - If necessary, run predictive layout and save its information</div><div class="line"> */</div><div class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">dispatchLayoutStep1</span><span class="params">()</span> </span>&#123;</div><div class="line">    mState.assertLayoutStep(State.STEP_START);</div><div class="line">    mState.mIsMeasuring = <span class="keyword">false</span>;</div><div class="line">    eatRequestLayout();</div><div class="line">    mViewInfoStore.clear();</div><div class="line">    onEnterLayoutOrScroll();</div><div class="line">    processAdapterUpdatesAndSetAnimationFlags(); <span class="comment">// 动画相关</span></div><div class="line">    saveFocusInfo();</div><div class="line">    mState.mTrackOldChangeHolders = mState.mRunSimpleAnimations &amp;&amp; mItemsChanged;</div><div class="line">    mItemsAddedOrRemoved = mItemsChanged = <span class="keyword">false</span>;</div><div class="line">    mState.mInPreLayout = mState.mRunPredictiveAnimations;</div><div class="line">    mState.mItemCount = mAdapter.getItemCount();</div><div class="line">    findMinMaxChildLayoutPositions(mMinMaxLayoutPositions);</div><div class="line"></div><div class="line">    <span class="keyword">if</span> (mState.mRunSimpleAnimations) &#123;</div><div class="line">        <span class="comment">// Step 0: Find out where all non-removed items are, pre-layout</span></div><div class="line">        <span class="keyword">int</span> count = mChildHelper.getChildCount();</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; count; ++i) &#123;</div><div class="line">            <span class="keyword">final</span> ViewHolder holder = getChildViewHolderInt(mChildHelper.getChildAt(i));</div><div class="line">            <span class="keyword">if</span> (holder.shouldIgnore() || (holder.isInvalid() &amp;&amp; !mAdapter.hasStableIds())) &#123;</div><div class="line">                <span class="keyword">continue</span>;</div><div class="line">            &#125;</div><div class="line">            <span class="keyword">final</span> ItemHolderInfo animationInfo = mItemAnimator</div><div class="line">                    .recordPreLayoutInformation(mState, holder,</div><div class="line">                            ItemAnimator.buildAdapterChangeFlagsForAnimations(holder),</div><div class="line">                            holder.getUnmodifiedPayloads());</div><div class="line">            mViewInfoStore.addToPreLayout(holder, animationInfo);</div><div class="line">            <span class="keyword">if</span> (mState.mTrackOldChangeHolders &amp;&amp; holder.isUpdated() &amp;&amp; !holder.isRemoved()</div><div class="line">                    &amp;&amp; !holder.shouldIgnore() &amp;&amp; !holder.isInvalid()) &#123;</div><div class="line">                <span class="keyword">long</span> key = getChangedHolderKey(holder);</div><div class="line">                <span class="comment">// This is NOT the only place where a ViewHolder is added to old change holders</span></div><div class="line">                <span class="comment">// list. There is another case where:</span></div><div class="line">                <span class="comment">//    * A VH is currently hidden but not deleted</span></div><div class="line">                <span class="comment">//    * The hidden item is changed in the adapter</span></div><div class="line">                <span class="comment">//    * Layout manager decides to layout the item in the pre-Layout pass (step1)</span></div><div class="line">                <span class="comment">// When this case is detected, RV will un-hide that view and add to the old</span></div><div class="line">                <span class="comment">// change holders list.</span></div><div class="line">                mViewInfoStore.addToOldChangeHolders(key, holder);</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">if</span> (mState.mRunPredictiveAnimations) &#123;</div><div class="line">        <span class="comment">// Step 1: run prelayout: This will use the old positions of items. The layout manager</span></div><div class="line">        <span class="comment">// is expected to layout everything, even removed items (though not to add removed</span></div><div class="line">        <span class="comment">// items back to the container). This gives the pre-layout position of APPEARING views</span></div><div class="line">        <span class="comment">// which come into existence as part of the real layout.</span></div><div class="line"></div><div class="line">        <span class="comment">// Save old positions so that LayoutManager can run its mapping logic.</span></div><div class="line">        saveOldPositions();</div><div class="line">        <span class="keyword">final</span> <span class="keyword">boolean</span> didStructureChange = mState.mStructureChanged;</div><div class="line">        mState.mStructureChanged = <span class="keyword">false</span>;</div><div class="line">        <span class="comment">// temporarily disable flag because we are asking for previous layout</span></div><div class="line">        mLayout.onLayoutChildren(mRecycler, mState);</div><div class="line">        mState.mStructureChanged = didStructureChange;</div><div class="line"></div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; mChildHelper.getChildCount(); ++i) &#123;</div><div class="line">            <span class="keyword">final</span> View child = mChildHelper.getChildAt(i);</div><div class="line">            <span class="keyword">final</span> ViewHolder viewHolder = getChildViewHolderInt(child);</div><div class="line">            <span class="keyword">if</span> (viewHolder.shouldIgnore()) &#123;</div><div class="line">                <span class="keyword">continue</span>;</div><div class="line">            &#125;</div><div class="line">            <span class="keyword">if</span> (!mViewInfoStore.isInPreLayout(viewHolder)) &#123;</div><div class="line">                <span class="keyword">int</span> flags = ItemAnimator.buildAdapterChangeFlagsForAnimations(viewHolder);</div><div class="line">                <span class="keyword">boolean</span> wasHidden = viewHolder</div><div class="line">                        .hasAnyOfTheFlags(ViewHolder.FLAG_BOUNCED_FROM_HIDDEN_LIST);</div><div class="line">                <span class="keyword">if</span> (!wasHidden) &#123;</div><div class="line">                    flags |= ItemAnimator.FLAG_APPEARED_IN_PRE_LAYOUT;</div><div class="line">                &#125;</div><div class="line">                <span class="keyword">final</span> ItemHolderInfo animationInfo = mItemAnimator.recordPreLayoutInformation(</div><div class="line">                        mState, viewHolder, flags, viewHolder.getUnmodifiedPayloads());</div><div class="line">                <span class="keyword">if</span> (wasHidden) &#123;</div><div class="line">                    recordAnimationInfoIfBouncedHiddenView(viewHolder, animationInfo);</div><div class="line">                &#125; <span class="keyword">else</span> &#123;</div><div class="line">                    mViewInfoStore.addToAppearedInPreLayoutHolders(viewHolder, animationInfo);</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        <span class="comment">// we don't process disappearing list because they may re-appear in post layout pass.</span></div><div class="line">        clearOldPositions();</div><div class="line">    &#125; <span class="keyword">else</span> &#123;</div><div class="line">        clearOldPositions();</div><div class="line">    &#125;</div><div class="line">    onExitLayoutOrScroll();</div><div class="line">    resumeRequestLayout(<span class="keyword">false</span>);</div><div class="line">    mState.mLayoutStep = State.STEP_LAYOUT;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>类<code>ItemHolderInfo</code>是<code>RecyclerView</code>的内部类<code>ItemAnimator</code>的内部类。其中封装了对应ItemView的边界信息，即ItemView的left、top、right、bottom值。对象mViewInfoStore的作用注释写的很清楚，是提供给动画使用的。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"> * Keeps data about views to be used for animations</div><div class="line"> */</div><div class="line"><span class="keyword">final</span> ViewInfoStore mViewInfoStore = <span class="keyword">new</span> ViewInfoStore();</div></pre></td></tr></table></figure>
<p>继续来看<code>ViewInfoStore</code>的<code>addToPreLayout</code>方法</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"> * Adds the item information to the prelayout tracking</div><div class="line"> * <span class="doctag">@param</span> holder The ViewHolder whose information is being saved</div><div class="line"> * <span class="doctag">@param</span> info The information to save</div><div class="line"> */</div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">addToPreLayout</span><span class="params">(ViewHolder holder, ItemHolderInfo info)</span> </span>&#123;</div><div class="line">    InfoRecord record = mLayoutHolderMap.get(holder);</div><div class="line">    <span class="keyword">if</span> (record == <span class="keyword">null</span>) &#123;</div><div class="line">        record = InfoRecord.obtain();</div><div class="line">        mLayoutHolderMap.put(holder, record);</div><div class="line">    &#125;</div><div class="line">    record.preInfo = info;</div><div class="line">    record.flags |= FLAG_PRE;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>可以看出<code>RecyclerView</code>将pre layout阶段的ItemView信息存放在了ViewInfoStore中的mLayoutHolderMap集合中。</p>
<h4 id="dispatchLayoutStep2"><a href="#dispatchLayoutStep2" class="headerlink" title="dispatchLayoutStep2"></a>dispatchLayoutStep2</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"> * The second layout step where we do the actual layout of the views for the final state.</div><div class="line"> * This step might be run multiple times if necessary (e.g. measure).</div><div class="line"> */</div><div class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">dispatchLayoutStep2</span><span class="params">()</span> </span>&#123;</div><div class="line">    eatRequestLayout();</div><div class="line">    onEnterLayoutOrScroll();</div><div class="line">    mState.assertLayoutStep(State.STEP_LAYOUT | State.STEP_ANIMATIONS);</div><div class="line">    mAdapterHelper.consumeUpdatesInOnePass();</div><div class="line">    mState.mItemCount = mAdapter.getItemCount();</div><div class="line">    mState.mDeletedInvisibleItemCountSincePreviousLayout = <span class="number">0</span>;</div><div class="line"></div><div class="line">    <span class="comment">// Step 2: Run layout</span></div><div class="line">    mState.mInPreLayout = <span class="keyword">false</span>;</div><div class="line">    <span class="comment">// 调用LayoutManager#onLayoutChildren方法，如果我们自定义LayoutManager则需要重写此方法，具体可以参考系统提供的三种LayoutManager</span></div><div class="line">    mLayout.onLayoutChildren(mRecycler, mState);</div><div class="line"></div><div class="line">    mState.mStructureChanged = <span class="keyword">false</span>;</div><div class="line">    mPendingSavedState = <span class="keyword">null</span>;</div><div class="line"></div><div class="line">    <span class="comment">// onLayoutChildren may have caused client code to disable item animations; re-check</span></div><div class="line">    mState.mRunSimpleAnimations = mState.mRunSimpleAnimations &amp;&amp; mItemAnimator != <span class="keyword">null</span>;</div><div class="line">    mState.mLayoutStep = State.STEP_ANIMATIONS;</div><div class="line">    onExitLayoutOrScroll();</div><div class="line">    resumeRequestLayout(<span class="keyword">false</span>);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>根据注释就可以看出这是我们做实际布局的逻辑。</p>
<h4 id="dispatchLayoutStep3"><a href="#dispatchLayoutStep3" class="headerlink" title="dispatchLayoutStep3"></a>dispatchLayoutStep3</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"> * The final step of the layout where we save the information about views for animations,</div><div class="line"> * trigger animations and do any necessary cleanup.</div><div class="line"> */</div><div class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">dispatchLayoutStep3</span><span class="params">()</span> </span>&#123;</div><div class="line">    mState.assertLayoutStep(State.STEP_ANIMATIONS);</div><div class="line">    eatRequestLayout();</div><div class="line">    onEnterLayoutOrScroll();</div><div class="line">    mState.mLayoutStep = State.STEP_START;</div><div class="line">    <span class="keyword">if</span> (mState.mRunSimpleAnimations) &#123;</div><div class="line">        <span class="comment">// Step 3: Find out where things are now, and process change animations.</span></div><div class="line">        <span class="comment">// traverse list in reverse because we may call animateChange in the loop which may</span></div><div class="line">        <span class="comment">// remove the target view holder.</span></div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = mChildHelper.getChildCount() - <span class="number">1</span>; i &gt;= <span class="number">0</span>; i--) &#123;</div><div class="line">            ViewHolder holder = getChildViewHolderInt(mChildHelper.getChildAt(i));</div><div class="line">            <span class="keyword">if</span> (holder.shouldIgnore()) &#123;</div><div class="line">                <span class="keyword">continue</span>;</div><div class="line">            &#125;</div><div class="line">            <span class="keyword">long</span> key = getChangedHolderKey(holder);</div><div class="line">            <span class="keyword">final</span> ItemHolderInfo animationInfo = mItemAnimator</div><div class="line">                    .recordPostLayoutInformation(mState, holder);</div><div class="line">            ViewHolder oldChangeViewHolder = mViewInfoStore.getFromOldChangeHolders(key);</div><div class="line">            <span class="keyword">if</span> (oldChangeViewHolder != <span class="keyword">null</span> &amp;&amp; !oldChangeViewHolder.shouldIgnore()) &#123;</div><div class="line">                <span class="comment">// run a change animation</span></div><div class="line"></div><div class="line">                <span class="comment">// If an Item is CHANGED but the updated version is disappearing, it creates</span></div><div class="line">                <span class="comment">// a conflicting case.</span></div><div class="line">                <span class="comment">// Since a view that is marked as disappearing is likely to be going out of</span></div><div class="line">                <span class="comment">// bounds, we run a change animation. Both views will be cleaned automatically</span></div><div class="line">                <span class="comment">// once their animations finish.</span></div><div class="line">                <span class="comment">// On the other hand, if it is the same view holder instance, we run a</span></div><div class="line">                <span class="comment">// disappearing animation instead because we are not going to rebind the updated</span></div><div class="line">                <span class="comment">// VH unless it is enforced by the layout manager.</span></div><div class="line">                <span class="keyword">final</span> <span class="keyword">boolean</span> oldDisappearing = mViewInfoStore.isDisappearing(</div><div class="line">                        oldChangeViewHolder);</div><div class="line">                <span class="keyword">final</span> <span class="keyword">boolean</span> newDisappearing = mViewInfoStore.isDisappearing(holder);</div><div class="line">                <span class="keyword">if</span> (oldDisappearing &amp;&amp; oldChangeViewHolder == holder) &#123;</div><div class="line">                    <span class="comment">// run disappear animation instead of change</span></div><div class="line">                    mViewInfoStore.addToPostLayout(holder, animationInfo);</div><div class="line">                &#125; <span class="keyword">else</span> &#123;</div><div class="line">                    <span class="keyword">final</span> ItemHolderInfo preInfo = mViewInfoStore.popFromPreLayout(</div><div class="line">                            oldChangeViewHolder);</div><div class="line">                    <span class="comment">// we add and remove so that any post info is merged.</span></div><div class="line">                    mViewInfoStore.addToPostLayout(holder, animationInfo);</div><div class="line">                    ItemHolderInfo postInfo = mViewInfoStore.popFromPostLayout(holder);</div><div class="line">                    <span class="keyword">if</span> (preInfo == <span class="keyword">null</span>) &#123;</div><div class="line">                        handleMissingPreInfoForChangeError(key, holder, oldChangeViewHolder);</div><div class="line">                    &#125; <span class="keyword">else</span> &#123;</div><div class="line">                        animateChange(oldChangeViewHolder, holder, preInfo, postInfo,</div><div class="line">                                oldDisappearing, newDisappearing);</div><div class="line">                    &#125;</div><div class="line">                &#125;</div><div class="line">            &#125; <span class="keyword">else</span> &#123;</div><div class="line">                mViewInfoStore.addToPostLayout(holder, animationInfo);</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="comment">// Step 4: Process view info lists and trigger animations</span></div><div class="line">        mViewInfoStore.process(mViewInfoProcessCallback);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    mLayout.removeAndRecycleScrapInt(mRecycler);</div><div class="line">    mState.mPreviousLayoutItemCount = mState.mItemCount;</div><div class="line">    mDataSetHasChangedAfterLayout = <span class="keyword">false</span>;</div><div class="line">    mState.mRunSimpleAnimations = <span class="keyword">false</span>;</div><div class="line"></div><div class="line">    mState.mRunPredictiveAnimations = <span class="keyword">false</span>;</div><div class="line">    mLayout.mRequestedSimpleAnimations = <span class="keyword">false</span>;</div><div class="line">    <span class="keyword">if</span> (mRecycler.mChangedScrap != <span class="keyword">null</span>) &#123;</div><div class="line">        mRecycler.mChangedScrap.clear();</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">if</span> (mLayout.mPrefetchMaxObservedInInitialPrefetch) &#123;</div><div class="line">        <span class="comment">// Initial prefetch has expanded cache, so reset until next prefetch.</span></div><div class="line">        <span class="comment">// This prevents initial prefetches from expanding the cache permanently.</span></div><div class="line">        mLayout.mPrefetchMaxCountObserved = <span class="number">0</span>;</div><div class="line">        mLayout.mPrefetchMaxObservedInInitialPrefetch = <span class="keyword">false</span>;</div><div class="line">        mRecycler.updateViewCacheSize();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    mLayout.onLayoutCompleted(mState);</div><div class="line">    onExitLayoutOrScroll();</div><div class="line">    resumeRequestLayout(<span class="keyword">false</span>);</div><div class="line">    mViewInfoStore.clear();</div><div class="line">    <span class="keyword">if</span> (didChildRangeChange(mMinMaxLayoutPositions[<span class="number">0</span>], mMinMaxLayoutPositions[<span class="number">1</span>])) &#123;</div><div class="line">        dispatchOnScrolled(<span class="number">0</span>, <span class="number">0</span>);</div><div class="line">    &#125;</div><div class="line">    recoverFocusFromState();</div><div class="line">    resetFocusInfo();</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>来看<code>ViewInfoStore</code>的<code>addToPostLayout</code>方法</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"> * Adds the item information to the post layout list</div><div class="line"> * <span class="doctag">@param</span> holder The ViewHolder whose information is being saved</div><div class="line"> * <span class="doctag">@param</span> info The information to save</div><div class="line"> */</div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">addToPostLayout</span><span class="params">(ViewHolder holder, ItemHolderInfo info)</span> </span>&#123;</div><div class="line">    InfoRecord record = mLayoutHolderMap.get(holder);</div><div class="line">    <span class="keyword">if</span> (record == <span class="keyword">null</span>) &#123;</div><div class="line">        record = InfoRecord.obtain();</div><div class="line">        mLayoutHolderMap.put(holder, record);</div><div class="line">    &#125;</div><div class="line">    record.postInfo = info;</div><div class="line">    record.flags |= FLAG_POST;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>与pre layout阶段相同<code>RecyclerView</code>也是将post layout阶段的ItemView信息存放在mViewInfoStore的mLayoutHolderMap集合中，并且不难看出，同一个ItemView（或者叫ViewHolder）的pre layout信息与post layout信息封装在了同一个InfoRecord中，分别叫InfoRecord.preInfo与InforRecord.postInfo，这样InfoRecord就保存着同一个ItemView在数据集变化前后的信息，我们可以根据此信息定义动画的开始和结束状态。 </p>
<h4 id="onDraw"><a href="#onDraw" class="headerlink" title="onDraw"></a>onDraw</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Override</span></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onDraw</span><span class="params">(Canvas c)</span> </span>&#123;</div><div class="line">    <span class="keyword">super</span>.onDraw(c);</div><div class="line"></div><div class="line">    <span class="keyword">final</span> <span class="keyword">int</span> count = mItemDecorations.size();</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; count; i++) &#123;</div><div class="line">        mItemDecorations.get(i).onDraw(c, <span class="keyword">this</span>, mState);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><code>onDraw</code>的代码比较简单，调用<code>super.onDraw(c)</code>执行绘制逻辑，同时获取<code>ItemDecoration</code>个数，分别调用<code>ItemDecoration</code>的<code>onDraw</code>对分割线进行了绘制。这里有个疑问就是<code>ItemDecoration</code>还有个<code>onDrawOver</code>方法是在哪里调用的呢？我们看<code>RecyclerView</code>的<code>draw</code>方法有下面这样一段代码</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"> <span class="meta">@Override</span></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">draw</span><span class="params">(Canvas c)</span> </span>&#123;</div><div class="line">    <span class="keyword">super</span>.draw(c);</div><div class="line"></div><div class="line">    <span class="keyword">final</span> <span class="keyword">int</span> count = mItemDecorations.size();</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; count; i++) &#123;</div><div class="line">        mItemDecorations.get(i).onDrawOver(c, <span class="keyword">this</span>, mState);</div><div class="line">    &#125;</div><div class="line">    ...省略部分代码</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>由此可以看到<code>ItemDecoration</code>的<code>onDraw</code>是优先于<code>onDrawOver</code>调用的。（具体请自行了解View的绘制流程中draw方法的代码细节）</p>
<p>到此，<code>RecyclerView</code>的三大基本流程就简要分析完了。至于很多细节，诸如缓存机制、动画更新等都没有做详细的分析，后续会单独开辟博文继续剖析。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;　　&lt;strong&gt; 概述：&lt;/strong&gt;在日常开发中，列表的使用非常的普遍，从起初的AdapterView到现在的RecyclerView都实现了展示大量数据集，而内存不会出现OOM的情况。它们各自都实现了对应的缓存机制来实现回收功能。关于RecyclerView的缓存机制，后续使用独立篇幅介绍，本篇着重从View的三大基本流程分析。&lt;br&gt;
    
    </summary>
    
      <category term="View" scheme="http://daijinlin.com/categories/View/"/>
    
    
      <category term="RecyclerView" scheme="http://daijinlin.com/tags/RecyclerView/"/>
    
  </entry>
  
  <entry>
    <title>Android开发中常用的python脚本</title>
    <link href="http://daijinlin.com/2016/04/13/python-tools/"/>
    <id>http://daijinlin.com/2016/04/13/python-tools/</id>
    <published>2016-04-13T12:02:46.000Z</published>
    <updated>2017-04-05T09:12:48.039Z</updated>
    
    <content type="html"><![CDATA[<p>　　<strong> 概述：</strong>Android开发中常用的python脚本<br><a id="more"></a></p>
<h1 id="图片压缩（tinypng）"><a href="#图片压缩（tinypng）" class="headerlink" title="图片压缩（tinypng）"></a>图片压缩（tinypng）</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#!/usr/bin/env python</span></div><div class="line"><span class="comment"># -*- coding: UTF-8 -*-</span></div><div class="line"></div><div class="line"><span class="string">"""</span></div><div class="line">导入Tinify</div><div class="line"> pip install --upgrade tinify</div><div class="line">"""</div><div class="line"></div><div class="line"><span class="keyword">import</span> os</div><div class="line"><span class="keyword">import</span> sys</div><div class="line"><span class="keyword">import</span> os.path</div><div class="line"><span class="keyword">import</span> tinify</div><div class="line"></div><div class="line"><span class="comment"># 去https://tinypng.com/developers申请API KEY</span></div><div class="line">tinify.key = <span class="string">"你申请到的API KEY"</span>     <span class="comment"># API KEY</span></div><div class="line"></div><div class="line"><span class="comment"># 压缩的核心</span></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">compress_core</span><span class="params">(input_file, output_file, img_width, img_height)</span>:</span></div><div class="line">    source = tinify.from_file(input_file)</div><div class="line">    <span class="keyword">if</span> img_width <span class="keyword">is</span> <span class="keyword">not</span> <span class="number">-1</span>:</div><div class="line">        resized = source.resize(</div><div class="line">            method = <span class="string">"scale"</span>,</div><div class="line">            width  = img_width,</div><div class="line">            height = img_height</div><div class="line">        )</div><div class="line">        resized.to_file(output_file)</div><div class="line">    <span class="keyword">else</span>:</div><div class="line">        source.to_file(output_file)</div><div class="line"></div><div class="line"><span class="comment"># 压缩一个文件夹下的图片</span></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">compress_path</span><span class="params">(path, width, height)</span>:</span></div><div class="line">    <span class="keyword">print</span> (<span class="string">"compress_path-------------------------------------"</span>)</div><div class="line">    <span class="keyword">if</span> <span class="keyword">not</span> os.path.isdir(path):</div><div class="line">        <span class="keyword">print</span> (<span class="string">"not a dir!"</span>)</div><div class="line">        <span class="keyword">return</span></div><div class="line">    <span class="keyword">else</span>:</div><div class="line">        input_path = path               <span class="comment"># 源路径</span></div><div class="line">        output_path = path+<span class="string">"/tiny"</span>      <span class="comment"># 输出路径</span></div><div class="line">        <span class="keyword">print</span> (<span class="string">"input_path = %s"</span> %input_path)</div><div class="line">        <span class="keyword">print</span> (<span class="string">"output_path = %s"</span> %output_path)</div><div class="line"></div><div class="line">        <span class="keyword">for</span> root, dirs, files <span class="keyword">in</span> os.walk(input_path):</div><div class="line">            <span class="keyword">print</span> (<span class="string">"root = %s"</span> %root)</div><div class="line">            <span class="keyword">print</span> (<span class="string">"dirs = %s"</span> %dirs)</div><div class="line">            <span class="keyword">print</span> (<span class="string">"files = %s"</span> %files)</div><div class="line">            <span class="keyword">for</span> name <span class="keyword">in</span> files:</div><div class="line">                file_name, file_suffix = os.path.splitext(name)</div><div class="line">                <span class="keyword">if</span> file_suffix == <span class="string">'.png'</span> <span class="keyword">or</span> file_suffix == <span class="string">'.jpg'</span> <span class="keyword">or</span> file_suffix == <span class="string">'.jpeg'</span>:</div><div class="line">                    output_full_path = output_path + root[len(input_path):]</div><div class="line">                    output_full_name = output_path + <span class="string">'/'</span> + name</div><div class="line">                    <span class="keyword">if</span> os.path.isdir(output_full_path):</div><div class="line">                        <span class="keyword">pass</span></div><div class="line">                    <span class="keyword">else</span>:</div><div class="line">                        os.mkdir(output_full_path)</div><div class="line">                    compress_core(root + <span class="string">'/'</span> + name, output_full_name, width, height)</div><div class="line">                <span class="keyword">break</span>                   <span class="comment"># 仅遍历当前目录</span></div><div class="line"></div><div class="line"><span class="keyword">if</span> __name__ == <span class="string">"__main__"</span>:</div><div class="line">    compress_path(os.getcwd(), <span class="number">-1</span>, <span class="number">-1</span>)</div></pre></td></tr></table></figure>
<h1 id="查找项目中同名文件"><a href="#查找项目中同名文件" class="headerlink" title="查找项目中同名文件"></a>查找项目中同名文件</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#!/usr/bin/python</span></div><div class="line"><span class="comment"># -*- coding: UTF-8 -*-</span></div><div class="line"></div><div class="line"><span class="keyword">import</span> os</div><div class="line"></div><div class="line">names = set()</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">check_file</span><span class="params">(name)</span>:</span></div><div class="line">    <span class="keyword">if</span> <span class="string">".java"</span> <span class="keyword">in</span> name:</div><div class="line">        <span class="keyword">if</span> name <span class="keyword">in</span> names:</div><div class="line">            <span class="keyword">print</span> name</div><div class="line">        <span class="keyword">else</span>:</div><div class="line">            names.add(name)</div><div class="line"></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">find_file</span><span class="params">(level, name)</span>:</span></div><div class="line">    rrrrdir = level + name</div><div class="line">    srcfiles = os.listdir(rrrrdir)</div><div class="line">    <span class="keyword">for</span> srcfile <span class="keyword">in</span> srcfiles:</div><div class="line">        srcfilepath = level + name + <span class="string">"/"</span> + srcfile</div><div class="line">        <span class="keyword">if</span> os.path.isdir(srcfilepath):</div><div class="line">            find_file(level + name + <span class="string">"/"</span>, srcfile)</div><div class="line">        <span class="keyword">else</span>:</div><div class="line">            <span class="keyword">if</span> <span class="string">"/."</span> <span class="keyword">not</span> <span class="keyword">in</span> srcfilepath:</div><div class="line">                <span class="keyword">if</span> <span class="string">"/java"</span> <span class="keyword">in</span> srcfilepath:</div><div class="line">                    <span class="keyword">if</span> <span class="string">"build"</span> <span class="keyword">not</span> <span class="keyword">in</span> srcfilepath:</div><div class="line">                        <span class="keyword">if</span> <span class="string">"Test"</span> <span class="keyword">not</span> <span class="keyword">in</span> srcfilepath:</div><div class="line">                            check_file(srcfile)</div><div class="line"></div><div class="line"></div><div class="line">srcdir = os.getcwd() </div><div class="line">name = <span class="string">""</span></div><div class="line">find_file(srcdir, name)</div></pre></td></tr></table></figure>
<h1 id="根据字符串生成二维码"><a href="#根据字符串生成二维码" class="headerlink" title="根据字符串生成二维码"></a>根据字符串生成二维码</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#coding:utf-8</span></div><div class="line"><span class="string">'''</span></div><div class="line">Python将Url生成二维码图片</div><div class="line"></div><div class="line">安装PIL：pip install pillow</div><div class="line">安装qrcode：pip install qrcode</div><div class="line">'''</div><div class="line"> </div><div class="line">__author__ = <span class="string">'Jinlin'</span></div><div class="line"> </div><div class="line"><span class="keyword">import</span> sys</div><div class="line"><span class="keyword">import</span> qrcode</div><div class="line"><span class="keyword">import</span> os</div><div class="line"> </div><div class="line"><span class="comment">#生成二维码图片</span></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">make_qr</span><span class="params">(url,save)</span>:</span></div><div class="line">    qr=qrcode.QRCode(</div><div class="line">        version=<span class="number">5</span>,  <span class="comment">#生成二维码尺寸的大小 1-40  1:21*21（21+(n-1)*4）</span></div><div class="line">        error_correction=qrcode.constants.ERROR_CORRECT_M, <span class="comment">#L:7%的字码可被容错 M:15%的字码可被容错 Q:25%的字码可被容错 H:30%的字码可被容错</span></div><div class="line">        box_size=<span class="number">10</span>, <span class="comment">#每个格子的像素大小</span></div><div class="line">        border=<span class="number">1</span>, <span class="comment">#边框的格子宽度大小（默认是4）</span></div><div class="line">    )</div><div class="line">    qr.add_data(url)</div><div class="line">    qr.make(fit=<span class="keyword">True</span>)</div><div class="line"> </div><div class="line">    img=qr.make_image()</div><div class="line">    img.save(save)</div><div class="line"> </div><div class="line"><span class="keyword">if</span> __name__==<span class="string">'__main__'</span>:</div><div class="line">    save_path=<span class="string">'theqrcode.png'</span> <span class="comment">#生成后的保存文件</span></div><div class="line">    str = <span class="string">'测试'</span></div><div class="line">    <span class="comment"># if sys.version_info &lt; (3, ):</span></div><div class="line">    <span class="comment">#     str=raw_input('请输入要生成二维码的文本内容：')</span></div><div class="line">    <span class="comment"># else :</span></div><div class="line">    <span class="comment">#     str=input('请输入要生成二维码的文本内容：')</span></div><div class="line"> </div><div class="line">    make_qr(str, save_path)</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;　　&lt;strong&gt; 概述：&lt;/strong&gt;Android开发中常用的python脚本&lt;br&gt;
    
    </summary>
    
      <category term="辅助脚本" scheme="http://daijinlin.com/categories/%E8%BE%85%E5%8A%A9%E8%84%9A%E6%9C%AC/"/>
    
    
      <category term="Python" scheme="http://daijinlin.com/tags/Python/"/>
    
  </entry>
  
  <entry>
    <title>RxJava线程调度</title>
    <link href="http://daijinlin.com/2016/04/12/RxJava-Scheduler/"/>
    <id>http://daijinlin.com/2016/04/12/RxJava-Scheduler/</id>
    <published>2016-04-12T04:22:25.000Z</published>
    <updated>2017-04-05T09:12:48.037Z</updated>
    
    <content type="html"><![CDATA[<p>　　<strong> 概述：</strong><br><a id="more"></a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;　　&lt;strong&gt; 概述：&lt;/strong&gt;&lt;br&gt;
    
    </summary>
    
      <category term="RxJava" scheme="http://daijinlin.com/categories/RxJava/"/>
    
    
      <category term="线程调度" scheme="http://daijinlin.com/tags/%E7%BA%BF%E7%A8%8B%E8%B0%83%E5%BA%A6/"/>
    
  </entry>
  
  <entry>
    <title>RxJava操作符</title>
    <link href="http://daijinlin.com/2016/04/11/RxJava-Operators/"/>
    <id>http://daijinlin.com/2016/04/11/RxJava-Operators/</id>
    <published>2016-04-11T11:22:46.000Z</published>
    <updated>2017-04-05T09:12:48.037Z</updated>
    
    <content type="html"><![CDATA[<p>　　<strong> 概述：</strong>通过代码介绍RxJava中的操作符，以及操作符的使用。<br><a id="more"></a></p>
<h1 id="操作符分类"><a href="#操作符分类" class="headerlink" title="操作符分类"></a>操作符分类</h1><h4 id="创建操作"><a href="#创建操作" class="headerlink" title="创建操作"></a>创建操作</h4><p>用于创建Observable的操作符</p>
<h5 id="Create-—-通过调用观察者的方法从头创建一个Observable"><a href="#Create-—-通过调用观察者的方法从头创建一个Observable" class="headerlink" title="Create — 通过调用观察者的方法从头创建一个Observable"></a>Create — 通过调用观察者的方法从头创建一个Observable</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line">Observable.create(<span class="keyword">new</span> OnSubscribe&lt;Integer&gt;() &#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">call</span><span class="params">(Subscriber&lt;? <span class="keyword">super</span> Integer&gt; subscriber)</span> </span>&#123;</div><div class="line">        <span class="keyword">if</span> (!subscriber.isUnsubscribed()) &#123;</div><div class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">5</span>; i++) &#123;</div><div class="line">                subscriber.onNext(i);</div><div class="line">            &#125;</div><div class="line">            subscriber.onCompleted();</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;).subscribe(<span class="keyword">new</span> Subscriber&lt;Integer&gt;() &#123;</div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onNext</span><span class="params">(Integer item)</span> </span>&#123;</div><div class="line">        System.out.println(<span class="string">"Next: "</span> + item);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onError</span><span class="params">(Throwable error)</span> </span>&#123;</div><div class="line">        System.err.println(<span class="string">"Error: "</span> + error.getMessage());</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onCompleted</span><span class="params">()</span> </span>&#123;</div><div class="line">        System.out.println(<span class="string">"Sequence complete."</span>);</div><div class="line">    &#125;</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<p>输出<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">Next: 0</div><div class="line">Next: 1</div><div class="line">Next: 2</div><div class="line">Next: 3</div><div class="line">Next: 4</div><div class="line">Sequence complete.</div></pre></td></tr></table></figure></p>
<h5 id="From-—-将其它的对象或数据结构转换为Observable"><a href="#From-—-将其它的对象或数据结构转换为Observable" class="headerlink" title="From — 将其它的对象或数据结构转换为Observable"></a>From — 将其它的对象或数据结构转换为Observable</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line">Integer[] items = &#123;<span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>&#125;;</div><div class="line">Observable&lt;Integer&gt; observable = Observable.from(items);</div><div class="line">observable.subscribe(<span class="keyword">new</span> Action1&lt;Integer&gt;() &#123;</div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">call</span><span class="params">(Integer integer)</span> </span>&#123;</div><div class="line">        System.out.println(integer);</div><div class="line">    &#125;</div><div class="line">&#125;, <span class="keyword">new</span> Action1&lt;Throwable&gt;() &#123;</div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">call</span><span class="params">(Throwable throwable)</span> </span>&#123;</div><div class="line">        System.out.println(<span class="string">"Error encountered: "</span> + throwable.getMessage());</div><div class="line">    &#125;</div><div class="line">&#125;, <span class="keyword">new</span> Action0() &#123;</div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">call</span><span class="params">()</span> </span>&#123;</div><div class="line">        System.out.println(<span class="string">"Sequence complete"</span>);</div><div class="line">    &#125;</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<p>输出<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">0</div><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">Sequence complete</div></pre></td></tr></table></figure></p>
<h5 id="Just-—-将对象或者对象集合转换为一个会发射这些对象的Observable"><a href="#Just-—-将对象或者对象集合转换为一个会发射这些对象的Observable" class="headerlink" title="Just — 将对象或者对象集合转换为一个会发射这些对象的Observable"></a>Just — 将对象或者对象集合转换为一个会发射这些对象的Observable</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line">Observable.just(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>).subscribe(<span class="keyword">new</span> Subscriber&lt;Integer&gt;() &#123;</div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onCompleted</span><span class="params">()</span> </span>&#123;</div><div class="line">        System.out.println(<span class="string">"Sequence complete."</span>);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onError</span><span class="params">(Throwable error)</span> </span>&#123;</div><div class="line">        System.err.println(<span class="string">"Error: "</span> + error.getMessage());</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onNext</span><span class="params">(Integer integer)</span> </span>&#123;</div><div class="line">        System.out.println(<span class="string">"Next: "</span> + integer);</div><div class="line">    &#125;</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<p>输出<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">Next: 1</div><div class="line">Next: 2</div><div class="line">Next: 3</div><div class="line">Sequence complete.</div></pre></td></tr></table></figure></p>
<h5 id="Defer-—-在观察者订阅之前不创建这个Observable，为每一个观察者创建一个新的Observable"><a href="#Defer-—-在观察者订阅之前不创建这个Observable，为每一个观察者创建一个新的Observable" class="headerlink" title="Defer — 在观察者订阅之前不创建这个Observable，为每一个观察者创建一个新的Observable"></a>Defer — 在观察者订阅之前不创建这个Observable，为每一个观察者创建一个新的Observable</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">static</span> String i = <span class="string">"旧数据"</span>;</div><div class="line">Observable&lt;String&gt; observable = Observable.defer(<span class="keyword">new</span> Func0&lt;Observable&lt;String&gt;&gt;() &#123;</div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> Observable&lt;String&gt; <span class="title">call</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> Observable.just(i);</div><div class="line">    &#125;</div><div class="line">&#125;);</div><div class="line">Subscriber subscriber=<span class="keyword">new</span> Subscriber() &#123;</div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onCompleted</span><span class="params">()</span> </span>&#123;</div><div class="line">        System.out.println(<span class="string">"Sequence complete."</span>);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onError</span><span class="params">(Throwable error)</span> </span>&#123;</div><div class="line">        System.err.println(<span class="string">"Error: "</span> + error.getMessage());</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onNext</span><span class="params">(Object o)</span> </span>&#123;</div><div class="line">        System.out.println(<span class="string">"Next: "</span> + o.toString());</div><div class="line">    &#125;</div><div class="line">&#125;;</div><div class="line">i = <span class="string">"新数据"</span>;</div><div class="line">observable.subscribe(subscriber);</div></pre></td></tr></table></figure>
<p>输出<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">Next: 新数据</div><div class="line">Sequence complete.</div></pre></td></tr></table></figure></p>
<h5 id="Empty-Never-Throw-—-创建行为受限的特殊Observable"><a href="#Empty-Never-Throw-—-创建行为受限的特殊Observable" class="headerlink" title="Empty/Never/Throw — 创建行为受限的特殊Observable"></a>Empty/Never/Throw — 创建行为受限的特殊Observable</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line">Empty</div><div class="line">创建一个不发射任何数据但是正常终止的Observable</div><div class="line"></div><div class="line">Never</div><div class="line">创建一个不发射数据也不终止的Observable</div><div class="line"></div><div class="line">Throw</div><div class="line">创建一个不发射数据以一个错误终止的Observable</div><div class="line"></div><div class="line">Observable.empty().subscribe(<span class="keyword">new</span> Subscriber() &#123;</div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onCompleted</span><span class="params">()</span> </span>&#123;</div><div class="line">        System.out.println(<span class="string">"Sequence complete."</span>);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onError</span><span class="params">(Throwable e)</span> </span>&#123;</div><div class="line">        System.out.println(<span class="string">"error:"</span> + e.getMessage());</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onNext</span><span class="params">(Object i)</span> </span>&#123;</div><div class="line">        System.out.println(<span class="string">"Next:"</span> + i.toString());</div><div class="line">    &#125;</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<p>输出<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">Sequence complete.</div></pre></td></tr></table></figure></p>
<h5 id="Timer-—-创建在一个指定的延迟之后发射单个数据的Observable"><a href="#Timer-—-创建在一个指定的延迟之后发射单个数据的Observable" class="headerlink" title="Timer — 创建在一个指定的延迟之后发射单个数据的Observable"></a>Timer — 创建在一个指定的延迟之后发射单个数据的Observable</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line">Observable.timer(<span class="number">3</span>, TimeUnit.SECONDS).subscribe(<span class="keyword">new</span> Subscriber&lt;Long&gt;() &#123;</div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onCompleted</span><span class="params">()</span> </span>&#123;</div><div class="line">        System.out.println(<span class="string">"Sequence complete."</span>);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onError</span><span class="params">(Throwable e)</span> </span>&#123;</div><div class="line">        System.out.println(<span class="string">"error:"</span> + e.getMessage());</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onNext</span><span class="params">(Long aLong)</span> </span>&#123;</div><div class="line">        System.out.println(<span class="string">"Next:"</span> + aLong.toString());</div><div class="line">    &#125;</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<p>输出<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">I/System.out: Next:0</div><div class="line">I/System.out: Sequence complete.</div></pre></td></tr></table></figure></p>
<h5 id="Interval-—-创建一个定时发射整数序列的Observable"><a href="#Interval-—-创建一个定时发射整数序列的Observable" class="headerlink" title="Interval — 创建一个定时发射整数序列的Observable"></a>Interval — 创建一个定时发射整数序列的Observable</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line">Observable.interval(<span class="number">3</span>, TimeUnit.SECONDS).subscribe(<span class="keyword">new</span> Subscriber&lt;Long&gt;() &#123;</div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onCompleted</span><span class="params">()</span> </span>&#123;</div><div class="line">        System.out.println(<span class="string">"Sequence complete."</span>);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onError</span><span class="params">(Throwable e)</span> </span>&#123;</div><div class="line">        System.out.println(<span class="string">"error:"</span> + e.getMessage());</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onNext</span><span class="params">(Long aLong)</span> </span>&#123;</div><div class="line">        System.out.println(<span class="string">"Next:"</span> + aLong.toString());</div><div class="line">    &#125;</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<p>输出<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">I/System.out: Next:0</div><div class="line">I/System.out: Next:1</div><div class="line">I/System.out: Next:2</div><div class="line">I/System.out: Next:3</div><div class="line">I/System.out: Next:4</div><div class="line">I/System.out: Next:5</div><div class="line">I/System.out: Next:6</div><div class="line">I/System.out: Next:7</div><div class="line">...</div></pre></td></tr></table></figure></p>
<h5 id="Range-—-创建发射指定范围的整数序列的Observable"><a href="#Range-—-创建发射指定范围的整数序列的Observable" class="headerlink" title="Range — 创建发射指定范围的整数序列的Observable"></a>Range — 创建发射指定范围的整数序列的Observable</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line">Observable.range(<span class="number">3</span>, <span class="number">8</span>).subscribe(<span class="keyword">new</span> Subscriber&lt;Integer&gt;() &#123;</div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onCompleted</span><span class="params">()</span> </span>&#123;</div><div class="line">        System.out.println(<span class="string">"Sequence complete."</span>);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onError</span><span class="params">(Throwable e)</span> </span>&#123;</div><div class="line">        System.out.println(<span class="string">"error:"</span> + e.getMessage());</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onNext</span><span class="params">(Integer integer)</span> </span>&#123;</div><div class="line">        System.out.println(<span class="string">"Next:"</span> + integer.toString());</div><div class="line">    &#125;</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<p>输出<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">Next:3</div><div class="line">Next:4</div><div class="line">Next:5</div><div class="line">Next:6</div><div class="line">Next:7</div><div class="line">Next:8</div><div class="line">Next:9</div><div class="line">Next:10</div><div class="line">Sequence complete.</div></pre></td></tr></table></figure></p>
<h5 id="Repeat-—-创建重复发射特定的数据或数据序列的Observable"><a href="#Repeat-—-创建重复发射特定的数据或数据序列的Observable" class="headerlink" title="Repeat — 创建重复发射特定的数据或数据序列的Observable"></a>Repeat — 创建重复发射特定的数据或数据序列的Observable</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line">Observable.range(<span class="number">3</span>, <span class="number">3</span>).repeat(<span class="number">2</span>).subscribe(<span class="keyword">new</span> Subscriber&lt;Integer&gt;() &#123;</div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onCompleted</span><span class="params">()</span> </span>&#123;</div><div class="line">        System.out.println(<span class="string">"Sequence complete."</span>);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onError</span><span class="params">(Throwable e)</span> </span>&#123;</div><div class="line">        System.out.println(<span class="string">"error:"</span> + e.getMessage());</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onNext</span><span class="params">(Integer i)</span> </span>&#123;</div><div class="line">        System.out.println(<span class="string">"Next:"</span> + i.toString());</div><div class="line">    &#125;</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<p>输出<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">Next:3</div><div class="line">Next:4</div><div class="line">Next:5</div><div class="line">Next:3</div><div class="line">Next:4</div><div class="line">Next:5</div><div class="line">Sequence complete.</div></pre></td></tr></table></figure></p>
<h4 id="变换操作"><a href="#变换操作" class="headerlink" title="变换操作"></a>变换操作</h4><h5 id="Map-—-映射，通过对序列的每一项都应用一个函数变换Observable发射的数据，实质是对序列中的每一项执行一个函数，函数的参数就是这个数据项"><a href="#Map-—-映射，通过对序列的每一项都应用一个函数变换Observable发射的数据，实质是对序列中的每一项执行一个函数，函数的参数就是这个数据项" class="headerlink" title="Map — 映射，通过对序列的每一项都应用一个函数变换Observable发射的数据，实质是对序列中的每一项执行一个函数，函数的参数就是这个数据项"></a>Map — 映射，通过对序列的每一项都应用一个函数变换Observable发射的数据，实质是对序列中的每一项执行一个函数，函数的参数就是这个数据项</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line">Integer[] integers = &#123;<span class="number">0</span>, <span class="number">9</span>, <span class="number">6</span>, <span class="number">4</span>, <span class="number">8</span>&#125;;</div><div class="line">Observable.from(integers).map(<span class="keyword">new</span> Func1&lt;Integer, Boolean&gt;() &#123;</div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> Boolean <span class="title">call</span><span class="params">(Integer integer)</span> </span>&#123;</div><div class="line">        System.out.println(<span class="string">"call: "</span>+integer);</div><div class="line">        <span class="keyword">return</span> (integer &gt; <span class="number">5</span>);</div><div class="line">    &#125;</div><div class="line">&#125;).subscribe(<span class="keyword">new</span> Subscriber&lt;Boolean&gt;() &#123;</div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onCompleted</span><span class="params">()</span> </span>&#123;</div><div class="line">        System.out.println(<span class="string">"Sequence complete."</span>);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onError</span><span class="params">(Throwable e)</span> </span>&#123;</div><div class="line">        System.out.println(<span class="string">"error:"</span> + e.getMessage());</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onNext</span><span class="params">(Boolean b)</span> </span>&#123;</div><div class="line">        System.out.println(<span class="string">"Next:"</span> + b.toString());</div><div class="line">    &#125;</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<p>输出<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">call: 0</div><div class="line">Next:false</div><div class="line">call: 9</div><div class="line">Next:true</div><div class="line">call: 6</div><div class="line">Next:true</div><div class="line">call: 4</div><div class="line">Next:false</div><div class="line">call: 8</div><div class="line">Next:true</div><div class="line">Sequence complete.</div></pre></td></tr></table></figure></p>
<h5 id="Cast-—-强制类型转换-通过对序列的每一项都强制类型变换Observable发射的数据"><a href="#Cast-—-强制类型转换-通过对序列的每一项都强制类型变换Observable发射的数据" class="headerlink" title="Cast — 强制类型转换,通过对序列的每一项都强制类型变换Observable发射的数据"></a>Cast — 强制类型转换,通过对序列的每一项都强制类型变换Observable发射的数据</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line">Integer[] integers = &#123;<span class="number">0</span>, <span class="number">9</span>, <span class="number">6</span>, <span class="number">4</span>, <span class="number">8</span>&#125;;</div><div class="line">Observable.just(integers).cast(String.class).subscribe(<span class="keyword">new</span> Subscriber&lt;String&gt;() &#123;</div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onCompleted</span><span class="params">()</span> </span>&#123;</div><div class="line">        System.out.println(<span class="string">"Sequence complete."</span>);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onError</span><span class="params">(Throwable e)</span> </span>&#123;</div><div class="line">        System.out.println(<span class="string">"error:"</span> + e.getMessage());</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onNext</span><span class="params">(String s)</span> </span>&#123;</div><div class="line">        System.out.println(<span class="string">"Next:"</span> + s);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<p>输出<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">error:Cannot cast [Ljava.lang.Integer; to java.lang.String</div></pre></td></tr></table></figure></p>
<h5 id="FlatMap-—-扁平映射，将Observable发射的数据变换为Observables集合，然后将这些Observable发射的数据平坦化的放进一个单独的Observable，可以认为是一个将嵌套的数据结构展开的过程。"><a href="#FlatMap-—-扁平映射，将Observable发射的数据变换为Observables集合，然后将这些Observable发射的数据平坦化的放进一个单独的Observable，可以认为是一个将嵌套的数据结构展开的过程。" class="headerlink" title="FlatMap — 扁平映射，将Observable发射的数据变换为Observables集合，然后将这些Observable发射的数据平坦化的放进一个单独的Observable，可以认为是一个将嵌套的数据结构展开的过程。"></a>FlatMap — 扁平映射，将Observable发射的数据变换为Observables集合，然后将这些Observable发射的数据平坦化的放进一个单独的Observable，可以认为是一个将嵌套的数据结构展开的过程。</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div></pre></td><td class="code"><pre><div class="line">Integer[] integers = &#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>&#125;;</div><div class="line">Observable.from(integers).flatMap(<span class="keyword">new</span> Func1&lt;Integer, Observable&lt;String&gt;&gt;() &#123;</div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> Observable&lt;String&gt; <span class="title">call</span><span class="params">(<span class="keyword">final</span> Integer integer)</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> Observable.create(<span class="keyword">new</span> Observable.OnSubscribe&lt;String&gt;() &#123;</div><div class="line">            <span class="meta">@Override</span></div><div class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">call</span><span class="params">(Subscriber&lt;? <span class="keyword">super</span> String&gt; subscriber)</span> </span>&#123;</div><div class="line">                System.out.println(<span class="string">"call: FlatMap "</span> + Thread.currentThread().getName());</div><div class="line">                <span class="keyword">try</span> &#123;</div><div class="line">                    Thread.sleep(<span class="number">200</span>);</div><div class="line">                    subscriber.onNext(integer + <span class="number">100</span> + <span class="string">" FlatMap"</span>);</div><div class="line">                    subscriber.onCompleted();</div><div class="line">                &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</div><div class="line">                    e.printStackTrace();</div><div class="line">                    subscriber.onError(e);</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">        &#125;).subscribeOn(Schedulers.newThread());</div><div class="line">    &#125;</div><div class="line">&#125;).observeOn(AndroidSchedulers.mainThread())</div><div class="line">        .subscribe(<span class="keyword">new</span> Subscriber&lt;String&gt;() &#123;</div><div class="line">            <span class="meta">@Override</span></div><div class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onCompleted</span><span class="params">()</span> </span>&#123;</div><div class="line">                System.out.println(<span class="string">"Sequence complete."</span>);</div><div class="line">            &#125;</div><div class="line"></div><div class="line">            <span class="meta">@Override</span></div><div class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onError</span><span class="params">(Throwable e)</span> </span>&#123;</div><div class="line">                System.out.println(<span class="string">"error:"</span> + e.getMessage());</div><div class="line">            &#125;</div><div class="line"></div><div class="line">            <span class="meta">@Override</span></div><div class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onNext</span><span class="params">(String s)</span> </span>&#123;</div><div class="line">                System.out.println(<span class="string">"Next:"</span> + s);</div><div class="line">            &#125;</div><div class="line">        &#125;);</div></pre></td></tr></table></figure>
<p>输出<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">call: FlatMap RxNewThreadScheduler-1</div><div class="line">call: FlatMap RxNewThreadScheduler-2</div><div class="line">call: FlatMap RxNewThreadScheduler-3</div><div class="line">Next:101 FlatMap</div><div class="line">Next:102 FlatMap</div><div class="line">Next:103 FlatMap</div><div class="line">Sequence complete.</div></pre></td></tr></table></figure></p>
<h5 id="ConcatMap-该操作符是类似于最简单版本的flatMap，但是它按次序连接而不是合并那些生成的Observables，然后产生自己的数据序列。"><a href="#ConcatMap-该操作符是类似于最简单版本的flatMap，但是它按次序连接而不是合并那些生成的Observables，然后产生自己的数据序列。" class="headerlink" title="ConcatMap - 该操作符是类似于最简单版本的flatMap，但是它按次序连接而不是合并那些生成的Observables，然后产生自己的数据序列。"></a>ConcatMap - 该操作符是类似于最简单版本的flatMap，但是它按次序连接而不是合并那些生成的Observables，然后产生自己的数据序列。</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div></pre></td><td class="code"><pre><div class="line">Integer[] integers = &#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>&#125;;</div><div class="line">Observable.from(integers).concatMap(<span class="keyword">new</span> Func1&lt;Integer, Observable&lt;String&gt;&gt;() &#123;</div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> Observable&lt;String&gt; <span class="title">call</span><span class="params">(<span class="keyword">final</span> Integer integer)</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> Observable.create(<span class="keyword">new</span> Observable.OnSubscribe&lt;String&gt;() &#123;</div><div class="line">            <span class="meta">@Override</span></div><div class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">call</span><span class="params">(Subscriber&lt;? <span class="keyword">super</span> String&gt; subscriber)</span> </span>&#123;</div><div class="line">                System.out.println(<span class="string">"call: FlatMap "</span> + Thread.currentThread().getName());</div><div class="line">                <span class="keyword">try</span> &#123;</div><div class="line">                    Thread.sleep(<span class="number">200</span>);</div><div class="line">                    subscriber.onNext(integer + <span class="number">100</span> + <span class="string">" FlatMap"</span>);</div><div class="line">                    subscriber.onCompleted();</div><div class="line">                &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</div><div class="line">                    e.printStackTrace();</div><div class="line">                    subscriber.onError(e);</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">        &#125;).subscribeOn(Schedulers.newThread());</div><div class="line">    &#125;</div><div class="line">&#125;).observeOn(AndroidSchedulers.mainThread())</div><div class="line">        .subscribe(<span class="keyword">new</span> Subscriber&lt;String&gt;() &#123;</div><div class="line">            <span class="meta">@Override</span></div><div class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onCompleted</span><span class="params">()</span> </span>&#123;</div><div class="line">                System.out.println(<span class="string">"Sequence complete."</span>);</div><div class="line">            &#125;</div><div class="line"></div><div class="line">            <span class="meta">@Override</span></div><div class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onError</span><span class="params">(Throwable e)</span> </span>&#123;</div><div class="line">                System.out.println(<span class="string">"error:"</span> + e.getMessage());</div><div class="line">            &#125;</div><div class="line"></div><div class="line">            <span class="meta">@Override</span></div><div class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onNext</span><span class="params">(String s)</span> </span>&#123;</div><div class="line">                System.out.println(<span class="string">"Next:"</span> + s);</div><div class="line">            &#125;</div><div class="line">        &#125;);</div></pre></td></tr></table></figure>
<p>输出<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">call: FlatMap RxNewThreadScheduler-1</div><div class="line">call: FlatMap RxNewThreadScheduler-2</div><div class="line">Next:101 FlatMap</div><div class="line">Next:102 FlatMap</div><div class="line">call: FlatMap RxNewThreadScheduler-3</div><div class="line">Next:103 FlatMap</div><div class="line">Sequence complete.</div></pre></td></tr></table></figure></p>
<h5 id="SwitchMap-当原始Observable发射一个新的数据（Observable）时，它将取消订阅并停止监视产生执之前那个数据的Observable，只监视当前这一个。"><a href="#SwitchMap-当原始Observable发射一个新的数据（Observable）时，它将取消订阅并停止监视产生执之前那个数据的Observable，只监视当前这一个。" class="headerlink" title="SwitchMap - 当原始Observable发射一个新的数据（Observable）时，它将取消订阅并停止监视产生执之前那个数据的Observable，只监视当前这一个。"></a>SwitchMap - 当原始Observable发射一个新的数据（Observable）时，它将取消订阅并停止监视产生执之前那个数据的Observable，只监视当前这一个。</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div></pre></td><td class="code"><pre><div class="line">Integer[] integers = &#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>&#125;;</div><div class="line">Observable.from(integers).switchMap(<span class="keyword">new</span> Func1&lt;Integer, Observable&lt;String&gt;&gt;() &#123;</div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> Observable&lt;String&gt; <span class="title">call</span><span class="params">(Integer integer)</span> </span>&#123;</div><div class="line">        System.out.println(<span class="string">"call: SwitchMap "</span> + Thread.currentThread().getName());</div><div class="line">        <span class="comment">// 如果不通过subscribeOn(Schedulers.newThread())在在子线程模拟并发操作，所有数据源依然会全部输出,也就是并发操作此操作符才有作用</span></div><div class="line">        <span class="comment">// 若在此通过Thread。sleep（）设置等待时间，则输出信息会不一样。相当于模拟并发程度</span></div><div class="line">        <span class="keyword">return</span> Observable.just((integer + <span class="number">100</span>) + <span class="string">"SwitchMap"</span>)</div><div class="line">        .subscribeOn(Schedulers.newThread());</div><div class="line">&#125;</div><div class="line">&#125;).observeOn(AndroidSchedulers.mainThread()).subscribe(<span class="keyword">new</span> Subscriber&lt;String&gt;() &#123;</div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onCompleted</span><span class="params">()</span> </span>&#123;</div><div class="line">        System.out.println(<span class="string">"Sequence complete."</span>);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onError</span><span class="params">(Throwable e)</span> </span>&#123;</div><div class="line">        System.out.println(<span class="string">"error:"</span> + e.getMessage());</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onNext</span><span class="params">(String s)</span> </span>&#123;</div><div class="line">        System.out.println(<span class="string">"Next:"</span> + s);</div><div class="line">    &#125;</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<p>输出<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">call: SwitchMap main</div><div class="line">call: SwitchMap main</div><div class="line">call: SwitchMap main</div><div class="line">Next:103SwitchMap</div><div class="line">Sequence complete.</div></pre></td></tr></table></figure></p>
<h5 id="GroupBy-将原始Observable分拆为一些Observables集合，它们中的每一个发射原始Observable数据序列的一个子序列。哪个数据项由哪一个Observable发射是由一个函数判定的，这个函数给每一项指定一个Key，Key相同的数据会被同一个Observable发射。"><a href="#GroupBy-将原始Observable分拆为一些Observables集合，它们中的每一个发射原始Observable数据序列的一个子序列。哪个数据项由哪一个Observable发射是由一个函数判定的，这个函数给每一项指定一个Key，Key相同的数据会被同一个Observable发射。" class="headerlink" title="GroupBy - 将原始Observable分拆为一些Observables集合，它们中的每一个发射原始Observable数据序列的一个子序列。哪个数据项由哪一个Observable发射是由一个函数判定的，这个函数给每一项指定一个Key，Key相同的数据会被同一个Observable发射。"></a>GroupBy - 将原始Observable分拆为一些Observables集合，它们中的每一个发射原始Observable数据序列的一个子序列。哪个数据项由哪一个Observable发射是由一个函数判定的，这个函数给每一项指定一个Key，Key相同的数据会被同一个Observable发射。</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div></pre></td><td class="code"><pre><div class="line">Observable.range(<span class="number">1</span>, <span class="number">10</span>).groupBy(<span class="keyword">new</span> Func1&lt;Integer, Boolean&gt;() &#123;</div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> Boolean <span class="title">call</span><span class="params">(Integer integer)</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> integer % <span class="number">2</span> == <span class="number">0</span>;</div><div class="line">    &#125;</div><div class="line">&#125;).subscribe(<span class="keyword">new</span> Subscriber&lt;GroupedObservable&lt;Boolean, Integer&gt;&gt;() &#123;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onCompleted</span><span class="params">()</span> </span>&#123;</div><div class="line">        System.out.println(<span class="string">"Sequence complete.1"</span>);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onError</span><span class="params">(Throwable e)</span> </span>&#123;</div><div class="line">        System.out.println(<span class="string">"error:1"</span> + e.getMessage());</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onNext</span><span class="params">(GroupedObservable&lt;Boolean, Integer&gt; booleanIntegerGroupedObservable)</span> </span>&#123;</div><div class="line">        booleanIntegerGroupedObservable.toList().subscribe(<span class="keyword">new</span> Subscriber&lt;List&lt;Integer&gt;&gt;() &#123;</div><div class="line">            <span class="meta">@Override</span></div><div class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onCompleted</span><span class="params">()</span> </span>&#123;</div><div class="line">                System.out.println(<span class="string">"Sequence complete.2"</span>);</div><div class="line">            &#125;</div><div class="line"></div><div class="line">            <span class="meta">@Override</span></div><div class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onError</span><span class="params">(Throwable e)</span> </span>&#123;</div><div class="line">                System.out.println(<span class="string">"error:2"</span> + e.getMessage());</div><div class="line">            &#125;</div><div class="line"></div><div class="line">            <span class="meta">@Override</span></div><div class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onNext</span><span class="params">(List&lt;Integer&gt; integers)</span> </span>&#123;</div><div class="line">                System.out.println(<span class="string">"onNext:2"</span> + integers);</div><div class="line">            &#125;</div><div class="line">        &#125;);</div><div class="line">    &#125;</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<p>输出<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">onNext:2[1, 3, 5, 7, 9]</div><div class="line">Sequence complete.2</div><div class="line">onNext:2[2, 4, 6, 8, 10]</div><div class="line">Sequence complete.2</div><div class="line">Sequence complete.1</div></pre></td></tr></table></figure></p>
<h5 id="Scan-操作符对原始Observable发射的第一项数据应用一个函数，然后将那个函数的结果作为自己的第一项数据发射。它将函数的结果同第二项数据一起填充给这个函数来产生它自己的第二项数据。它持续进行这个过程来产生剩余的数据序列。"><a href="#Scan-操作符对原始Observable发射的第一项数据应用一个函数，然后将那个函数的结果作为自己的第一项数据发射。它将函数的结果同第二项数据一起填充给这个函数来产生它自己的第二项数据。它持续进行这个过程来产生剩余的数据序列。" class="headerlink" title="Scan - 操作符对原始Observable发射的第一项数据应用一个函数，然后将那个函数的结果作为自己的第一项数据发射。它将函数的结果同第二项数据一起填充给这个函数来产生它自己的第二项数据。它持续进行这个过程来产生剩余的数据序列。"></a>Scan - 操作符对原始Observable发射的第一项数据应用一个函数，然后将那个函数的结果作为自己的第一项数据发射。它将函数的结果同第二项数据一起填充给这个函数来产生它自己的第二项数据。它持续进行这个过程来产生剩余的数据序列。</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line">Observable.range(<span class="number">1</span>, <span class="number">4</span>).scan(<span class="keyword">new</span> Func2&lt;Integer, Integer, Integer&gt;() &#123;</div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> Integer <span class="title">call</span><span class="params">(Integer integer, Integer integer2)</span> </span>&#123;</div><div class="line">        System.out.println(<span class="string">"call: integer:"</span>+integer+<span class="string">"  integer2 "</span>+integer2);</div><div class="line">        <span class="keyword">return</span> integer+integer2;</div><div class="line">    &#125;</div><div class="line">&#125;).subscribe(<span class="keyword">new</span> Subscriber&lt;Integer&gt;() &#123;</div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onCompleted</span><span class="params">()</span> </span>&#123;</div><div class="line">        System.out.println(<span class="string">"Sequence complete."</span>);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onError</span><span class="params">(Throwable e)</span> </span>&#123;</div><div class="line">        System.out.println(<span class="string">"error:"</span> + e.getMessage());</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onNext</span><span class="params">(Integer integer)</span> </span>&#123;</div><div class="line">        System.out.println(<span class="string">"onNext:"</span> + integer);</div><div class="line">    &#125;</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<p>输出<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">onNext:1</div><div class="line">call: integer:1  integer2 2</div><div class="line">onNext:3</div><div class="line">call: integer:3  integer2 3</div><div class="line">onNext:6</div><div class="line">call: integer:6  integer2 4</div><div class="line">onNext:10</div><div class="line">Sequence complete.</div></pre></td></tr></table></figure></p>
<h5 id="Buffer-将一个Observable变换为另一个，原来的Observable正常发射数据，变换产生的Observable发射这些数据的缓存集合，如果原来的Observable发射了一个onError通知，Buffer会立即传递这个通知，而不是首先发射缓存的数据，即使在这之前缓存中包含了原始Observable发射的数据。"><a href="#Buffer-将一个Observable变换为另一个，原来的Observable正常发射数据，变换产生的Observable发射这些数据的缓存集合，如果原来的Observable发射了一个onError通知，Buffer会立即传递这个通知，而不是首先发射缓存的数据，即使在这之前缓存中包含了原始Observable发射的数据。" class="headerlink" title="Buffer - 将一个Observable变换为另一个，原来的Observable正常发射数据，变换产生的Observable发射这些数据的缓存集合，如果原来的Observable发射了一个onError通知，Buffer会立即传递这个通知，而不是首先发射缓存的数据，即使在这之前缓存中包含了原始Observable发射的数据。"></a>Buffer - 将一个Observable变换为另一个，原来的Observable正常发射数据，变换产生的Observable发射这些数据的缓存集合，如果原来的Observable发射了一个onError通知，Buffer会立即传递这个通知，而不是首先发射缓存的数据，即使在这之前缓存中包含了原始Observable发射的数据。</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line">Observable.range(<span class="number">10</span>, <span class="number">6</span>).buffer(<span class="number">2</span>).subscribe(<span class="keyword">new</span> Subscriber&lt;List&lt;Integer&gt;&gt;() &#123;</div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onCompleted</span><span class="params">()</span> </span>&#123;</div><div class="line">        System.out.println(<span class="string">"Sequence complete.2"</span>);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onError</span><span class="params">(Throwable e)</span> </span>&#123;</div><div class="line">        System.out.println(<span class="string">"error:2"</span> + e.getMessage());</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onNext</span><span class="params">(List&lt;Integer&gt; integers)</span> </span>&#123;</div><div class="line">        System.out.println(<span class="string">"onNext:2"</span> + integers);</div><div class="line">    &#125;</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<p>输出<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">onNext:[10, 11]</div><div class="line">onNext:[12, 13]</div><div class="line">onNext:[14, 15]</div><div class="line">Sequence complete.</div></pre></td></tr></table></figure></p>
<h5 id="Window-Window和Buffer类似，但不是发射来自原始Observable的数据包，它发射的是Observables，这些Observables中的每一个都发射原始Observable数据的一个子集，最后发射一个onCompleted通知。"><a href="#Window-Window和Buffer类似，但不是发射来自原始Observable的数据包，它发射的是Observables，这些Observables中的每一个都发射原始Observable数据的一个子集，最后发射一个onCompleted通知。" class="headerlink" title="Window - Window和Buffer类似，但不是发射来自原始Observable的数据包，它发射的是Observables，这些Observables中的每一个都发射原始Observable数据的一个子集，最后发射一个onCompleted通知。"></a>Window - Window和Buffer类似，但不是发射来自原始Observable的数据包，它发射的是Observables，这些Observables中的每一个都发射原始Observable数据的一个子集，最后发射一个onCompleted通知。</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div></pre></td><td class="code"><pre><div class="line">Observable.range(<span class="number">10</span>, <span class="number">6</span>).window(<span class="number">2</span>).subscribe(<span class="keyword">new</span> Subscriber&lt;Observable&lt;Integer&gt;&gt;() &#123;</div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onCompleted</span><span class="params">()</span> </span>&#123;</div><div class="line">        System.out.println(<span class="string">"Sequence complete.1 "</span>);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onError</span><span class="params">(Throwable e)</span> </span>&#123;</div><div class="line">        System.out.println(<span class="string">"error:1 "</span> + e.getMessage());</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onNext</span><span class="params">(Observable&lt;Integer&gt; integerObservable)</span> </span>&#123;</div><div class="line">        System.out.println(<span class="string">"onNext:1 "</span>);</div><div class="line">        integerObservable.subscribe(<span class="keyword">new</span> Subscriber&lt;Integer&gt;() &#123;</div><div class="line">            <span class="meta">@Override</span></div><div class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onCompleted</span><span class="params">()</span> </span>&#123;</div><div class="line">                System.out.println(<span class="string">"Sequence complete.2 "</span>);</div><div class="line">            &#125;</div><div class="line"></div><div class="line">            <span class="meta">@Override</span></div><div class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onError</span><span class="params">(Throwable e)</span> </span>&#123;</div><div class="line">                System.out.println(<span class="string">"error:2 "</span> + e.getMessage());</div><div class="line">            &#125;</div><div class="line"></div><div class="line">            <span class="meta">@Override</span></div><div class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onNext</span><span class="params">(Integer integer)</span> </span>&#123;</div><div class="line">                System.out.println(<span class="string">"onNext:2 "</span> + integer);</div><div class="line">            &#125;</div><div class="line">        &#125;);</div><div class="line">    &#125;</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<p>输出<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">onNext:1 </div><div class="line">onNext:2 10</div><div class="line">onNext:2 11</div><div class="line">Sequence complete.2 </div><div class="line">onNext:1 </div><div class="line">onNext:2 12</div><div class="line">onNext:2 13</div><div class="line">Sequence complete.2 </div><div class="line">onNext:1 </div><div class="line">onNext:2 14</div><div class="line">onNext:2 15</div><div class="line">Sequence complete.2 </div><div class="line">Sequence complete.1</div></pre></td></tr></table></figure></p>
<h4 id="过滤操作"><a href="#过滤操作" class="headerlink" title="过滤操作"></a>过滤操作</h4><h5 id="Filter-接收一个Func1参数，我们可以在其中通过运用你自己的判断条件去判断我们要过滤的数据，当数据通过判断条件后返回true表示发射该项数据，否则就不发射，这样就过滤出了我们想要的数据。"><a href="#Filter-接收一个Func1参数，我们可以在其中通过运用你自己的判断条件去判断我们要过滤的数据，当数据通过判断条件后返回true表示发射该项数据，否则就不发射，这样就过滤出了我们想要的数据。" class="headerlink" title="Filter - 接收一个Func1参数，我们可以在其中通过运用你自己的判断条件去判断我们要过滤的数据，当数据通过判断条件后返回true表示发射该项数据，否则就不发射，这样就过滤出了我们想要的数据。"></a>Filter - 接收一个Func1参数，我们可以在其中通过运用你自己的判断条件去判断我们要过滤的数据，当数据通过判断条件后返回true表示发射该项数据，否则就不发射，这样就过滤出了我们想要的数据。</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line">Integer[] ints = &#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>&#125;;</div><div class="line">Observable&lt;Integer&gt; observable = Observable.from(ints).filter(<span class="keyword">new</span> Func1&lt;Integer, Boolean&gt;() &#123;</div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> Boolean <span class="title">call</span><span class="params">(Integer integer)</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> integer % <span class="number">2</span> != <span class="number">0</span>;<span class="comment">// 返回true，就不会过滤掉，会发射数据，过滤掉返回false的值</span></div><div class="line">    &#125;</div><div class="line">&#125;);</div><div class="line">observable.subscribe(<span class="keyword">new</span> Subscriber&lt;Integer&gt;() &#123;</div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onCompleted</span><span class="params">()</span> </span>&#123;</div><div class="line">        System.out.println(<span class="string">"Sequence complete."</span>);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onError</span><span class="params">(Throwable e)</span> </span>&#123;</div><div class="line">        System.out.println(<span class="string">"error:"</span> + e.getMessage());</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onNext</span><span class="params">(Integer integer)</span> </span>&#123;</div><div class="line">        System.out.println(<span class="string">"onNext:"</span> + integer);</div><div class="line">    &#125;</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<p>输出<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">onNext:1</div><div class="line">onNext:3</div><div class="line">onNext:5</div><div class="line">onNext:7</div><div class="line">onNext:9</div><div class="line">Sequence complete.</div></pre></td></tr></table></figure></p>
<h5 id="ofType-过滤一个Observable只返回指定类型的数据"><a href="#ofType-过滤一个Observable只返回指定类型的数据" class="headerlink" title="ofType - 过滤一个Observable只返回指定类型的数据"></a>ofType - 过滤一个Observable只返回指定类型的数据</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line">Observable.just(<span class="number">0x68</span>, <span class="string">"Jinlin"</span>, <span class="number">6</span>, <span class="number">33</span>, <span class="string">"5upport"</span>, <span class="number">8</span>, <span class="string">"asdfasf"</span>, <span class="number">1</span>, <span class="string">"four"</span>, <span class="number">0</span>)</div><div class="line">.ofType(String.class)</div><div class="line">.subscribe(<span class="keyword">new</span> Subscriber&lt;String&gt;() &#123;</div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onCompleted</span><span class="params">()</span> </span>&#123;</div><div class="line">        System.out.println(<span class="string">"Sequence complete."</span>);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onError</span><span class="params">(Throwable e)</span> </span>&#123;</div><div class="line">        System.out.println(<span class="string">"error:"</span> + e.getMessage());</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onNext</span><span class="params">(String s)</span> </span>&#123;</div><div class="line">        System.out.println(<span class="string">"Next:"</span> + s);</div><div class="line">    &#125;</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<p>输出<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">Next:Jinlin</div><div class="line">Next:5upport</div><div class="line">Next:asdfasf</div><div class="line">Next:four</div><div class="line">Sequence complete.</div></pre></td></tr></table></figure></p>
<h5 id="First-如果我们只对Observable发射的第一项数据，或者满足某个条件的第一项数据感兴趣，则可以使用First操作符。"><a href="#First-如果我们只对Observable发射的第一项数据，或者满足某个条件的第一项数据感兴趣，则可以使用First操作符。" class="headerlink" title="First - 如果我们只对Observable发射的第一项数据，或者满足某个条件的第一项数据感兴趣，则可以使用First操作符。"></a>First - 如果我们只对Observable发射的第一项数据，或者满足某个条件的第一项数据感兴趣，则可以使用First操作符。</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div></pre></td><td class="code"><pre><div class="line">Observable.just(<span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>).first(<span class="keyword">new</span> Func1&lt;Integer, Boolean&gt;() &#123;</div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> Boolean <span class="title">call</span><span class="params">(Integer integer)</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> integer &gt; <span class="number">2</span>;</div><div class="line">    &#125;</div><div class="line">&#125;).subscribe(<span class="keyword">new</span> Subscriber&lt;Integer&gt;() &#123;</div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onCompleted</span><span class="params">()</span> </span>&#123;</div><div class="line">        System.out.println(<span class="string">"Sequence complete."</span>);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onError</span><span class="params">(Throwable e)</span> </span>&#123;</div><div class="line">        System.out.println(<span class="string">"error:"</span> + e.getMessage());</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onNext</span><span class="params">(Integer integer)</span> </span>&#123;</div><div class="line">        System.out.println(<span class="string">"onNext:"</span> + integer);</div><div class="line">    &#125;</div><div class="line">&#125;);</div><div class="line"></div><div class="line">变形</div><div class="line">Observable.just(<span class="number">11</span>,<span class="number">12</span>,<span class="number">13</span>).firstOrDefault(<span class="number">10</span>).subscribe(<span class="keyword">new</span> Action1&lt;Integer&gt;() &#123;</div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">call</span><span class="params">(Integer integer)</span> </span>&#123;</div><div class="line">         System.out.println(<span class="string">"call:"</span> + integer);</div><div class="line">    &#125;</div><div class="line">&#125;);</div><div class="line"></div><div class="line">Observable.just(<span class="number">10</span>，<span class="number">13</span>, <span class="number">16</span>).firstOrDefault(<span class="number">15</span>, <span class="keyword">new</span> Func1&lt;Integer, Boolean&gt;() &#123;</div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> Boolean <span class="title">call</span><span class="params">(Integer integer)</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> integer &gt; <span class="number">20</span>;</div><div class="line">    &#125;</div><div class="line">&#125;).subscribe(<span class="keyword">new</span> Action1&lt;Integer&gt;() &#123;</div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">call</span><span class="params">(Integer integer)</span> </span>&#123;</div><div class="line">        System.out.println(<span class="string">"call:"</span> + integer);</div><div class="line">    &#125;</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<p>输出<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">onNext:3</div><div class="line">Sequence complete.</div></pre></td></tr></table></figure></p>
<h5 id="takeFirst-该操作符与first操作符的区别就是如果原始Observable没有发射任何满足条件的数据，first会抛出一个NoSuchElementException直接执行onError-，而takeFist会返回一个空的Observable（不调用onNext-但是会调用onCompleted）"><a href="#takeFirst-该操作符与first操作符的区别就是如果原始Observable没有发射任何满足条件的数据，first会抛出一个NoSuchElementException直接执行onError-，而takeFist会返回一个空的Observable（不调用onNext-但是会调用onCompleted）" class="headerlink" title="takeFirst - 该操作符与first操作符的区别就是如果原始Observable没有发射任何满足条件的数据，first会抛出一个NoSuchElementException直接执行onError()，而takeFist会返回一个空的Observable（不调用onNext()但是会调用onCompleted）"></a>takeFirst - 该操作符与first操作符的区别就是如果原始Observable没有发射任何满足条件的数据，first会抛出一个NoSuchElementException直接执行onError()，而takeFist会返回一个空的Observable（不调用onNext()但是会调用onCompleted）</h5><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div></pre></td><td class="code"><pre><div class="line">#### first</div><div class="line">Observable.just(10, 11).filter(new Func1&lt;Integer, Boolean&gt;() &#123;</div><div class="line">    @Override</div><div class="line">    public Boolean call(Integer integer) &#123;</div><div class="line">        return integer &gt; 20;</div><div class="line">    &#125;</div><div class="line">&#125;).first().subscribe(new Subscriber&lt;Integer&gt;() &#123;</div><div class="line">    @Override</div><div class="line">    public void onCompleted() &#123;</div><div class="line">        System.out.println("Sequence complete.");</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    @Override</div><div class="line">    public void onError(Throwable e) &#123;</div><div class="line">        System.out.println("error:" + e.getMessage());</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    @Override</div><div class="line">    public void onNext(Integer integer) &#123;</div><div class="line">        System.out.println("onNext:" + integer);</div><div class="line">    &#125;</div><div class="line">&#125;);</div><div class="line"></div><div class="line">#### takeFirst</div><div class="line">Observable.just(10, 11).takeFirst(new Func1&lt;Integer, Boolean&gt;() &#123;</div><div class="line">    @Override</div><div class="line">    public Boolean call(Integer integer) &#123;</div><div class="line">        return integer &gt; 20;</div><div class="line">    &#125;</div><div class="line">&#125;).subscribe(new Subscriber&lt;Integer&gt;() &#123;</div><div class="line">    @Override</div><div class="line">    public void onCompleted() &#123;</div><div class="line">        System.out.println("Sequence complete.");</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    @Override</div><div class="line">    public void onError(Throwable e) &#123;</div><div class="line">        System.out.println("error:" + e.getMessage());</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    @Override</div><div class="line">    public void onNext(Integer integer) &#123;</div><div class="line">        System.out.println("onNext:" + integer);</div><div class="line">    &#125;</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<p>输出<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">#### first</div><div class="line">error:Sequence contains no elements</div><div class="line"></div><div class="line">#### takeFirst</div><div class="line">Sequence complete.</div></pre></td></tr></table></figure></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;　　&lt;strong&gt; 概述：&lt;/strong&gt;通过代码介绍RxJava中的操作符，以及操作符的使用。&lt;br&gt;
    
    </summary>
    
      <category term="RxJava" scheme="http://daijinlin.com/categories/RxJava/"/>
    
    
      <category term="操作符" scheme="http://daijinlin.com/tags/%E6%93%8D%E4%BD%9C%E7%AC%A6/"/>
    
  </entry>
  
  <entry>
    <title>Android热修复探究—美团Robust</title>
    <link href="http://daijinlin.com/2016/04/04/Android-hotfix-4/"/>
    <id>http://daijinlin.com/2016/04/04/Android-hotfix-4/</id>
    <published>2016-04-03T16:04:00.000Z</published>
    <updated>2017-04-05T09:12:48.035Z</updated>
    
    <content type="html"><![CDATA[<p>　　<strong> 概述：</strong><br><a id="more"></a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;　　&lt;strong&gt; 概述：&lt;/strong&gt;&lt;br&gt;
    
    </summary>
    
      <category term="热修复" scheme="http://daijinlin.com/categories/%E7%83%AD%E4%BF%AE%E5%A4%8D/"/>
    
    
  </entry>
  
  <entry>
    <title>Android热修复探究—手机QQ方案</title>
    <link href="http://daijinlin.com/2016/04/03/Android-hotfix-2/"/>
    <id>http://daijinlin.com/2016/04/03/Android-hotfix-2/</id>
    <published>2016-04-02T16:03:00.000Z</published>
    <updated>2017-04-05T09:12:48.034Z</updated>
    
    <content type="html"><![CDATA[<p>　　<strong> 概述：</strong><br><a id="more"></a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;　　&lt;strong&gt; 概述：&lt;/strong&gt;&lt;br&gt;
    
    </summary>
    
      <category term="热修复" scheme="http://daijinlin.com/categories/%E7%83%AD%E4%BF%AE%E5%A4%8D/"/>
    
    
  </entry>
  
  <entry>
    <title>Android热修复探究—微信Tinker</title>
    <link href="http://daijinlin.com/2016/04/03/Android-hotfix-3/"/>
    <id>http://daijinlin.com/2016/04/03/Android-hotfix-3/</id>
    <published>2016-04-02T16:03:00.000Z</published>
    <updated>2017-04-05T09:12:48.035Z</updated>
    
    <content type="html"><![CDATA[<p>　　<strong> 概述：</strong><br><a id="more"></a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;　　&lt;strong&gt; 概述：&lt;/strong&gt;&lt;br&gt;
    
    </summary>
    
      <category term="热修复" scheme="http://daijinlin.com/categories/%E7%83%AD%E4%BF%AE%E5%A4%8D/"/>
    
    
  </entry>
  
  <entry>
    <title>Android热修复探究—Q空间方案</title>
    <link href="http://daijinlin.com/2016/04/02/Android-hotfix-1/"/>
    <id>http://daijinlin.com/2016/04/02/Android-hotfix-1/</id>
    <published>2016-04-01T16:01:00.000Z</published>
    <updated>2017-04-05T09:12:48.034Z</updated>
    
    <content type="html"><![CDATA[<p>　　<strong> 概述：</strong>传统的app开发模式下，线上出现bug，必须通过发布新版本，用户手动更新后才能修复线上bug。那么是否存在一种方案可以在不发版的前提下修复线上bug？有！而且不只一种。今天首先来看下腾讯的QQ空间补丁方案<br><a id="more"></a><br>传统的app开发模式下，线上出现bug，必须通过发布新版本，用户手动更新后才能修复线上bug。随着app的业务越来越复杂，代码量爆发式增长，出现bug的机率也随之上升。如果单纯靠发版修复线上bug，其较长的新版覆盖期无疑会对业务造成巨大的伤害，更不要说大型app开发通常涉及多个团队协作，发版排期必须多方协调。<br>那么是否存在一种方案可以在不发版的前提下修复线上bug？有！而且不只一种，业界各家大厂都针对这一问题拿出了自家的解决方案，较为著名的有腾讯的Tinker和阿里的Andfix以及QQ空间补丁。网上对上述方案有很多介绍性文章，不过大多不全面，中间略过很多细节。笔者在学习的过程中也遇到很多麻烦。所以笔者将通过接下来几篇博客对上述两种方案进行介绍，力求不放过每一个细节。首先来看下QQ空间补丁方案。</p>
<h1 id="Dex分包机制"><a href="#Dex分包机制" class="headerlink" title="Dex分包机制"></a>Dex分包机制</h1><p>大家都知道，我们开发的代码在被编译成class文件后会被打包成一个dex文件。但是dex文件有一个限制，由于方法id是一个short类型，所以导致了一个dex文件最多只能存放65536个方法。随着现今App的开发日益复杂，导致方法数早已超过了这个上限。为了解决这个问题，Google提出了multidex方案，即一个apk文件可以包含多个dex文件。<br>不过值得注意的是，除了第一个dex文件以外，其他的dex文件都是以资源的形式被加载的，换句话说就是在Application.onCreate()方法中被注入到系统的ClassLoader中的。这也就为热修复提供了一种可能：将修复后的代码达成补丁包，然后发送到客户端，客户端在启动的时候到指定路径下加载对应dex文件即可。<br>根据Android虚拟机的类加载机制，同一个类只会被加载一次，所以要让修复后的类替换原有的类就必须让补丁包的类被优先加载。接下来看下Android虚拟机的类加载机制。</p>
<h1 id="类加载机制"><a href="#类加载机制" class="headerlink" title="类加载机制"></a>类加载机制</h1><p>Android的类加载机制和jvm加载机制类似，都是通过ClassLoader来完成，只是具体的类不同而已。<br>Android系统通过PathClassLoader来加载系统类和主dex中的类。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">/**</div><div class="line"> * Provides a simple &#123;@link ClassLoader&#125; implementation that operates on a list</div><div class="line"> * of files and directories in the local file system, but does not attempt to</div><div class="line"> * load classes from the network. Android uses this class for its system class</div><div class="line"> * loader and for its application class loader(s).</div><div class="line"> */</div></pre></td></tr></table></figure></p>
<p>而DexClassLoader则用于加载其他dex文件中的类。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">/**</div><div class="line"> * A class loader that loads classes from &#123;@code .jar&#125; and &#123;@code .apk&#125; files</div><div class="line"> * containing a &#123;@code classes.dex&#125; entry. This can be used to execute code not</div><div class="line"> * installed as part of an application.</div><div class="line"> *</div><div class="line"> * &lt;p&gt;This class loader requires an application-private, writable directory to</div><div class="line"> * cache optimized classes. Use &#123;@code Context.getDir(String, int)&#125; to create</div><div class="line"> * such a directory: &lt;pre&gt;   &#123;@code</div><div class="line"> *   File dexOutputDir = context.getDir(&quot;dex&quot;, 0);</div><div class="line"> * &#125;&lt;/pre&gt;</div><div class="line"> *</div><div class="line"> * &lt;p&gt;&lt;strong&gt;Do not cache optimized classes on external storage.&lt;/strong&gt;</div><div class="line"> * External storage does not provide access controls necessary to protect your</div><div class="line"> * application from code injection attacks.</div><div class="line"> */</div></pre></td></tr></table></figure></p>
<p>上述两个类都是继承自BaseDexClassLoader，查看源码得知具体的加载方法是findClass:<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"> * Base class for common functionality between various dex-based</div><div class="line"> * &#123;<span class="doctag">@link</span> ClassLoader&#125; implementations.</div><div class="line"> */</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BaseDexClassLoader</span> <span class="keyword">extends</span> <span class="title">ClassLoader</span> </span>&#123;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">final</span> DexPathList pathList;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * Constructs an instance.</div><div class="line">     *</div><div class="line">     * <span class="doctag">@param</span> dexPath the list of jar/apk files containing classes and</div><div class="line">     * resources, delimited by &#123;<span class="doctag">@code</span> File.pathSeparator&#125;, which</div><div class="line">     * defaults to &#123;<span class="doctag">@code</span> ":"&#125; on Android</div><div class="line">     * <span class="doctag">@param</span> optimizedDirectory directory where optimized dex files</div><div class="line">     * should be written; may be &#123;<span class="doctag">@code</span> null&#125;</div><div class="line">     * <span class="doctag">@param</span> libraryPath the list of directories containing native</div><div class="line">     * libraries, delimited by &#123;<span class="doctag">@code</span> File.pathSeparator&#125;; may be</div><div class="line">     * &#123;<span class="doctag">@code</span> null&#125;</div><div class="line">     * <span class="doctag">@param</span> parent the parent class loader</div><div class="line">     */</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">BaseDexClassLoader</span><span class="params">(String dexPath, File optimizedDirectory,</span></span></div><div class="line">            String libraryPath, ClassLoader parent) &#123;</div><div class="line">        <span class="keyword">super</span>(parent);</div><div class="line">        <span class="keyword">this</span>.pathList = <span class="keyword">new</span> DexPathList(<span class="keyword">this</span>, dexPath, libraryPath, optimizedDirectory);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="keyword">protected</span> Class&lt;?&gt; findClass(String name) <span class="keyword">throws</span> ClassNotFoundException &#123;</div><div class="line">        List&lt;Throwable&gt; suppressedExceptions = <span class="keyword">new</span> ArrayList&lt;Throwable&gt;();</div><div class="line">        Class c = pathList.findClass(name, suppressedExceptions);</div><div class="line">        <span class="keyword">if</span> (c == <span class="keyword">null</span>) &#123;</div><div class="line">            ClassNotFoundException cnfe = <span class="keyword">new</span> ClassNotFoundException(<span class="string">"Didn't find class \""</span> + name + <span class="string">"\" on path: "</span> + pathList);</div><div class="line">            <span class="keyword">for</span> (Throwable t : suppressedExceptions) &#123;</div><div class="line">                cnfe.addSuppressed(t);</div><div class="line">            &#125;</div><div class="line">            <span class="keyword">throw</span> cnfe;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> c;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    ...省略代码</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>从代码中可以看到加载类的工作转移到了pathList中，pathList是一个DexPathList类型，从变量名和类型名就可以看出这是一个维护Dex的容器：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/*package*/</span> <span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">DexPathList</span> </span>&#123;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String DEX_SUFFIX = <span class="string">".dex"</span>;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String JAR_SUFFIX = <span class="string">".jar"</span>;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String ZIP_SUFFIX = <span class="string">".zip"</span>;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String APK_SUFFIX = <span class="string">".apk"</span>;</div><div class="line"></div><div class="line">    <span class="comment">/** class definition context */</span></div><div class="line">    <span class="keyword">private</span> <span class="keyword">final</span> ClassLoader definingContext;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * List of dex/resource (class path) elements.</div><div class="line">     * Should be called pathElements, but the Facebook app uses reflection</div><div class="line">     * to modify 'dexElements' (http://b/7726934).</div><div class="line">     */</div><div class="line">    <span class="keyword">private</span> <span class="keyword">final</span> Element[] dexElements;</div><div class="line"></div><div class="line">    <span class="comment">/** List of native library directories. */</span></div><div class="line">    <span class="keyword">private</span> <span class="keyword">final</span> File[] nativeLibraryDirectories;</div><div class="line"></div><div class="line">    ...省略代码</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * Finds the named class in one of the dex files pointed at by</div><div class="line">     * this instance. This will find the one in the earliest listed</div><div class="line">     * path element. If the class is found but has not yet been</div><div class="line">     * defined, then this method will define it in the defining</div><div class="line">     * context that this instance was constructed with.</div><div class="line">     *</div><div class="line">     * <span class="doctag">@param</span> name of class to find</div><div class="line">     * <span class="doctag">@param</span> suppressed exceptions encountered whilst finding the class</div><div class="line">     * <span class="doctag">@return</span> the named class or &#123;<span class="doctag">@code</span> null&#125; if the class is not</div><div class="line">     * found in any of the dex files</div><div class="line">     */</div><div class="line">    <span class="function"><span class="keyword">public</span> Class <span class="title">findClass</span><span class="params">(String name, List&lt;Throwable&gt; suppressed)</span> </span>&#123;</div><div class="line">        <span class="keyword">for</span> (Element element : dexElements) &#123;</div><div class="line">            DexFile dex = element.dexFile;</div><div class="line"></div><div class="line">            <span class="keyword">if</span> (dex != <span class="keyword">null</span>) &#123;</div><div class="line">                Class clazz = dex.loadClassBinaryName(name, definingContext, suppressed);</div><div class="line">                <span class="keyword">if</span> (clazz != <span class="keyword">null</span>) &#123;</div><div class="line">                    <span class="keyword">return</span> clazz;</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">if</span> (dexElementsSuppressedExceptions != <span class="keyword">null</span>) &#123;</div><div class="line">            suppressed.addAll(Arrays.asList(dexElementsSuppressedExceptions));</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    ...省略代码</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>DexPathList的findClass也很简单，dexElements是维护dex文件的数组，每一个item对应一个dex文件。DexPathList遍历dexElements，从每一个dex文件中查找目标类，在找到后即返回并停止遍历。所以要想达到热修复的目的就必须让补丁dex在dexElements中的位置先于原有dex：</p>
<p><img src="/res/hotfix/c3d8d50bdf89d50bf5254387ae761ccc_b.jpg" alt="修复前"></p>
<p><img src="/res/hotfix/5af6c469a4866233d82ee7521c672ea6_b.jpg" alt="修复后"></p>
<p>基本上以上的部分就是QQ空间动态修复方案的基本思路。下面将以一个简单的例子讲述一下QQ空间补丁热修复的过程。</p>
<h4 id="创建补丁"><a href="#创建补丁" class="headerlink" title="创建补丁"></a>创建补丁</h4><p>1.创建简单类<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Hello</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">say</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> <span class="string">"hello world"</span>;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>2.Activity也很简单，实例化Hello并且调用方法<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MainActivity</span> <span class="keyword">extends</span> <span class="title">AppCompatActivity</span> <span class="keyword">implements</span> <span class="title">OnClickListener</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String TAG = MainActivity.class.getSimpleName();</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(Bundle savedInstanceState)</span> </span>&#123;</div><div class="line">        <span class="keyword">super</span>.onCreate(savedInstanceState);</div><div class="line">        Log.d(TAG, <span class="string">"getClassLoader():"</span> + getClassLoader());</div><div class="line">        setContentView(R.layout.activity_main);</div><div class="line">        Button button = (Button) findViewById(R.id.button);</div><div class="line">        button.setOnClickListener(<span class="keyword">this</span>);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onClick</span><span class="params">(View v)</span> </span>&#123;</div><div class="line">        Toast.makeText(<span class="keyword">this</span>, String.valueOf(<span class="keyword">new</span> Hello().say()), Toast.LENGTH_SHORT).show();</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>3.创建补丁包<br>首先修改要修复的类，我们在返回的字符串后加了三个感叹号。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Hello</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">say</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> <span class="string">"hello world!!!"</span>;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>4.重新编译项目，在<code>app/build/intermediates/classes/debug/com/jinlin/base/hotfix/</code>目录下找到Hello.class文件,将其拷出来，准备打包。注意要放置在于Hello包名相同的路径下<code>com/jinlin/base/hotfix/</code>。然后使用命令将其打成jar包：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">jar -cvf patch.jar com</div></pre></td></tr></table></figure>
<p>再将对应的jar包打成dex包：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">dx --dex --output=patch_dex.jar patch.jar</div></pre></td></tr></table></figure></p>
<p>dx是将jar包打成dex包的工具，安装在<code>$sdk_home$/build-tools/version(如23.0.1)/dx</code>。生成的patch_dex.jar就是补丁包。接下来将其放到SDCard中，之后应用从sdCard上加载该补丁包。注意：这里需要添加读取内存卡的权限<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">adb push patch_dex.jar /mnt/sdcard/</div></pre></td></tr></table></figure></p>
<h4 id="加载补丁"><a href="#加载补丁" class="headerlink" title="加载补丁"></a>加载补丁</h4><p>加载补丁的思路如下：</p>
<p>在Application的onCreate()方法中获取应用本身的BaseDexClassLoader,然后通过反射得到对应的dexElements<br>创建一个新的DexClassLoader实例，然后加载SDCard上的补丁包，通过同样的反射方法得到对应的dexElements<br>将两个dexElements合并，再利用反射将合并后的dexElements赋值给应用本身的BaseDexClassLoader<br>接下来看下具体代码：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HotFixApplication</span> <span class="keyword">extends</span> <span class="title">Application</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String TAG = HotFixApplication.class.getSimpleName();</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">super</span>.onCreate();</div><div class="line"></div><div class="line">        <span class="comment">// 获取补丁，如果存在就执行注入操作</span></div><div class="line">        String dexPath = Environment.getExternalStorageDirectory().getAbsolutePath().concat(<span class="string">"/patch_dex.jar"</span>);</div><div class="line">        File file = <span class="keyword">new</span> File(dexPath);</div><div class="line">        <span class="keyword">if</span> (file.exists()) &#123;</div><div class="line">            inject(dexPath);</div><div class="line">        &#125; <span class="keyword">else</span> &#123;</div><div class="line">            Log.e(TAG, dexPath + <span class="string">"不存在"</span>);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * 要注入的dex的路径</div><div class="line">     *</div><div class="line">     * <span class="doctag">@param</span> path</div><div class="line">     */</div><div class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">inject</span><span class="params">(String path)</span> </span>&#123;</div><div class="line">        <span class="keyword">try</span> &#123;</div><div class="line">            <span class="comment">// 获取classes的dexElements</span></div><div class="line">            Class&lt;?&gt; cl = Class.forName(<span class="string">"dalvik.system.BaseDexClassLoader"</span>);</div><div class="line">            Object pathList = getField(cl, <span class="string">"pathList"</span>, getClassLoader());</div><div class="line">            Object baseElements = getField(pathList.getClass(), <span class="string">"dexElements"</span>, pathList);</div><div class="line"></div><div class="line">            <span class="comment">// 获取patch_dex的dexElements（需要先加载dex）</span></div><div class="line">            String dexopt = getDir(<span class="string">"dexopt"</span>, <span class="number">0</span>).getAbsolutePath();</div><div class="line">            DexClassLoader dexClassLoader = <span class="keyword">new</span> DexClassLoader(path, dexopt, dexopt, getClassLoader());</div><div class="line">            Object obj = getField(cl, <span class="string">"pathList"</span>, dexClassLoader);</div><div class="line">            Object dexElements = getField(obj.getClass(), <span class="string">"dexElements"</span>, obj);</div><div class="line"></div><div class="line">            <span class="comment">// 合并两个Elements</span></div><div class="line">            Object combineElements = combineArray(dexElements, baseElements);</div><div class="line"></div><div class="line">            <span class="comment">// 将合并后的Element数组重新赋值给app的classLoader</span></div><div class="line">            setField(pathList.getClass(), <span class="string">"dexElements"</span>, pathList, combineElements);</div><div class="line"></div><div class="line">            <span class="comment">//======== 以下是测试是否成功注入 =================</span></div><div class="line">            Object object = getField(pathList.getClass(), <span class="string">"dexElements"</span>, pathList);</div><div class="line">            <span class="keyword">int</span> length = Array.getLength(object);</div><div class="line">            Log.e(TAG, <span class="string">"length = "</span> + length);</div><div class="line"></div><div class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</div><div class="line">            e.printStackTrace();</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * 通过反射获取对象的属性值</div><div class="line">     */</div><div class="line">    <span class="function"><span class="keyword">private</span> Object <span class="title">getField</span><span class="params">(Class&lt;?&gt; cl, String fieldName, Object object)</span> <span class="keyword">throws</span> NoSuchFieldException, IllegalAccessException </span>&#123;</div><div class="line">        Field field = cl.getDeclaredField(fieldName);</div><div class="line">        field.setAccessible(<span class="keyword">true</span>);</div><div class="line">        <span class="keyword">return</span> field.get(object);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * 通过反射设置对象的属性值</div><div class="line">     */</div><div class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">setField</span><span class="params">(Class&lt;?&gt; cl, String fieldName, Object object, Object value)</span> <span class="keyword">throws</span> NoSuchFieldException, IllegalAccessException </span>&#123;</div><div class="line">        Field field = cl.getDeclaredField(fieldName);</div><div class="line">        field.setAccessible(<span class="keyword">true</span>);</div><div class="line">        field.set(object, value);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * 通过反射合并两个数组</div><div class="line">     */</div><div class="line">    <span class="function"><span class="keyword">private</span> Object <span class="title">combineArray</span><span class="params">(Object firstArr, Object secondArr)</span> </span>&#123;</div><div class="line">        <span class="keyword">int</span> firstLength = Array.getLength(firstArr);</div><div class="line">        <span class="keyword">int</span> secondLength = Array.getLength(secondArr);</div><div class="line">        <span class="keyword">int</span> length = firstLength + secondLength;</div><div class="line"></div><div class="line">        Class&lt;?&gt; componentType = firstArr.getClass().getComponentType();</div><div class="line">        Object newArr = Array.newInstance(componentType, length);</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; length; i++) &#123;</div><div class="line">            <span class="keyword">if</span> (i &lt; firstLength) &#123;</div><div class="line">                Array.set(newArr, i, Array.get(firstArr, i));</div><div class="line">            &#125; <span class="keyword">else</span> &#123;</div><div class="line">                Array.set(newArr, i, Array.get(secondArr, i - firstLength));</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> newArr;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>核心代码就这么多，运行一下程序看看效果。程序依然Crash了。抛出的异常如下<br><img src="/res/hotfix/exception.png" alt="异常"></p>
<p>原因是类预校验问题引起的，具体请看<a href="https://mp.weixin.qq.com/s?__biz=MzI1MTA1MzM2Nw==&amp;mid=400118620&amp;idx=1&amp;sn=b4fdd5055731290eef12ad0d17f39d4a&amp;scene=1&amp;srcid=1106Imu9ZgwybID13e7y2nEi#wechat_redirect" target="_blank" rel="external">安卓App热补丁动态修复技术介绍</a>在apk安装的时候系统会将dex文件优化成odex文件，在优化的过程中会涉及一个预校验的过程。如果一个类的static方法，private方法，override方法以及构造函数中引用了其他类，并且这些类都属于同一个dex文件，此时该类就会被打上CLASS_ISPREVERIFIED。如果在运行时被打上CLASS_ISPREVERIFIED的类引用了其他dex的类，就会报错<code>Class ref in pre-verified class resolved to unexpected implementation</code>所以MainActivity的onClick()方法中引用另一个dex的类就会出现上文中的问题。正常的分包方案会保证相关类被打入同一个dex文件，想要使得patch补丁包可以被正常加载，就必须保证类不会被打上CLASS_ISPREVERIFIED标记。而要实现这个目的就必须要在分完包后的class中植入对其他dex文件中类的引用。</p>
<h4 id="字节码注入"><a href="#字节码注入" class="headerlink" title="字节码注入"></a>字节码注入</h4><p>要在已经编译完成后的类中植入对其他类的引用，就需要操作字节码，惯用的方案是插桩。常见的工具有javaassist，ASM等。其实QQ空间补丁方案的关键就在于字节码的注入而不是dex的注入。相比之下ASM提供一系列字节码指令，效率更高但是要求使用者对字节码操作有一定了解。而javaassist虽然效率差一些但是使用门槛较低，我们选择使用javaassist。关于javaassist可以网上搜索一些资料了解一下,这里不做详细描述。 </p>
<h5 id="用-Javassist-进行类字节码插桩"><a href="#用-Javassist-进行类字节码插桩" class="headerlink" title="用 Javassist 进行类字节码插桩"></a>用 Javassist 进行类字节码插桩</h5><p>正常App开发过程中，编译，打包过程都是Android Studio自动完成。如无特殊需求无需人为干预，但是要实现插桩就必须在Android Studio的自动化打包流程中加入插桩的过程。</p>
<ol>
<li>Gradle,Task,Transform,Plugin<br>Android Studio采用Gradle作为构建工具，所有有必要了解一下Gradle构建的基本概念和流程。如果不熟悉可以参考一下下列文章：<br><a href="http://www.cnblogs.com/davenkin/p/gradle-learning-1.html?spm=5176.100239.blogcont70337.18.IgYelX" target="_blank" rel="external">Gradle学习系列之一——Gradle快速入门</a><br><a href="http://blog.csdn.net/innost/article/details/48228651?spm=5176.100239.blogcont70337.19.IgYelX" target="_blank" rel="external">深入理解Android之Gradle</a></li>
</ol>
<p>Gradle的构建工程实质上是通过一系列的Task完成的，所以在构建apk的过程中就存在一个打包dex的任务。Gradle 1.5以上版本提供了一个新的API：Transform，官方文档对于Transform的描述是：</p>
<blockquote>
<p>The goal of this API is to simplify injecting custom class manipulations without having to deal with tasks, and to offer more flexibility on what is manipulated. The internal code processing (jacoco, progard, multi-dex) have all moved to this new mechanism already in 1.5.0-beta1.</p>
<blockquote>
<ol>
<li>The Dex class is gone. You cannot access it anymore through the variant API (the getter is still there for now but will throw an exception)</li>
<li>Transform can only be registered globally which applies them to all the variants. We’ll improve this shortly.</li>
<li>There’s no way to control ordering of the transforms.</li>
</ol>
</blockquote>
</blockquote>
<p>Transform任务一经注册就会被插入到任务执行队列中，并且其恰好在dex打包task之前。所以要想实现插桩就必须创建一个Transform类的Task。</p>
<p>1.1 Task</p>
<p>Gradle的执行脚本就是由一系列的Task完成的。Task有一个重要的概念：input的output。每一个task需要有输入input，然后对input进行处理完成后在输出output。</p>
<p>1.2 Plugin</p>
<p>Gradle的另外一个重要概念就是Plugin。整个Gradle的构建体系都是有一个一个的plugin构成的，实际Gradle只是一个框架，提供了基本task和指定标准。而具体每一个task的执行逻辑都定义在一个个的plugin中。详细的概念可以参考：Writing Custom Plugins<br>在Android开发中我们经常使用到的plugin有：”com.android.application”，”com.android.library”,”java”等等。每一个Plugin包含了一系列的task，所以执行gradle脚本的过程也就是执行目标脚本所apply的plugin所包含的task。</p>
<p>1.3 创建一个包含Transform任务的Plugin</p>
<ol>
<li>新建一个module，选择library module，module名字必须叫BuildSrc</li>
<li>删除module下的所有文件，除了build.gradle，清空build.gradle中的内容</li>
<li>然后新建以下目录 src-main-groovy</li>
<li>修改build.gradle如下，同步</li>
</ol>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">apply plugin: <span class="string">'groovy'</span></div><div class="line"></div><div class="line">repositories &#123;</div><div class="line">    jcenter()</div><div class="line">&#125;</div><div class="line"></div><div class="line">dependencies &#123;</div><div class="line">    <span class="function">compile <span class="title">gradleApi</span><span class="params">()</span></span></div><div class="line">    compile 'com.android.tools.build:gradle:1.5.0'</div><div class="line">    compile 'org.javassist:javassist:3.20.0-GA'<span class="comment">//javaassist依赖</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ol>
<li>像普通module一样新建package和类，不过这里的类是以groovy结尾，新建类的时候选择file，并且以.groovy作为后缀</li>
<li>自定义Plugin：<br>PreDexTransform.groovy</li>
</ol>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div></pre></td><td class="code"><pre><div class="line">package com.hotfix.plugin</div><div class="line"></div><div class="line">import com.android.build.api.transform.*</div><div class="line">import com.android.build.gradle.internal.pipeline.TransformManager</div><div class="line">import org.apache.commons.codec.digest.DigestUtils</div><div class="line">import org.apache.commons.io.FileUtils</div><div class="line">import org.gradle.api.Project</div><div class="line"></div><div class="line">public class PreDexTransform extends Transform &#123;</div><div class="line"></div><div class="line">    private Project mProject;</div><div class="line"></div><div class="line">    PreDexTransform(Project project) &#123;</div><div class="line">        mProject = project</div><div class="line">        def libPath = project.project(&quot;:hack&quot;).buildDir.absolutePath.concat(&quot;/intermediates/classes/debug&quot;)</div><div class="line">        println libPath</div><div class="line">        Inject.appendClassPath(libPath)</div><div class="line">        Inject.appendClassPath(&quot;/Users/liyazhou/Library/Android/sdk/platforms/android-24/android.jar&quot;)</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    @Override</div><div class="line">    String getName() &#123;</div><div class="line">        return &quot;preDex&quot;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    @Override</div><div class="line">    Set&lt;QualifiedContent.ContentType&gt; getInputTypes() &#123;</div><div class="line">        return TransformManager.CONTENT_CLASS</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    @Override</div><div class="line">    Set&lt;QualifiedContent.Scope&gt; getScopes() &#123;</div><div class="line">        return TransformManager.SCOPE_FULL_PROJECT</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    @Override</div><div class="line">    boolean isIncremental() &#123;</div><div class="line">        return false</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    @Override</div><div class="line">    void transform(Context context, Collection&lt;TransformInput&gt; inputs, Collection&lt;TransformInput&gt; referencedInputs, TransformOutputProvider outputProvider, boolean isIncremental) throws IOException, TransformException, InterruptedException &#123;</div><div class="line">        // 遍历transfrom的inputs</div><div class="line">        // inputs有两种类型，一种是目录，一种是jar，需要分别遍历。</div><div class="line">        inputs.each &#123;TransformInput input -&gt;</div><div class="line">            input.directoryInputs.each &#123;DirectoryInput directoryInput -&gt;</div><div class="line">                //TODO 注入代码</div><div class="line">                Inject.injectDir(directoryInput.file.absolutePath)</div><div class="line"></div><div class="line">                def dest = outputProvider.getContentLocation(directoryInput.name,</div><div class="line">                        directoryInput.contentTypes, directoryInput.scopes, Format.DIRECTORY)</div><div class="line">                // 将input的目录复制到output指定目录</div><div class="line">                FileUtils.copyDirectory(directoryInput.file, dest)</div><div class="line">            &#125;</div><div class="line"></div><div class="line">            input.jarInputs.each &#123;JarInput jarInput -&gt;</div><div class="line">                //TODO 注入代码</div><div class="line">                String jarPath = jarInput.file.absolutePath;</div><div class="line">                String projectName = project.rootProject.name;</div><div class="line">                if(jarPath.endsWith(&quot;classes.jar&quot;)</div><div class="line">                        &amp;&amp; jarPath.contains(&quot;exploded-aar/&quot;+projectName)</div><div class="line">                        // hotpatch module是用来加载dex，无需注入代码</div><div class="line">                        &amp;&amp; !jarPath.contains(&quot;exploded-aar/&quot;+projectName+&quot;/hotpatch&quot;)) &#123;</div><div class="line">                    Inject.injectJar(jarPath)</div><div class="line">                &#125;</div><div class="line"></div><div class="line">                // 重命名输出文件（同目录copyFile会冲突）</div><div class="line">                def jarName = jarInput.name</div><div class="line">                def md5Name = DigestUtils.md5Hex(jarInput.file.getAbsolutePath())</div><div class="line">                if(jarName.endsWith(&quot;.jar&quot;)) &#123;</div><div class="line">                    jarName = jarName.substring(0,jarName.length()-4)</div><div class="line">                &#125;</div><div class="line">                def dest = outputProvider.getContentLocation(jarName+md5Name, jarInput.contentTypes, jarInput.scopes, Format.JAR)</div><div class="line">                FileUtils.copyFile(jarInput.file, dest)</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>Inject.groovy<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div></pre></td><td class="code"><pre><div class="line">package com.hotfix.plugin</div><div class="line"></div><div class="line">import javassist.ClassPool</div><div class="line">import javassist.CtClass</div><div class="line">import javassist.NotFoundException</div><div class="line">import org.apache.commons.io.FileUtils</div><div class="line"></div><div class="line">public class Inject &#123;</div><div class="line">    private static ClassPool sPool = ClassPool.getDefault()</div><div class="line">    /**</div><div class="line">     * 添加classPath到ClassPool</div><div class="line">     * @param libPath</div><div class="line">     */</div><div class="line">    public static void appendClassPath(String libPath) throws NotFoundException &#123;</div><div class="line">        sPool.appendClassPath(libPath)</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    /**</div><div class="line">     * 遍历该目录下的所有class，对所有class进行代码注入。</div><div class="line">     * 其中以下class是不需要注入代码的：</div><div class="line">     * --- 1. R文件相关</div><div class="line">     * --- 2. 配置文件相关（BuildConfig）</div><div class="line">     * --- 3. Application</div><div class="line">     * @param path 目录的路径</div><div class="line">     */</div><div class="line">    public static void injectDir(String path) &#123;</div><div class="line">        sPool.appendClassPath(path)</div><div class="line">        File dir = new File(path)</div><div class="line">        if (dir.isDirectory()) &#123;</div><div class="line">            dir.eachFileRecurse &#123; File file -&gt;</div><div class="line"></div><div class="line">                String filePath = file.absolutePath</div><div class="line">                if (filePath.endsWith(&quot;.class&quot;)</div><div class="line">                        &amp;&amp; !filePath.contains(&apos;R$&apos;)</div><div class="line">                        &amp;&amp; !filePath.contains(&apos;R.class&apos;)</div><div class="line">                        &amp;&amp; !filePath.contains(&quot;BuildConfig.class&quot;)</div><div class="line">                        // 这里是application的名字，可自行配置</div><div class="line">                        &amp;&amp; !filePath.contains(&quot;HotFixApplication.class&quot;)) &#123;</div><div class="line">                    // 应用程序包名，可自行配置</div><div class="line">                    int index = filePath.indexOf(&quot;com/jinlin/base/hotfix&quot;)</div><div class="line">                    if (index != -1) &#123;</div><div class="line">                        int end = filePath.length() - 6 // .class = 6</div><div class="line">                        String className = filePath.substring(index, end).replace(&apos;\\&apos;, &apos;.&apos;).replace(&apos;/&apos;, &apos;.&apos;)</div><div class="line">                        injectClass(className, path)</div><div class="line">                    &#125;</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    /**</div><div class="line">     * 这里需要将jar包先解压，注入代码后再重新生成jar包</div><div class="line">     * @path jar包的绝对路径</div><div class="line">     */</div><div class="line">    public static void injectJar(String path) &#123;</div><div class="line">        if (path.endsWith(&quot;.jar&quot;)) &#123;</div><div class="line">            File jarFile = new File(path)</div><div class="line"></div><div class="line">            // jar包解压后的保存路径</div><div class="line">            String jarZipDir = jarFile.getParent() + &quot;/&quot; + jarFile.getName().replace(&apos;.jar&apos;, &apos;&apos;)</div><div class="line"></div><div class="line">            // 解压jar包, 返回jar包中所有class的完整类名的集合（带.class后缀）</div><div class="line">            List classNameList = JarZipUtils.unzipJar(path, jarZipDir)</div><div class="line"></div><div class="line">            // 删除原来的jar包</div><div class="line">            jarFile.delete()</div><div class="line"></div><div class="line">            // 注入代码</div><div class="line">            sPool.appendClassPath(jarZipDir)</div><div class="line">            for (String className : classNameList) &#123;</div><div class="line">                if (className.endsWith(&quot;.class&quot;)</div><div class="line">                        &amp;&amp; !className.contains(&apos;R$&apos;)</div><div class="line">                        &amp;&amp; !className.contains(&apos;R.class&apos;)</div><div class="line">                        &amp;&amp; !className.contains(&quot;BuildConfig.class&quot;)) &#123;</div><div class="line">                    className = className.substring(0, className.length() - 6)</div><div class="line">                    injectClass(className, jarZipDir)</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line"></div><div class="line">            // 从新打包jar</div><div class="line">            JarZipUtils.zipJar(jarZipDir, path)</div><div class="line"></div><div class="line">            // 删除目录</div><div class="line">            FileUtils.deleteDirectory(new File(jarZipDir))</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    private static void injectClass(String className, String path) &#123;</div><div class="line">        CtClass c = sPool.getCtClass(className)</div><div class="line">        if (c.isFrozen()) &#123;</div><div class="line">            c.defrost()</div><div class="line">        &#125;</div><div class="line">        def constructor = c.getConstructors()[0];</div><div class="line">        constructor.insertAfter(&quot;System.out.println(com.jinlin.base.hack.AntilazyLoad.class);&quot;)</div><div class="line">        c.writeFile(path)</div><div class="line">    &#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>JarZipUtil.groovy<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div></pre></td><td class="code"><pre><div class="line">import java.util.jar.JarEntry</div><div class="line">import java.util.jar.JarFile</div><div class="line">import java.util.jar.JarOutputStream</div><div class="line">import java.util.zip.ZipEntry</div><div class="line"></div><div class="line">public class JarZipUtils &#123;</div><div class="line"></div><div class="line">    /**</div><div class="line">     * 将该jar包解压到指定目录</div><div class="line">     * @param jarPath jar包的绝对路径</div><div class="line">     * @param destDirPath jar包解压后的保存路径</div><div class="line">     * @return 返回该jar包中包含的所有class的完整类名类名集合，其中一条数据如：com.aitski.hotpatch.Xxxx.class</div><div class="line">     */</div><div class="line">    public static List unzipJar(String jarPath, String destDirPath) &#123;</div><div class="line"></div><div class="line">        List list = new ArrayList()</div><div class="line">        if (jarPath.endsWith(&apos;.jar&apos;)) &#123;</div><div class="line"></div><div class="line">            JarFile jarFile = new JarFile(jarPath)</div><div class="line">            Enumeration&lt;JarEntry&gt; jarEntrys = jarFile.entries()</div><div class="line">            while (jarEntrys.hasMoreElements()) &#123;</div><div class="line">                JarEntry jarEntry = jarEntrys.nextElement()</div><div class="line">                if (jarEntry.directory) &#123;</div><div class="line">                    continue</div><div class="line">                &#125;</div><div class="line">                String entryName = jarEntry.getName()</div><div class="line">                if (entryName.endsWith(&apos;.class&apos;)) &#123;</div><div class="line">                    String className = entryName.replace(&apos;\\&apos;, &apos;.&apos;).replace(&apos;/&apos;, &apos;.&apos;)</div><div class="line">                    list.add(className)</div><div class="line">                &#125;</div><div class="line">                String outFileName = destDirPath + &quot;/&quot; + entryName</div><div class="line">                File outFile = new File(outFileName)</div><div class="line">                outFile.getParentFile().mkdirs()</div><div class="line">                InputStream inputStream = jarFile.getInputStream(jarEntry)</div><div class="line">                FileOutputStream fileOutputStream = new FileOutputStream(outFile)</div><div class="line">                fileOutputStream &lt;&lt; inputStream</div><div class="line">                fileOutputStream.close()</div><div class="line">                inputStream.close()</div><div class="line">            &#125;</div><div class="line">            jarFile.close()</div><div class="line">        &#125;</div><div class="line">        return list</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    /**</div><div class="line">     * 重新打包jar</div><div class="line">     * @param packagePath 将这个目录下的所有文件打包成jar</div><div class="line">     * @param destPath 打包好的jar包的绝对路径</div><div class="line">     */</div><div class="line">    public static void zipJar(String packagePath, String destPath) &#123;</div><div class="line"></div><div class="line">        File file = new File(packagePath)</div><div class="line">        JarOutputStream outputStream = new JarOutputStream(new FileOutputStream(destPath))</div><div class="line">        file.eachFileRecurse &#123; File f -&gt;</div><div class="line">            String entryName = f.getAbsolutePath().substring(packagePath.length() + 1)</div><div class="line">            outputStream.putNextEntry(new ZipEntry(entryName))</div><div class="line">            if (!f.directory) &#123;</div><div class="line">                InputStream inputStream = new FileInputStream(f)</div><div class="line">                outputStream &lt;&lt; inputStream</div><div class="line">                inputStream.close()</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        outputStream.close()</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<ol>
<li><p>在app module下build.gradle文件中添加新插件：apply plugin: com.hotpatch.plugin.Register</p>
</li>
<li><p>创建hack.jar<br>创建一个单独的module，命名为com.hotpatch.plugin.AntilazyLoad</p>
</li>
</ol>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> com.jinlin.base.hack;</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AntilazyLoad</span> </span>&#123;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>使用上一篇博客介绍的方法打包hack.jar。然后将hack.jar复制到app module下的assets目录中。另外注意：app module不能依赖hack module。之所以要创建一个hack module，同时人为地在dex打包过程中插入对其他hack.jar中类的依赖，就是要让apk文件在安装的时候不被打上CLASS_ISPREVERIFIED标记。<br>另外由于hack.jar位于assets中，所以必须要在加载patch_dex之前加载hack.jar。另外由于加载其他路径的dex文件都是在Application.onCreate()方法中执行的，此时还没有加载hack.jar，所以这就是为什么在上一章节插桩的时候不能在Application中插桩的原因。</p>
<p>插桩的过程介绍完了，整个热修复的过程也就差不多了，读者可以参考完整的代码进行demo试用：Hotpatch Demo</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;　　&lt;strong&gt; 概述：&lt;/strong&gt;传统的app开发模式下，线上出现bug，必须通过发布新版本，用户手动更新后才能修复线上bug。那么是否存在一种方案可以在不发版的前提下修复线上bug？有！而且不只一种。今天首先来看下腾讯的QQ空间补丁方案&lt;br&gt;
    
    </summary>
    
      <category term="热修复" scheme="http://daijinlin.com/categories/%E7%83%AD%E4%BF%AE%E5%A4%8D/"/>
    
    
      <category term="Dex分包、类加载机制" scheme="http://daijinlin.com/tags/Dex%E5%88%86%E5%8C%85%E3%80%81%E7%B1%BB%E5%8A%A0%E8%BD%BD%E6%9C%BA%E5%88%B6/"/>
    
  </entry>
  
  <entry>
    <title>Android热修复探究</title>
    <link href="http://daijinlin.com/2016/04/01/Android-hotfix-0/"/>
    <id>http://daijinlin.com/2016/04/01/Android-hotfix-0/</id>
    <published>2016-03-31T16:00:00.000Z</published>
    <updated>2017-04-05T09:12:48.033Z</updated>
    
    <content type="html"><![CDATA[<p>　　<strong> 概述：</strong><br><a id="more"></a></p>
<table>
<thead>
<tr>
<th style="text-align:left">方案</th>
<th style="text-align:center">原理</th>
<th style="text-align:center">主要缺陷</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">100%</td>
<td style="text-align:center">FF</td>
</tr>
</tbody>
</table>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;　　&lt;strong&gt; 概述：&lt;/strong&gt;&lt;br&gt;
    
    </summary>
    
      <category term="热修复" scheme="http://daijinlin.com/categories/%E7%83%AD%E4%BF%AE%E5%A4%8D/"/>
    
    
  </entry>
  
  <entry>
    <title>关于RelativeLayout和LinearLayout的性能讨论</title>
    <link href="http://daijinlin.com/2016/03/17/relativelayout-linearlayout/"/>
    <id>http://daijinlin.com/2016/03/17/relativelayout-linearlayout/</id>
    <published>2016-03-17T03:22:46.000Z</published>
    <updated>2017-04-05T09:12:48.040Z</updated>
    
    <content type="html"><![CDATA[<p>　　<strong> 概述：</strong>我们知道RelativeLayout和LinearLayout是Android中常用的布局，日常使用的再频繁不过。但是如果不正确使用会极大的影响性能，因此，正确的使用它们是提升程序性能的关键性工作。<br><a id="more"></a></p>
<h5 id="关于影响性能的重要因素"><a href="#关于影响性能的重要因素" class="headerlink" title="关于影响性能的重要因素"></a>关于影响性能的重要因素</h5><p>我们知道一个View要经历measure/layout/draw三大流程，这里不做详细叙述具体的可以查阅相关资料或者源码来学习。这里我们通过查看源码可以发现其主要的性能差异表现在<code>onMeasure</code>的逻辑上。</p>
<h5 id="LinearLayout的onMeasure源码"><a href="#LinearLayout的onMeasure源码" class="headerlink" title="LinearLayout的onMeasure源码"></a>LinearLayout的<code>onMeasure</code>源码</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Override</span></div><div class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onMeasure</span><span class="params">(<span class="keyword">int</span> widthMeasureSpec, <span class="keyword">int</span> heightMeasureSpec)</span> </span>&#123;</div><div class="line">    <span class="keyword">if</span> (mOrientation == VERTICAL) &#123;</div><div class="line">        measureVertical(widthMeasureSpec, heightMeasureSpec);</div><div class="line">    &#125; <span class="keyword">else</span> &#123;</div><div class="line">        measureHorizontal(widthMeasureSpec, heightMeasureSpec);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>可以看到LinearLayout先会判断我们所设置的布局方向，分别执行不同的测量逻辑。由此，我们可以推测其<code>onLayout</code>的逻辑应该也是会判断方向，这里就不做解释了。布局方向可以通过xml或者java设置。如下：<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">android:orientation="vertical"</div></pre></td></tr></table></figure></p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">setOrientation(<span class="meta">@OrientationMode</span> <span class="keyword">int</span> orientation)</div></pre></td></tr></table></figure>
<p>我们这里只考虑竖直的方向情况，横向的原理类似，可自行查看源码<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div><div class="line">129</div><div class="line">130</div><div class="line">131</div><div class="line">132</div><div class="line">133</div><div class="line">134</div><div class="line">135</div><div class="line">136</div><div class="line">137</div><div class="line">138</div><div class="line">139</div><div class="line">140</div><div class="line">141</div><div class="line">142</div><div class="line">143</div><div class="line">144</div><div class="line">145</div><div class="line">146</div><div class="line">147</div><div class="line">148</div><div class="line">149</div><div class="line">150</div><div class="line">151</div><div class="line">152</div><div class="line">153</div><div class="line">154</div><div class="line">155</div><div class="line">156</div><div class="line">157</div><div class="line">158</div><div class="line">159</div><div class="line">160</div><div class="line">161</div><div class="line">162</div><div class="line">163</div><div class="line">164</div><div class="line">165</div><div class="line">166</div><div class="line">167</div><div class="line">168</div><div class="line">169</div><div class="line">170</div><div class="line">171</div><div class="line">172</div><div class="line">173</div><div class="line">174</div><div class="line">175</div><div class="line">176</div><div class="line">177</div><div class="line">178</div><div class="line">179</div><div class="line">180</div><div class="line">181</div><div class="line">182</div><div class="line">183</div><div class="line">184</div><div class="line">185</div><div class="line">186</div><div class="line">187</div><div class="line">188</div><div class="line">189</div><div class="line">190</div><div class="line">191</div><div class="line">192</div><div class="line">193</div><div class="line">194</div><div class="line">195</div><div class="line">196</div><div class="line">197</div><div class="line">198</div><div class="line">199</div><div class="line">200</div><div class="line">201</div><div class="line">202</div><div class="line">203</div><div class="line">204</div><div class="line">205</div><div class="line">206</div><div class="line">207</div><div class="line">208</div><div class="line">209</div><div class="line">210</div><div class="line">211</div><div class="line">212</div><div class="line">213</div><div class="line">214</div><div class="line">215</div><div class="line">216</div><div class="line">217</div><div class="line">218</div><div class="line">219</div><div class="line">220</div><div class="line">221</div><div class="line">222</div><div class="line">223</div><div class="line">224</div><div class="line">225</div><div class="line">226</div><div class="line">227</div><div class="line">228</div><div class="line">229</div><div class="line">230</div><div class="line">231</div><div class="line">232</div><div class="line">233</div><div class="line">234</div><div class="line">235</div><div class="line">236</div><div class="line">237</div><div class="line">238</div><div class="line">239</div><div class="line">240</div><div class="line">241</div><div class="line">242</div><div class="line">243</div><div class="line">244</div><div class="line">245</div><div class="line">246</div><div class="line">247</div><div class="line">248</div><div class="line">249</div><div class="line">250</div><div class="line">251</div><div class="line">252</div><div class="line">253</div><div class="line">254</div><div class="line">255</div><div class="line">256</div><div class="line">257</div><div class="line">258</div><div class="line">259</div><div class="line">260</div><div class="line">261</div><div class="line">262</div><div class="line">263</div><div class="line">264</div><div class="line">265</div><div class="line">266</div><div class="line">267</div><div class="line">268</div><div class="line">269</div><div class="line">270</div><div class="line">271</div><div class="line">272</div><div class="line">273</div><div class="line">274</div><div class="line">275</div><div class="line">276</div><div class="line">277</div><div class="line">278</div><div class="line">279</div><div class="line">280</div><div class="line">281</div><div class="line">282</div><div class="line">283</div><div class="line">284</div><div class="line">285</div><div class="line">286</div><div class="line">287</div><div class="line">288</div><div class="line">289</div><div class="line">290</div><div class="line">291</div><div class="line">292</div><div class="line">293</div><div class="line">294</div><div class="line">295</div><div class="line">296</div><div class="line">297</div><div class="line">298</div><div class="line">299</div><div class="line">300</div><div class="line">301</div><div class="line">302</div><div class="line">303</div><div class="line">304</div><div class="line">305</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"> * Measures the children when the orientation of this LinearLayout is set</div><div class="line"> * to &#123;<span class="doctag">@link</span> #VERTICAL&#125;.</div><div class="line"> *</div><div class="line"> * <span class="doctag">@param</span> widthMeasureSpec Horizontal space requirements as imposed by the parent.</div><div class="line"> * <span class="doctag">@param</span> heightMeasureSpec Vertical space requirements as imposed by the parent.</div><div class="line"> *</div><div class="line"> * <span class="doctag">@see</span> #getOrientation()</div><div class="line"> * <span class="doctag">@see</span> #setOrientation(int)</div><div class="line"> * <span class="doctag">@see</span> #onMeasure(int, int)</div><div class="line"> */</div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">measureVertical</span><span class="params">(<span class="keyword">int</span> widthMeasureSpec, <span class="keyword">int</span> heightMeasureSpec)</span> </span>&#123;</div><div class="line">    mTotalLength = <span class="number">0</span>;</div><div class="line">    <span class="keyword">int</span> maxWidth = <span class="number">0</span>;</div><div class="line">    <span class="keyword">int</span> childState = <span class="number">0</span>;</div><div class="line">    <span class="keyword">int</span> alternativeMaxWidth = <span class="number">0</span>;</div><div class="line">    <span class="keyword">int</span> weightedMaxWidth = <span class="number">0</span>;</div><div class="line">    <span class="keyword">boolean</span> allFillParent = <span class="keyword">true</span>;</div><div class="line">    <span class="keyword">float</span> totalWeight = <span class="number">0</span>; <span class="comment">// 初始化0</span></div><div class="line">    <span class="comment">// 获取子View的个数</span></div><div class="line">    <span class="keyword">final</span> <span class="keyword">int</span> count = getVirtualChildCount();</div><div class="line">    </div><div class="line">    <span class="keyword">final</span> <span class="keyword">int</span> widthMode = MeasureSpec.getMode(widthMeasureSpec);</div><div class="line">    <span class="keyword">final</span> <span class="keyword">int</span> heightMode = MeasureSpec.getMode(heightMeasureSpec);</div><div class="line"></div><div class="line">    <span class="keyword">boolean</span> matchWidth = <span class="keyword">false</span>;</div><div class="line">    <span class="keyword">boolean</span> skippedMeasure = <span class="keyword">false</span>;</div><div class="line"></div><div class="line">    <span class="keyword">final</span> <span class="keyword">int</span> baselineChildIndex = mBaselineAlignedChildIndex;        </div><div class="line">    <span class="keyword">final</span> <span class="keyword">boolean</span> useLargestChild = mUseLargestChild;</div><div class="line"></div><div class="line">    <span class="keyword">int</span> largestChildHeight = Integer.MIN_VALUE;</div><div class="line">    <span class="keyword">int</span> consumedExcessSpace = <span class="number">0</span>;</div><div class="line"></div><div class="line">    <span class="comment">// See how tall everyone is. Also remember max width.</span></div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; count; ++i) &#123;</div><div class="line">        <span class="keyword">final</span> View child = getVirtualChildAt(i);</div><div class="line">        <span class="keyword">if</span> (child == <span class="keyword">null</span>) &#123;</div><div class="line">            mTotalLength += measureNullChild(i);</div><div class="line">            <span class="keyword">continue</span>;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="keyword">if</span> (child.getVisibility() == View.GONE) &#123;</div><div class="line">           i += getChildrenSkipCount(child, i);</div><div class="line">           <span class="keyword">continue</span>;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="keyword">if</span> (hasDividerBeforeChildAt(i)) &#123;</div><div class="line">            mTotalLength += mDividerHeight;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="keyword">final</span> LayoutParams lp = (LayoutParams) child.getLayoutParams();</div><div class="line">        <span class="comment">// 如果都没有设置weight，则还是0，下面的布尔值为false</span></div><div class="line">        totalWeight += lp.weight;</div><div class="line"></div><div class="line">        <span class="keyword">final</span> <span class="keyword">boolean</span> useExcessSpace = lp.height == <span class="number">0</span> &amp;&amp; lp.weight &gt; <span class="number">0</span>;</div><div class="line">        <span class="keyword">if</span> (heightMode == MeasureSpec.EXACTLY &amp;&amp; useExcessSpace) &#123;</div><div class="line">            <span class="comment">// Optimization: don't bother measuring children who are only</span></div><div class="line">            <span class="comment">// laid out using excess space. These views will get measured</span></div><div class="line">            <span class="comment">// later if we have space to distribute.</span></div><div class="line">            <span class="keyword">final</span> <span class="keyword">int</span> totalLength = mTotalLength;</div><div class="line">            mTotalLength = Math.max(totalLength, totalLength + lp.topMargin + lp.bottomMargin);</div><div class="line">            skippedMeasure = <span class="keyword">true</span>;</div><div class="line">        &#125; <span class="keyword">else</span> &#123;</div><div class="line">            <span class="keyword">if</span> (useExcessSpace) &#123;</div><div class="line">                <span class="comment">// The heightMode is either UNSPECIFIED or AT_MOST, and</span></div><div class="line">                <span class="comment">// this child is only laid out using excess space. Measure</span></div><div class="line">                <span class="comment">// using WRAP_CONTENT so that we can find out the view's</span></div><div class="line">                <span class="comment">// optimal height. We'll restore the original height of 0</span></div><div class="line">                <span class="comment">// after measurement.</span></div><div class="line">                lp.height = LayoutParams.WRAP_CONTENT;</div><div class="line">            &#125;</div><div class="line"></div><div class="line">            <span class="comment">// Determine how big this child would like to be. If this or</span></div><div class="line">            <span class="comment">// previous children have given a weight, then we allow it to</span></div><div class="line">            <span class="comment">// use all available space (and we will shrink things later</span></div><div class="line">            <span class="comment">// if needed).</span></div><div class="line">            <span class="keyword">final</span> <span class="keyword">int</span> usedHeight = totalWeight == <span class="number">0</span> ? mTotalLength : <span class="number">0</span>;</div><div class="line">            <span class="comment">// 第一次测量</span></div><div class="line">            measureChildBeforeLayout(child, i, widthMeasureSpec, <span class="number">0</span>, </div><div class="line">                    heightMeasureSpec, usedHeight); </div><div class="line"></div><div class="line">            <span class="keyword">final</span> <span class="keyword">int</span> childHeight = child.getMeasuredHeight();</div><div class="line">            <span class="keyword">if</span> (useExcessSpace) &#123;</div><div class="line">                <span class="comment">// Restore the original height and record how much space</span></div><div class="line">                <span class="comment">// we've allocated to excess-only children so that we can</span></div><div class="line">                <span class="comment">// match the behavior of EXACTLY measurement.</span></div><div class="line">                lp.height = <span class="number">0</span>;</div><div class="line">                consumedExcessSpace += childHeight;</div><div class="line">            &#125;</div><div class="line"></div><div class="line">            <span class="keyword">final</span> <span class="keyword">int</span> totalLength = mTotalLength;</div><div class="line">            mTotalLength = Math.max(totalLength, totalLength + childHeight + lp.topMargin +</div><div class="line">                   lp.bottomMargin + getNextLocationOffset(child));</div><div class="line"></div><div class="line">            <span class="keyword">if</span> (useLargestChild) &#123;</div><div class="line">                largestChildHeight = Math.max(childHeight, largestChildHeight);</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="comment">/**</span></div><div class="line">         * If applicable, compute the additional offset to the child's baseline</div><div class="line">         * we'll need later when asked &#123;<span class="doctag">@link</span> #getBaseline&#125;.</div><div class="line">         */</div><div class="line">        <span class="keyword">if</span> ((baselineChildIndex &gt;= <span class="number">0</span>) &amp;&amp; (baselineChildIndex == i + <span class="number">1</span>)) &#123;</div><div class="line">           mBaselineChildTop = mTotalLength;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="comment">// if we are trying to use a child index for our baseline, the above</span></div><div class="line">        <span class="comment">// book keeping only works if there are no children above it with</span></div><div class="line">        <span class="comment">// weight.  fail fast to aid the developer.</span></div><div class="line">        <span class="keyword">if</span> (i &lt; baselineChildIndex &amp;&amp; lp.weight &gt; <span class="number">0</span>) &#123;</div><div class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(<span class="string">"A child of LinearLayout with index "</span></div><div class="line">                    + <span class="string">"less than mBaselineAlignedChildIndex has weight &gt; 0, which "</span></div><div class="line">                    + <span class="string">"won't work.  Either remove the weight, or don't set "</span></div><div class="line">                    + <span class="string">"mBaselineAlignedChildIndex."</span>);</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="keyword">boolean</span> matchWidthLocally = <span class="keyword">false</span>;</div><div class="line">        <span class="keyword">if</span> (widthMode != MeasureSpec.EXACTLY &amp;&amp; lp.width == LayoutParams.MATCH_PARENT) &#123;</div><div class="line">            <span class="comment">// The width of the linear layout will scale, and at least one</span></div><div class="line">            <span class="comment">// child said it wanted to match our width. Set a flag</span></div><div class="line">            <span class="comment">// indicating that we need to remeasure at least that view when</span></div><div class="line">            <span class="comment">// we know our width.</span></div><div class="line">            matchWidth = <span class="keyword">true</span>;</div><div class="line">            matchWidthLocally = <span class="keyword">true</span>;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="keyword">final</span> <span class="keyword">int</span> margin = lp.leftMargin + lp.rightMargin;</div><div class="line">        <span class="keyword">final</span> <span class="keyword">int</span> measuredWidth = child.getMeasuredWidth() + margin;</div><div class="line">        maxWidth = Math.max(maxWidth, measuredWidth);</div><div class="line">        childState = combineMeasuredStates(childState, child.getMeasuredState());</div><div class="line"></div><div class="line">        allFillParent = allFillParent &amp;&amp; lp.width == LayoutParams.MATCH_PARENT;</div><div class="line">        <span class="keyword">if</span> (lp.weight &gt; <span class="number">0</span>) &#123;</div><div class="line">            <span class="comment">/*</span></div><div class="line">             * Widths of weighted Views are bogus if we end up</div><div class="line">             * remeasuring, so keep them separate.</div><div class="line">             */</div><div class="line">            weightedMaxWidth = Math.max(weightedMaxWidth,</div><div class="line">                    matchWidthLocally ? margin : measuredWidth);</div><div class="line">        &#125; <span class="keyword">else</span> &#123;</div><div class="line">            alternativeMaxWidth = Math.max(alternativeMaxWidth,</div><div class="line">                    matchWidthLocally ? margin : measuredWidth);</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        i += getChildrenSkipCount(child, i);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">if</span> (mTotalLength &gt; <span class="number">0</span> &amp;&amp; hasDividerBeforeChildAt(count)) &#123;</div><div class="line">        mTotalLength += mDividerHeight;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">if</span> (useLargestChild &amp;&amp;</div><div class="line">            (heightMode == MeasureSpec.AT_MOST || heightMode == MeasureSpec.UNSPECIFIED)) &#123;</div><div class="line">        mTotalLength = <span class="number">0</span>;</div><div class="line"></div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; count; ++i) &#123;</div><div class="line">            <span class="keyword">final</span> View child = getVirtualChildAt(i);</div><div class="line">            <span class="keyword">if</span> (child == <span class="keyword">null</span>) &#123;</div><div class="line">                mTotalLength += measureNullChild(i);</div><div class="line">                <span class="keyword">continue</span>;</div><div class="line">            &#125;</div><div class="line"></div><div class="line">            <span class="keyword">if</span> (child.getVisibility() == GONE) &#123;</div><div class="line">                i += getChildrenSkipCount(child, i);</div><div class="line">                <span class="keyword">continue</span>;</div><div class="line">            &#125;</div><div class="line"></div><div class="line">            <span class="keyword">final</span> LinearLayout.LayoutParams lp = (LinearLayout.LayoutParams)</div><div class="line">                    child.getLayoutParams();</div><div class="line">            <span class="comment">// Account for negative margins</span></div><div class="line">            <span class="keyword">final</span> <span class="keyword">int</span> totalLength = mTotalLength;</div><div class="line">            mTotalLength = Math.max(totalLength, totalLength + largestChildHeight +</div><div class="line">                    lp.topMargin + lp.bottomMargin + getNextLocationOffset(child));</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">// Add in our padding</span></div><div class="line">    mTotalLength += mPaddingTop + mPaddingBottom;</div><div class="line"></div><div class="line">    <span class="keyword">int</span> heightSize = mTotalLength;</div><div class="line"></div><div class="line">    <span class="comment">// Check against our minimum height</span></div><div class="line">    heightSize = Math.max(heightSize, getSuggestedMinimumHeight());</div><div class="line">    </div><div class="line">    <span class="comment">// Reconcile our calculated size with the heightMeasureSpec</span></div><div class="line">    <span class="keyword">int</span> heightSizeAndState = resolveSizeAndState(heightSize, heightMeasureSpec, <span class="number">0</span>);</div><div class="line">    heightSize = heightSizeAndState &amp; MEASURED_SIZE_MASK;</div><div class="line">    </div><div class="line">    <span class="comment">// Either expand children with weight to take up available space or</span></div><div class="line">    <span class="comment">// shrink them if they extend beyond our current bounds. If we skipped</span></div><div class="line">    <span class="comment">// measurement on any children, we need to measure them now.</span></div><div class="line">    <span class="keyword">int</span> remainingExcess = heightSize - mTotalLength</div><div class="line">            + (mAllowInconsistentMeasurement ? <span class="number">0</span> : consumedExcessSpace);</div><div class="line">    <span class="keyword">if</span> (skippedMeasure || remainingExcess != <span class="number">0</span> &amp;&amp; totalWeight &gt; <span class="number">0.0f</span>) &#123;</div><div class="line">        <span class="keyword">float</span> remainingWeightSum = mWeightSum &gt; <span class="number">0.0f</span> ? mWeightSum : totalWeight;</div><div class="line"></div><div class="line">        mTotalLength = <span class="number">0</span>;</div><div class="line"></div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; count; ++i) &#123;</div><div class="line">            <span class="keyword">final</span> View child = getVirtualChildAt(i);</div><div class="line">            <span class="keyword">if</span> (child == <span class="keyword">null</span> || child.getVisibility() == View.GONE) &#123;</div><div class="line">                <span class="keyword">continue</span>;</div><div class="line">            &#125;</div><div class="line"></div><div class="line">            <span class="keyword">final</span> LayoutParams lp = (LayoutParams) child.getLayoutParams();</div><div class="line">            <span class="keyword">final</span> <span class="keyword">float</span> childWeight = lp.weight;</div><div class="line">            <span class="keyword">if</span> (childWeight &gt; <span class="number">0</span>) &#123;</div><div class="line">                <span class="keyword">final</span> <span class="keyword">int</span> share = (<span class="keyword">int</span>) (childWeight * remainingExcess / remainingWeightSum);</div><div class="line">                remainingExcess -= share;</div><div class="line">                remainingWeightSum -= childWeight;</div><div class="line"></div><div class="line">                <span class="keyword">final</span> <span class="keyword">int</span> childHeight;</div><div class="line">                <span class="keyword">if</span> (mUseLargestChild &amp;&amp; heightMode != MeasureSpec.EXACTLY) &#123;</div><div class="line">                    childHeight = largestChildHeight;</div><div class="line">                &#125; <span class="keyword">else</span> <span class="keyword">if</span> (lp.height == <span class="number">0</span> &amp;&amp; (!mAllowInconsistentMeasurement</div><div class="line">                        || heightMode == MeasureSpec.EXACTLY)) &#123;</div><div class="line">                    <span class="comment">// This child needs to be laid out from scratch using</span></div><div class="line">                    <span class="comment">// only its share of excess space.</span></div><div class="line">                    childHeight = share;</div><div class="line">                &#125; <span class="keyword">else</span> &#123;</div><div class="line">                    <span class="comment">// This child had some intrinsic height to which we</span></div><div class="line">                    <span class="comment">// need to add its share of excess space.</span></div><div class="line">                    childHeight = child.getMeasuredHeight() + share;</div><div class="line">                &#125;</div><div class="line"></div><div class="line">                <span class="keyword">final</span> <span class="keyword">int</span> childHeightMeasureSpec = MeasureSpec.makeMeasureSpec(</div><div class="line">                        Math.max(<span class="number">0</span>, childHeight), MeasureSpec.EXACTLY);</div><div class="line">                <span class="keyword">final</span> <span class="keyword">int</span> childWidthMeasureSpec = getChildMeasureSpec(widthMeasureSpec,</div><div class="line">                        mPaddingLeft + mPaddingRight + lp.leftMargin + lp.rightMargin,</div><div class="line">                        lp.width);</div><div class="line">                <span class="comment">// 第二次测量</span></div><div class="line">                child.measure(childWidthMeasureSpec, childHeightMeasureSpec);</div><div class="line"></div><div class="line">                <span class="comment">// Child may now not fit in vertical dimension.</span></div><div class="line">                childState = combineMeasuredStates(childState, child.getMeasuredState()</div><div class="line">                        &amp; (MEASURED_STATE_MASK&gt;&gt;MEASURED_HEIGHT_STATE_SHIFT));</div><div class="line">            &#125;</div><div class="line"></div><div class="line">            <span class="keyword">final</span> <span class="keyword">int</span> margin =  lp.leftMargin + lp.rightMargin;</div><div class="line">            <span class="keyword">final</span> <span class="keyword">int</span> measuredWidth = child.getMeasuredWidth() + margin;</div><div class="line">            maxWidth = Math.max(maxWidth, measuredWidth);</div><div class="line"></div><div class="line">            <span class="keyword">boolean</span> matchWidthLocally = widthMode != MeasureSpec.EXACTLY &amp;&amp;</div><div class="line">                    lp.width == LayoutParams.MATCH_PARENT;</div><div class="line"></div><div class="line">            alternativeMaxWidth = Math.max(alternativeMaxWidth,</div><div class="line">                    matchWidthLocally ? margin : measuredWidth);</div><div class="line"></div><div class="line">            allFillParent = allFillParent &amp;&amp; lp.width == LayoutParams.MATCH_PARENT;</div><div class="line"></div><div class="line">            <span class="keyword">final</span> <span class="keyword">int</span> totalLength = mTotalLength;</div><div class="line">            mTotalLength = Math.max(totalLength, totalLength + child.getMeasuredHeight() +</div><div class="line">                    lp.topMargin + lp.bottomMargin + getNextLocationOffset(child));</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="comment">// Add in our padding</span></div><div class="line">        mTotalLength += mPaddingTop + mPaddingBottom;</div><div class="line">        <span class="comment">// <span class="doctag">TODO:</span> Should we recompute the heightSpec based on the new total length?</span></div><div class="line">    &#125; <span class="keyword">else</span> &#123;</div><div class="line">        alternativeMaxWidth = Math.max(alternativeMaxWidth,</div><div class="line">                                       weightedMaxWidth);</div><div class="line"></div><div class="line"></div><div class="line">        <span class="comment">// We have no limit, so make all weighted views as tall as the largest child.</span></div><div class="line">        <span class="comment">// Children will have already been measured once.</span></div><div class="line">        <span class="keyword">if</span> (useLargestChild &amp;&amp; heightMode != MeasureSpec.EXACTLY) &#123;</div><div class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; count; i++) &#123;</div><div class="line">                <span class="keyword">final</span> View child = getVirtualChildAt(i);</div><div class="line">                <span class="keyword">if</span> (child == <span class="keyword">null</span> || child.getVisibility() == View.GONE) &#123;</div><div class="line">                    <span class="keyword">continue</span>;</div><div class="line">                &#125;</div><div class="line"></div><div class="line">                <span class="keyword">final</span> LinearLayout.LayoutParams lp =</div><div class="line">                        (LinearLayout.LayoutParams) child.getLayoutParams();</div><div class="line"></div><div class="line">                <span class="keyword">float</span> childExtra = lp.weight;</div><div class="line">                <span class="keyword">if</span> (childExtra &gt; <span class="number">0</span>) &#123;</div><div class="line">                    child.measure(</div><div class="line">                            MeasureSpec.makeMeasureSpec(child.getMeasuredWidth(),</div><div class="line">                                    MeasureSpec.EXACTLY),</div><div class="line">                            MeasureSpec.makeMeasureSpec(largestChildHeight,</div><div class="line">                                    MeasureSpec.EXACTLY));</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">if</span> (!allFillParent &amp;&amp; widthMode != MeasureSpec.EXACTLY) &#123;</div><div class="line">        maxWidth = alternativeMaxWidth;</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    maxWidth += mPaddingLeft + mPaddingRight;</div><div class="line"></div><div class="line">    <span class="comment">// Check against our minimum width</span></div><div class="line">    maxWidth = Math.max(maxWidth, getSuggestedMinimumWidth());</div><div class="line">    </div><div class="line">    setMeasuredDimension(resolveSizeAndState(maxWidth, widthMeasureSpec, childState),</div><div class="line">            heightSizeAndState);</div><div class="line"></div><div class="line">    <span class="keyword">if</span> (matchWidth) &#123;</div><div class="line">        forceUniformWidth(count, heightMeasureSpec);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>可以发现，Linearlayout会先对所有的子View进行计算totalWeight（所有子View的weight属性之和），然后判断子View的weight属性是否为最大，如为最大则将剩余的空间分配给它。如果不使用weight的话，则不会进行第二次measure的操作。</p>
<h5 id="来看下RelativeLayout的onMeasure源码"><a href="#来看下RelativeLayout的onMeasure源码" class="headerlink" title="来看下RelativeLayout的onMeasure源码"></a>来看下RelativeLayout的<code>onMeasure</code>源码</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div><div class="line">129</div><div class="line">130</div><div class="line">131</div><div class="line">132</div><div class="line">133</div><div class="line">134</div><div class="line">135</div><div class="line">136</div><div class="line">137</div><div class="line">138</div><div class="line">139</div><div class="line">140</div><div class="line">141</div><div class="line">142</div><div class="line">143</div><div class="line">144</div><div class="line">145</div><div class="line">146</div><div class="line">147</div><div class="line">148</div><div class="line">149</div><div class="line">150</div><div class="line">151</div><div class="line">152</div><div class="line">153</div><div class="line">154</div><div class="line">155</div><div class="line">156</div><div class="line">157</div><div class="line">158</div><div class="line">159</div><div class="line">160</div><div class="line">161</div><div class="line">162</div><div class="line">163</div><div class="line">164</div><div class="line">165</div><div class="line">166</div><div class="line">167</div><div class="line">168</div><div class="line">169</div><div class="line">170</div><div class="line">171</div><div class="line">172</div><div class="line">173</div><div class="line">174</div><div class="line">175</div><div class="line">176</div><div class="line">177</div><div class="line">178</div><div class="line">179</div><div class="line">180</div><div class="line">181</div><div class="line">182</div><div class="line">183</div><div class="line">184</div><div class="line">185</div><div class="line">186</div><div class="line">187</div><div class="line">188</div><div class="line">189</div><div class="line">190</div><div class="line">191</div><div class="line">192</div><div class="line">193</div><div class="line">194</div><div class="line">195</div><div class="line">196</div><div class="line">197</div><div class="line">198</div><div class="line">199</div><div class="line">200</div><div class="line">201</div><div class="line">202</div><div class="line">203</div><div class="line">204</div><div class="line">205</div><div class="line">206</div><div class="line">207</div><div class="line">208</div><div class="line">209</div><div class="line">210</div><div class="line">211</div><div class="line">212</div><div class="line">213</div><div class="line">214</div><div class="line">215</div><div class="line">216</div><div class="line">217</div><div class="line">218</div><div class="line">219</div><div class="line">220</div><div class="line">221</div><div class="line">222</div><div class="line">223</div><div class="line">224</div><div class="line">225</div><div class="line">226</div><div class="line">227</div><div class="line">228</div><div class="line">229</div><div class="line">230</div><div class="line">231</div><div class="line">232</div><div class="line">233</div><div class="line">234</div><div class="line">235</div><div class="line">236</div><div class="line">237</div><div class="line">238</div><div class="line">239</div><div class="line">240</div><div class="line">241</div><div class="line">242</div><div class="line">243</div><div class="line">244</div><div class="line">245</div><div class="line">246</div><div class="line">247</div><div class="line">248</div><div class="line">249</div><div class="line">250</div><div class="line">251</div><div class="line">252</div><div class="line">253</div><div class="line">254</div><div class="line">255</div><div class="line">256</div><div class="line">257</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Override</span></div><div class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onMeasure</span><span class="params">(<span class="keyword">int</span> widthMeasureSpec, <span class="keyword">int</span> heightMeasureSpec)</span> </span>&#123;</div><div class="line">    <span class="keyword">if</span> (mDirtyHierarchy) &#123;</div><div class="line">        mDirtyHierarchy = <span class="keyword">false</span>;</div><div class="line">        sortChildren();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">int</span> myWidth = -<span class="number">1</span>;</div><div class="line">    <span class="keyword">int</span> myHeight = -<span class="number">1</span>;</div><div class="line"></div><div class="line">    <span class="keyword">int</span> width = <span class="number">0</span>;</div><div class="line">    <span class="keyword">int</span> height = <span class="number">0</span>;</div><div class="line"></div><div class="line">    <span class="keyword">final</span> <span class="keyword">int</span> widthMode = MeasureSpec.getMode(widthMeasureSpec);</div><div class="line">    <span class="keyword">final</span> <span class="keyword">int</span> heightMode = MeasureSpec.getMode(heightMeasureSpec);</div><div class="line">    <span class="keyword">final</span> <span class="keyword">int</span> widthSize = MeasureSpec.getSize(widthMeasureSpec);</div><div class="line">    <span class="keyword">final</span> <span class="keyword">int</span> heightSize = MeasureSpec.getSize(heightMeasureSpec);</div><div class="line"></div><div class="line">    <span class="comment">// Record our dimensions if they are known;</span></div><div class="line">    <span class="keyword">if</span> (widthMode != MeasureSpec.UNSPECIFIED) &#123;</div><div class="line">        myWidth = widthSize;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">if</span> (heightMode != MeasureSpec.UNSPECIFIED) &#123;</div><div class="line">        myHeight = heightSize;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">if</span> (widthMode == MeasureSpec.EXACTLY) &#123;</div><div class="line">        width = myWidth;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">if</span> (heightMode == MeasureSpec.EXACTLY) &#123;</div><div class="line">        height = myHeight;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    View ignore = <span class="keyword">null</span>;</div><div class="line">    <span class="keyword">int</span> gravity = mGravity &amp; Gravity.RELATIVE_HORIZONTAL_GRAVITY_MASK;</div><div class="line">    <span class="keyword">final</span> <span class="keyword">boolean</span> horizontalGravity = gravity != Gravity.START &amp;&amp; gravity != <span class="number">0</span>;</div><div class="line">    gravity = mGravity &amp; Gravity.VERTICAL_GRAVITY_MASK;</div><div class="line">    <span class="keyword">final</span> <span class="keyword">boolean</span> verticalGravity = gravity != Gravity.TOP &amp;&amp; gravity != <span class="number">0</span>;</div><div class="line"></div><div class="line">    <span class="keyword">int</span> left = Integer.MAX_VALUE;</div><div class="line">    <span class="keyword">int</span> top = Integer.MAX_VALUE;</div><div class="line">    <span class="keyword">int</span> right = Integer.MIN_VALUE;</div><div class="line">    <span class="keyword">int</span> bottom = Integer.MIN_VALUE;</div><div class="line"></div><div class="line">    <span class="keyword">boolean</span> offsetHorizontalAxis = <span class="keyword">false</span>;</div><div class="line">    <span class="keyword">boolean</span> offsetVerticalAxis = <span class="keyword">false</span>;</div><div class="line"></div><div class="line">    <span class="keyword">if</span> ((horizontalGravity || verticalGravity) &amp;&amp; mIgnoreGravity != View.NO_ID) &#123;</div><div class="line">        ignore = findViewById(mIgnoreGravity);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">final</span> <span class="keyword">boolean</span> isWrapContentWidth = widthMode != MeasureSpec.EXACTLY;</div><div class="line">    <span class="keyword">final</span> <span class="keyword">boolean</span> isWrapContentHeight = heightMode != MeasureSpec.EXACTLY;</div><div class="line"></div><div class="line">    <span class="comment">// We need to know our size for doing the correct computation of children positioning in RTL</span></div><div class="line">    <span class="comment">// mode but there is no practical way to get it instead of running the code below.</span></div><div class="line">    <span class="comment">// So, instead of running the code twice, we just set the width to a "default display width"</span></div><div class="line">    <span class="comment">// before the computation and then, as a last pass, we will update their real position with</span></div><div class="line">    <span class="comment">// an offset equals to "DEFAULT_WIDTH - width".</span></div><div class="line">    <span class="keyword">final</span> <span class="keyword">int</span> layoutDirection = getLayoutDirection();</div><div class="line">    <span class="keyword">if</span> (isLayoutRtl() &amp;&amp; myWidth == -<span class="number">1</span>) &#123;</div><div class="line">        myWidth = DEFAULT_WIDTH;</div><div class="line">    &#125;</div><div class="line">    <span class="comment">// 获取横向的子View</span></div><div class="line">    View[] views = mSortedHorizontalChildren;</div><div class="line">    <span class="keyword">int</span> count = views.length;</div><div class="line"></div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; count; i++) &#123;</div><div class="line">        View child = views[i];</div><div class="line">        <span class="keyword">if</span> (child.getVisibility() != GONE) &#123;</div><div class="line">            LayoutParams params = (LayoutParams) child.getLayoutParams();</div><div class="line">            <span class="keyword">int</span>[] rules = params.getRules(layoutDirection);</div><div class="line"></div><div class="line">            applyHorizontalSizeRules(params, myWidth, rules);</div><div class="line">            <span class="comment">// 横向测量子View</span></div><div class="line">            measureChildHorizontal(child, params, myWidth, myHeight);</div><div class="line"></div><div class="line">            <span class="keyword">if</span> (positionChildHorizontal(child, params, myWidth, isWrapContentWidth)) &#123;</div><div class="line">                offsetHorizontalAxis = <span class="keyword">true</span>;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="comment">// 获取纵向的子View</span></div><div class="line">    views = mSortedVerticalChildren;</div><div class="line">    count = views.length;</div><div class="line">    <span class="keyword">final</span> <span class="keyword">int</span> targetSdkVersion = getContext().getApplicationInfo().targetSdkVersion;</div><div class="line"></div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; count; i++) &#123;</div><div class="line">        <span class="keyword">final</span> View child = views[i];</div><div class="line">        <span class="keyword">if</span> (child.getVisibility() != GONE) &#123;</div><div class="line">            <span class="keyword">final</span> LayoutParams params = (LayoutParams) child.getLayoutParams();</div><div class="line"></div><div class="line">            applyVerticalSizeRules(params, myHeight, child.getBaseline());</div><div class="line">            <span class="comment">// 纵向测量子View</span></div><div class="line">            measureChild(child, params, myWidth, myHeight);</div><div class="line">            <span class="keyword">if</span> (positionChildVertical(child, params, myHeight, isWrapContentHeight)) &#123;</div><div class="line">                offsetVerticalAxis = <span class="keyword">true</span>;</div><div class="line">            &#125;</div><div class="line"></div><div class="line">            <span class="keyword">if</span> (isWrapContentWidth) &#123;</div><div class="line">                <span class="keyword">if</span> (isLayoutRtl()) &#123;</div><div class="line">                    <span class="keyword">if</span> (targetSdkVersion &lt; Build.VERSION_CODES.KITKAT) &#123;</div><div class="line">                        width = Math.max(width, myWidth - params.mLeft);</div><div class="line">                    &#125; <span class="keyword">else</span> &#123;</div><div class="line">                        width = Math.max(width, myWidth - params.mLeft - params.leftMargin);</div><div class="line">                    &#125;</div><div class="line">                &#125; <span class="keyword">else</span> &#123;</div><div class="line">                    <span class="keyword">if</span> (targetSdkVersion &lt; Build.VERSION_CODES.KITKAT) &#123;</div><div class="line">                        width = Math.max(width, params.mRight);</div><div class="line">                    &#125; <span class="keyword">else</span> &#123;</div><div class="line">                        width = Math.max(width, params.mRight + params.rightMargin);</div><div class="line">                    &#125;</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line"></div><div class="line">            <span class="keyword">if</span> (isWrapContentHeight) &#123;</div><div class="line">                <span class="keyword">if</span> (targetSdkVersion &lt; Build.VERSION_CODES.KITKAT) &#123;</div><div class="line">                    height = Math.max(height, params.mBottom);</div><div class="line">                &#125; <span class="keyword">else</span> &#123;</div><div class="line">                    height = Math.max(height, params.mBottom + params.bottomMargin);</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line"></div><div class="line">            <span class="keyword">if</span> (child != ignore || verticalGravity) &#123;</div><div class="line">                left = Math.min(left, params.mLeft - params.leftMargin);</div><div class="line">                top = Math.min(top, params.mTop - params.topMargin);</div><div class="line">            &#125;</div><div class="line"></div><div class="line">            <span class="keyword">if</span> (child != ignore || horizontalGravity) &#123;</div><div class="line">                right = Math.max(right, params.mRight + params.rightMargin);</div><div class="line">                bottom = Math.max(bottom, params.mBottom + params.bottomMargin);</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">// Use the top-start-most laid out view as the baseline. RTL offsets are</span></div><div class="line">    <span class="comment">// applied later, so we can use the left-most edge as the starting edge.</span></div><div class="line">    View baselineView = <span class="keyword">null</span>;</div><div class="line">    LayoutParams baselineParams = <span class="keyword">null</span>;</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; count; i++) &#123;</div><div class="line">        <span class="keyword">final</span> View child = views[i];</div><div class="line">        <span class="keyword">if</span> (child.getVisibility() != GONE) &#123;</div><div class="line">            <span class="keyword">final</span> LayoutParams childParams = (LayoutParams) child.getLayoutParams();</div><div class="line">            <span class="keyword">if</span> (baselineView == <span class="keyword">null</span> || baselineParams == <span class="keyword">null</span></div><div class="line">                    || compareLayoutPosition(childParams, baselineParams) &lt; <span class="number">0</span>) &#123;</div><div class="line">                baselineView = child;</div><div class="line">                baselineParams = childParams;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    mBaselineView = baselineView;</div><div class="line"></div><div class="line">    <span class="keyword">if</span> (isWrapContentWidth) &#123;</div><div class="line">        <span class="comment">// Width already has left padding in it since it was calculated by looking at</span></div><div class="line">        <span class="comment">// the right of each child view</span></div><div class="line">        width += mPaddingRight;</div><div class="line"></div><div class="line">        <span class="keyword">if</span> (mLayoutParams != <span class="keyword">null</span> &amp;&amp; mLayoutParams.width &gt;= <span class="number">0</span>) &#123;</div><div class="line">            width = Math.max(width, mLayoutParams.width);</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        width = Math.max(width, getSuggestedMinimumWidth());</div><div class="line">        width = resolveSize(width, widthMeasureSpec);</div><div class="line"></div><div class="line">        <span class="keyword">if</span> (offsetHorizontalAxis) &#123;</div><div class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; count; i++) &#123;</div><div class="line">                <span class="keyword">final</span> View child = views[i];</div><div class="line">                <span class="keyword">if</span> (child.getVisibility() != GONE) &#123;</div><div class="line">                    <span class="keyword">final</span> LayoutParams params = (LayoutParams) child.getLayoutParams();</div><div class="line">                    <span class="keyword">final</span> <span class="keyword">int</span>[] rules = params.getRules(layoutDirection);</div><div class="line">                    <span class="keyword">if</span> (rules[CENTER_IN_PARENT] != <span class="number">0</span> || rules[CENTER_HORIZONTAL] != <span class="number">0</span>) &#123;</div><div class="line">                        centerHorizontal(child, params, width);</div><div class="line">                    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (rules[ALIGN_PARENT_RIGHT] != <span class="number">0</span>) &#123;</div><div class="line">                        <span class="keyword">final</span> <span class="keyword">int</span> childWidth = child.getMeasuredWidth();</div><div class="line">                        params.mLeft = width - mPaddingRight - childWidth;</div><div class="line">                        params.mRight = params.mLeft + childWidth;</div><div class="line">                    &#125;</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">if</span> (isWrapContentHeight) &#123;</div><div class="line">        <span class="comment">// Height already has top padding in it since it was calculated by looking at</span></div><div class="line">        <span class="comment">// the bottom of each child view</span></div><div class="line">        height += mPaddingBottom;</div><div class="line"></div><div class="line">        <span class="keyword">if</span> (mLayoutParams != <span class="keyword">null</span> &amp;&amp; mLayoutParams.height &gt;= <span class="number">0</span>) &#123;</div><div class="line">            height = Math.max(height, mLayoutParams.height);</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        height = Math.max(height, getSuggestedMinimumHeight());</div><div class="line">        height = resolveSize(height, heightMeasureSpec);</div><div class="line"></div><div class="line">        <span class="keyword">if</span> (offsetVerticalAxis) &#123;</div><div class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; count; i++) &#123;</div><div class="line">                <span class="keyword">final</span> View child = views[i];</div><div class="line">                <span class="keyword">if</span> (child.getVisibility() != GONE) &#123;</div><div class="line">                    <span class="keyword">final</span> LayoutParams params = (LayoutParams) child.getLayoutParams();</div><div class="line">                    <span class="keyword">final</span> <span class="keyword">int</span>[] rules = params.getRules(layoutDirection);</div><div class="line">                    <span class="keyword">if</span> (rules[CENTER_IN_PARENT] != <span class="number">0</span> || rules[CENTER_VERTICAL] != <span class="number">0</span>) &#123;</div><div class="line">                        centerVertical(child, params, height);</div><div class="line">                    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (rules[ALIGN_PARENT_BOTTOM] != <span class="number">0</span>) &#123;</div><div class="line">                        <span class="keyword">final</span> <span class="keyword">int</span> childHeight = child.getMeasuredHeight();</div><div class="line">                        params.mTop = height - mPaddingBottom - childHeight;</div><div class="line">                        params.mBottom = params.mTop + childHeight;</div><div class="line">                    &#125;</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">if</span> (horizontalGravity || verticalGravity) &#123;</div><div class="line">        <span class="keyword">final</span> Rect selfBounds = mSelfBounds;</div><div class="line">        selfBounds.set(mPaddingLeft, mPaddingTop, width - mPaddingRight,</div><div class="line">                height - mPaddingBottom);</div><div class="line"></div><div class="line">        <span class="keyword">final</span> Rect contentBounds = mContentBounds;</div><div class="line">        Gravity.apply(mGravity, right - left, bottom - top, selfBounds, contentBounds,</div><div class="line">                layoutDirection);</div><div class="line"></div><div class="line">        <span class="keyword">final</span> <span class="keyword">int</span> horizontalOffset = contentBounds.left - left;</div><div class="line">        <span class="keyword">final</span> <span class="keyword">int</span> verticalOffset = contentBounds.top - top;</div><div class="line">        <span class="keyword">if</span> (horizontalOffset != <span class="number">0</span> || verticalOffset != <span class="number">0</span>) &#123;</div><div class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; count; i++) &#123;</div><div class="line">                <span class="keyword">final</span> View child = views[i];</div><div class="line">                <span class="keyword">if</span> (child.getVisibility() != GONE &amp;&amp; child != ignore) &#123;</div><div class="line">                    <span class="keyword">final</span> LayoutParams params = (LayoutParams) child.getLayoutParams();</div><div class="line">                    <span class="keyword">if</span> (horizontalGravity) &#123;</div><div class="line">                        params.mLeft += horizontalOffset;</div><div class="line">                        params.mRight += horizontalOffset;</div><div class="line">                    &#125;</div><div class="line">                    <span class="keyword">if</span> (verticalGravity) &#123;</div><div class="line">                        params.mTop += verticalOffset;</div><div class="line">                        params.mBottom += verticalOffset;</div><div class="line">                    &#125;</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">if</span> (isLayoutRtl()) &#123;</div><div class="line">        <span class="keyword">final</span> <span class="keyword">int</span> offsetWidth = myWidth - width;</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; count; i++) &#123;</div><div class="line">            <span class="keyword">final</span> View child = views[i];</div><div class="line">            <span class="keyword">if</span> (child.getVisibility() != GONE) &#123;</div><div class="line">                <span class="keyword">final</span> LayoutParams params = (LayoutParams) child.getLayoutParams();</div><div class="line">                params.mLeft -= offsetWidth;</div><div class="line">                params.mRight -= offsetWidth;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    setMeasuredDimension(width, height);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>上面注释的核心代码可以看出RelativeLayout作为复杂布局的根布局分别会对所有的子View进行横竖两次测量。</p>
<h5 id="正确使用结论"><a href="#正确使用结论" class="headerlink" title="正确使用结论"></a>正确使用结论</h5><p>根据以上的分析结果，那么我们知道如果使用RelativeLayout或者使用LinearLayout并且使用weight作为根布局，并且其子View的嵌套复杂层级较深的话。这里注意，尤其像列表空间诸如ListView或者RecyclerView的子Item等，就会对性能造成一定的影响。一般的我们不推荐使用RelativeLayout作为复杂布局的根布局。当然Google就为了解决这一问题新引入了约束布局（ConstraintLayout）的概念。ConstraintLayout极大的减少了层级嵌套使复杂的View变得简单。关于ConstraintLayout的介绍和使用后续会写博文具体描述。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;　　&lt;strong&gt; 概述：&lt;/strong&gt;我们知道RelativeLayout和LinearLayout是Android中常用的布局，日常使用的再频繁不过。但是如果不正确使用会极大的影响性能，因此，正确的使用它们是提升程序性能的关键性工作。&lt;br&gt;
    
    </summary>
    
      <category term="性能优化" scheme="http://daijinlin.com/categories/%E6%80%A7%E8%83%BD%E4%BC%98%E5%8C%96/"/>
    
    
      <category term="RelativeLayout" scheme="http://daijinlin.com/tags/RelativeLayout/"/>
    
      <category term="LinearLayout" scheme="http://daijinlin.com/tags/LinearLayout/"/>
    
  </entry>
  
  <entry>
    <title>Android绘制文本细节整理</title>
    <link href="http://daijinlin.com/2016/03/03/CustomView-DrawText/"/>
    <id>http://daijinlin.com/2016/03/03/CustomView-DrawText/</id>
    <published>2016-03-03T01:19:17.000Z</published>
    <updated>2017-04-05T09:12:48.036Z</updated>
    
    <content type="html"><![CDATA[<p>　　<strong> 概述：</strong>在日常开发者自定义绘图是很常见的一个技能，有时候我们需要自己实现一个不是特别复杂的视图。则需要通过Android提供的API进行计算绘制等。本篇的目的就是通过简单的例子对Android绘图进行简单的认识。注意，本例中没有对其做任何封装，知识简单示范。<br><a id="more"></a><br>开发中已经知道Android的Canvas绘图，drawText里的标准是以baseline为基准的。那么，如果使用需要绘制的区域竖直中点传递进绘制API作为参数，则绘制的效果会默认偏上。代码如下,部分初始化代码已经省略，文章末尾会给出完整项目代码。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Override</span></div><div class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onDraw</span><span class="params">(Canvas canvas)</span> </span>&#123;</div><div class="line">    mPaint.setColor(Color.MAGENTA);</div><div class="line">    canvas.drawRect(mRectF, mPaint); <span class="comment">// 绘制第一个背景</span></div><div class="line">    mPaint.setColor(Color.GREEN);</div><div class="line">    canvas.drawText(testStr, mRectF.left, mRectF.centerY(), mPaint); <span class="comment">// 绘制第一个文字</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>如图示</p>
<p><img src="/res/customview/3/screenshot-1.png" alt="截图"></p>
<p>由上图可以看出很明显文字并不是上下居中显示。那么在解决问题之前先来看看跟字体相关很重要的类FontMetrics。FontMetrics其实就与字体测量相关，它是Paint的一个内部类，里面有float类型的top、ascent、descent、bottom、leading五个成员变量</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"> * Class that describes the various metrics for a font at a given text size.</div><div class="line"> * Remember, Y values increase going down, so those values will be positive,</div><div class="line"> * and values that measure distances going up will be negative. This class</div><div class="line"> * is returned by getFontMetrics().</div><div class="line"> */</div><div class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">FontMetrics</span> </span>&#123;</div><div class="line">    <span class="comment">/**</span></div><div class="line">     * The maximum distance above the baseline for the tallest glyph in</div><div class="line">     * the font at a given text size.</div><div class="line">     */</div><div class="line">    <span class="keyword">public</span> <span class="keyword">float</span>   top;</div><div class="line">    <span class="comment">/**</span></div><div class="line">     * The recommended distance above the baseline for singled spaced text.</div><div class="line">     */</div><div class="line">    <span class="keyword">public</span> <span class="keyword">float</span>   ascent;</div><div class="line">    <span class="comment">/**</span></div><div class="line">     * The recommended distance below the baseline for singled spaced text.</div><div class="line">     */</div><div class="line">    <span class="keyword">public</span> <span class="keyword">float</span>   descent;</div><div class="line">    <span class="comment">/**</span></div><div class="line">     * The maximum distance below the baseline for the lowest glyph in</div><div class="line">     * the font at a given text size.</div><div class="line">     */</div><div class="line">    <span class="keyword">public</span> <span class="keyword">float</span>   bottom;</div><div class="line">    <span class="comment">/**</span></div><div class="line">     * The recommended additional space to add between lines of text.</div><div class="line">     */</div><div class="line">    <span class="keyword">public</span> <span class="keyword">float</span>   leading;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>下面一张图很好的说明了其中几个成员参数。在Android中文字的绘制都是从baseline开始的，baseline往上至字符最高处的距离称之为ascent（上坡度），baseline往下至字符最底处的距离称之为descent（下坡度），而leading（行间距）则表示上一行字符的descent到该行字符的ascent之间的距离。</p>
<p><img src="/res/customview/3/204842429.png" alt="截图"></p>
<p>为了更直观的展示出来，可以分别绘制出线条来表示出这几个参数。代码如下</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Override</span></div><div class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onDraw</span><span class="params">(Canvas canvas)</span> </span>&#123;</div><div class="line">	<span class="keyword">int</span> x = <span class="number">0</span>, y = <span class="number">480</span>; <span class="comment">// baseline</span></div><div class="line">    <span class="keyword">float</span> textWidth = mPaint.measureText(testStr);</div><div class="line">    mPaint.setColor(Color.CYAN);</div><div class="line">    mRectF = <span class="keyword">new</span> RectF(<span class="number">0</span>, <span class="number">300</span>, <span class="number">1000</span>, <span class="number">550</span>);</div><div class="line">    canvas.drawRect(mRectF, mPaint); <span class="comment">// 绘制第二个背景</span></div><div class="line">    mPaint.setColor(Color.BLACK);</div><div class="line">    canvas.drawText(testStr, x, y, mPaint); <span class="comment">// 绘制第二个文字, 基于baseline</span></div><div class="line"></div><div class="line">    FontMetrics fontMetrics = mPaint.getFontMetrics();</div><div class="line">    Rect bounds1 = <span class="keyword">new</span> Rect();</div><div class="line">    mPaint.getTextBounds(<span class="string">"我"</span>, <span class="number">0</span>, <span class="number">1</span>, bounds1);</div><div class="line"></div><div class="line">    Rect bounds2 = <span class="keyword">new</span> Rect();</div><div class="line">    mPaint.getTextBounds(<span class="string">"我是Jinl!n,g"</span>, <span class="number">0</span>, <span class="number">10</span>, bounds2);</div><div class="line"></div><div class="line">    mPaint.setStrokeWidth(<span class="number">1</span>);</div><div class="line">    <span class="comment">// baseline</span></div><div class="line">    mPaint.setColor(Color.RED);</div><div class="line">    canvas.drawLine(x, y, textWidth, y, mPaint);</div><div class="line">    mPaint.setTextSize(<span class="number">32</span>);</div><div class="line">    canvas.drawText(<span class="string">"baseline"</span>, textWidth, y, mPaint);</div><div class="line">    <span class="comment">// bounds1</span></div><div class="line">    canvas.save();</div><div class="line">    canvas.translate(x, y);</div><div class="line">    mPaint.setStyle(Style.STROKE);</div><div class="line">    mPaint.setColor(Color.GREEN);</div><div class="line">    canvas.drawRect(bounds1, mPaint);</div><div class="line">    canvas.restore();</div><div class="line">    <span class="comment">// bounds2</span></div><div class="line">    canvas.save();</div><div class="line">    canvas.translate(x, y);</div><div class="line">    mPaint.setColor(Color.MAGENTA);</div><div class="line">    canvas.drawRect(bounds2, mPaint);</div><div class="line">    canvas.restore();</div><div class="line">    <span class="comment">// ascent</span></div><div class="line">    mPaint.setStyle(Style.FILL);</div><div class="line">    mPaint.setColor(Color.YELLOW);</div><div class="line">    canvas.drawLine(x, y + fontMetrics.ascent, textWidth, y + fontMetrics.ascent, mPaint);</div><div class="line">    canvas.drawText(<span class="string">"ascent"</span>, textWidth, y + fontMetrics.ascent + <span class="number">10</span>, mPaint);</div><div class="line">    <span class="comment">// descent</span></div><div class="line">    mPaint.setColor(Color.BLUE);</div><div class="line">    canvas.drawLine(x, y + fontMetrics.descent, textWidth, y + fontMetrics.descent, mPaint);</div><div class="line">    canvas.drawText(<span class="string">"descent"</span>, textWidth, y + fontMetrics.descent, mPaint);</div><div class="line">    <span class="comment">// top</span></div><div class="line">    mPaint.setColor(Color.DKGRAY);</div><div class="line">    canvas.drawLine(x, y + fontMetrics.top, textWidth, y + fontMetrics.top, mPaint);</div><div class="line">    canvas.drawText(<span class="string">"top"</span>, textWidth, y + fontMetrics.top, mPaint);</div><div class="line">    <span class="comment">// bottom</span></div><div class="line">    mPaint.setColor(Color.GREEN);</div><div class="line">    canvas.drawLine(x, y + fontMetrics.bottom, textWidth, y + fontMetrics.bottom, mPaint);</div><div class="line">    canvas.drawText(<span class="string">"bottom"</span>, textWidth, y + fontMetrics.bottom + <span class="number">20</span>, mPaint);</div><div class="line">    <span class="comment">// center</span></div><div class="line">    mPaint.setColor(Color.GRAY);</div><div class="line">    canvas.drawLine(x, mRectF.centerY(), textWidth, mRectF.centerY(), mPaint);</div><div class="line">    canvas.drawText(<span class="string">"center"</span>, textWidth, mRectF.centerY() + <span class="number">20</span>, mPaint);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>上述代码的呈现效果为</p>
<p><img src="/res/customview/3/screenshot-2.png" alt="截图"></p>
<p>可以看到，红色是baseline，最上面深灰色是top，最下面绿色是bottom，蓝色的descent，descent和bottom非常接近，黄色的是ascent，以及绘制区域的中线center。由图示可以看出字体整体是基于descent和ascent居中的，那问题的解决方就很明显了。而使用paint.getTextBounds方法获取的仅仅是字符边界，并不是字体的边界这一点一定要注意区分开。<br>回到问题上来，需要将文本绘制到目标区域，那么baseline的计算公式就是<br><code>targetRect.centerY() - (FontMetrics.descent - FontMetrics.ascent) / 2 - FontMetrics.ascent</code><br>合并整理之后得到<br><code>mRectF.centerY() - fontMetrics.ascent / 2 - fontMetrics.descent / 2;</code><br>此时，问题就得到解决。尝试一下，效果说话</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Override</span></div><div class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onDraw</span><span class="params">(Canvas canvas)</span> </span>&#123;</div><div class="line">	mRectF = <span class="keyword">new</span> RectF(<span class="number">0</span>, <span class="number">600</span>, <span class="number">1000</span>, <span class="number">850</span>);</div><div class="line">    mPaint.setColor(Color.LTGRAY);</div><div class="line">    canvas.drawRect(mRectF, mPaint); <span class="comment">// 绘制第三个背景</span></div><div class="line">    mPaint.setColor(Color.RED);</div><div class="line">    canvas.drawLine(x, mRectF.centerY(), textWidth, mRectF.centerY(), mPaint);</div><div class="line">    canvas.drawText(<span class="string">"center"</span>, textWidth, mRectF.centerY(), mPaint);</div><div class="line"></div><div class="line">    mPaint.setTextSize(<span class="number">80</span>);</div><div class="line">    fontMetrics = mPaint.getFontMetrics();</div><div class="line">    <span class="keyword">float</span> baseline = mRectF.centerY() - fontMetrics.ascent / <span class="number">2</span> - fontMetrics.descent / <span class="number">2</span>;</div><div class="line">    canvas.drawText(testStr, mRectF.centerX() - textWidth / <span class="number">2</span>, baseline, mPaint);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><img src="/res/customview/3/screenshot-3.png" alt="截图"></p>
<p>到这里关于字体绘制的一些注意细节就差不多了。最后，看看合并之后的对比效果<br><img src="/res/customview/3/screenshot-4.png" alt="截图"><br>完整项目Demo代码已上传至GitHub中</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;　　&lt;strong&gt; 概述：&lt;/strong&gt;在日常开发者自定义绘图是很常见的一个技能，有时候我们需要自己实现一个不是特别复杂的视图。则需要通过Android提供的API进行计算绘制等。本篇的目的就是通过简单的例子对Android绘图进行简单的认识。注意，本例中没有对其做任何封装，知识简单示范。&lt;br&gt;
    
    </summary>
    
      <category term="自定义View" scheme="http://daijinlin.com/categories/%E8%87%AA%E5%AE%9A%E4%B9%89View/"/>
    
    
      <category term="drawText" scheme="http://daijinlin.com/tags/drawText/"/>
    
  </entry>
  
  <entry>
    <title>Android自定义绘图</title>
    <link href="http://daijinlin.com/2016/03/02/CustomView-Draw/"/>
    <id>http://daijinlin.com/2016/03/02/CustomView-Draw/</id>
    <published>2016-03-02T08:19:17.000Z</published>
    <updated>2017-04-05T09:12:48.036Z</updated>
    
    <content type="html"><![CDATA[<p>　　<strong> 概述：</strong>在日常开发者自定义绘图是很常见的一个技能，有时候我们需要自己实现一个不是特别复杂的视图。则需要通过Android提供的API进行计算绘制等。本篇的目的就是通过简单的例子对Android绘图进行简单的认识。注意，本例中没有对其做任何封装，知识简单示范。<br><a id="more"></a></p>
<p>对于一般自定义View，我们都是新建一个类,然后继承自View。例如本例中ProgressView.java</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ProgressView</span> <span class="keyword">extends</span> <span class="title">View</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">ProgressView</span><span class="params">(Context context)</span> </span>&#123;</div><div class="line">        <span class="keyword">super</span>(context);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">ProgressView</span><span class="params">(Context context, AttributeSet attrs)</span> </span>&#123;</div><div class="line">        <span class="keyword">super</span>(context, attrs);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">ProgressView</span><span class="params">(Context context, AttributeSet attrs, <span class="keyword">int</span> defStyleAttr)</span> </span>&#123;</div><div class="line">        <span class="keyword">super</span>(context, attrs, defStyleAttr);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onDraw</span><span class="params">(Canvas canvas)</span> </span>&#123;</div><div class="line">        </div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>上述代码是平时开发中再熟悉不过的了，然后我们在xml布局中使用它。这里我添加了一个背景色方便绘制的时候进行调试</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">com.jinlin.progressview.ProgressView</span></span></div><div class="line">    <span class="attr">android:layout_width</span>=<span class="string">"wrap_content"</span></div><div class="line">    <span class="attr">android:layout_height</span>=<span class="string">"wrap_content"</span></div><div class="line">    <span class="attr">android:background</span>=<span class="string">"#ed7612"</span></div><div class="line">    <span class="attr">android:layout_centerInParent</span>=<span class="string">"true"</span>/&gt;</div></pre></td></tr></table></figure>
<p>那么我们接下来就在onDraw方法中进行绘制操作。首先要知道，绘制任何东西都是需要画笔对象的也就是我们的Paint，初始化工作代码如下</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ProgressView</span> <span class="keyword">extends</span> <span class="title">View</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * 圆形画笔宽度</div><div class="line">     */</div><div class="line">    <span class="keyword">private</span> <span class="keyword">float</span> mProgressStrokeWidth = <span class="number">5</span>;</div><div class="line">    <span class="comment">/**</span></div><div class="line">     * 文字画笔欢度</div><div class="line">     */</div><div class="line">    <span class="keyword">private</span> <span class="keyword">float</span> mTextStrokeWidth = <span class="number">3</span>;</div><div class="line">    <span class="comment">/**</span></div><div class="line">     * 最大进度</div><div class="line">     */</div><div class="line">    <span class="keyword">private</span> <span class="keyword">int</span> mMaxProgress;</div><div class="line">    <span class="comment">/**</span></div><div class="line">     * 当前进度</div><div class="line">     */</div><div class="line">    <span class="keyword">private</span> <span class="keyword">int</span> mCurrentProgress;</div><div class="line">    <span class="comment">/**</span></div><div class="line">     * 绘制区域</div><div class="line">     */</div><div class="line">    <span class="keyword">private</span> RectF mRectF;</div><div class="line">    <span class="comment">/**</span></div><div class="line">     * 画笔对象</div><div class="line">     */</div><div class="line">    <span class="keyword">private</span> Paint mPaint;</div><div class="line">    <span class="comment">/**</span></div><div class="line">     * 上下文对象</div><div class="line">     */</div><div class="line">    <span class="keyword">private</span> Context mContext;</div><div class="line">    <span class="comment">/**</span></div><div class="line">     * 提示信息1</div><div class="line">     */</div><div class="line">    <span class="keyword">private</span> String mTxtHint1;</div><div class="line">    <span class="comment">/**</span></div><div class="line">     * 提示信息2</div><div class="line">     */</div><div class="line">    <span class="keyword">private</span> String mTxtHint2;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">ProgressView</span><span class="params">(Context context)</span> </span>&#123;</div><div class="line">        <span class="keyword">super</span>(context);</div><div class="line">        init(context);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">ProgressView</span><span class="params">(Context context, AttributeSet attrs)</span> </span>&#123;</div><div class="line">        <span class="keyword">super</span>(context, attrs);</div><div class="line">        init(context);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">ProgressView</span><span class="params">(Context context, AttributeSet attrs, <span class="keyword">int</span> defStyleAttr)</span> </span>&#123;</div><div class="line">        <span class="keyword">super</span>(context, attrs, defStyleAttr);</div><div class="line">        init(context);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">init</span><span class="params">(Context context)</span> </span>&#123;</div><div class="line">        mContext = context;</div><div class="line">        mPaint = <span class="keyword">new</span> Paint();</div><div class="line">        mRectF = <span class="keyword">new</span> RectF();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onDraw</span><span class="params">(Canvas canvas)</span> </span>&#123;</div><div class="line">        <span class="keyword">int</span> width = <span class="keyword">this</span>.getWidth();</div><div class="line">        <span class="keyword">int</span> height = <span class="keyword">this</span>.getHeight();</div><div class="line">        <span class="keyword">if</span> (width != height) &#123;</div><div class="line">            <span class="keyword">int</span> min = Math.min(width, height);</div><div class="line">            width = min;</div><div class="line">            height = min;</div><div class="line">        &#125;</div><div class="line">        <span class="comment">// 画最底层</span></div><div class="line">        mPaint.setAntiAlias(<span class="keyword">true</span>); <span class="comment">// 设置抗锯齿</span></div><div class="line">        mPaint.setColor(Color.rgb(<span class="number">0xe9</span>, <span class="number">0xe9</span>, <span class="number">0xe9</span>)); <span class="comment">// 设置全圆弧颜色</span></div><div class="line">        mPaint.setStrokeWidth(mProgressStrokeWidth);</div><div class="line">        mPaint.setStyle(Style.STROKE);</div><div class="line">        canvas.drawColor(Color.TRANSPARENT);</div><div class="line">        mRectF.left = mRectF.top = mProgressStrokeWidth / <span class="number">2</span>;</div><div class="line">        mRectF.right = width - mProgressStrokeWidth / <span class="number">2</span>;</div><div class="line">        mRectF.bottom = height - mProgressStrokeWidth / <span class="number">2</span>;</div><div class="line">        canvas.drawArc(mRectF, <span class="number">0</span>, <span class="number">360</span>, <span class="keyword">false</span>, mPaint);</div><div class="line"></div><div class="line">        <span class="comment">// 画第二层</span></div><div class="line">        mPaint.setColor(getResources().getColor(R.color.colorPrimary));</div><div class="line">        canvas.drawArc(mRectF, <span class="number">0</span> , <span class="number">112</span>, <span class="keyword">false</span>, mPaint);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>此时我们可以看到效果为</p>
<p><img src="/res/customview/1/screenshot-1.png" alt="截图"></p>
<p>我们看到此时起点是有右边开始,此时查看代码得知我们的起点是由0开始绘制的</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">canvas.drawArc(mRectF, <span class="number">0</span> , <span class="number">112</span>, <span class="keyword">false</span>, mPaint);</div></pre></td></tr></table></figure>
<p>那么如果我们需要有顶部开始怎么做呢？我们可以知道顺时针为正，那么顶部为右边逆时针90°，如果换种思维，顶点也是顺时针270°。那我们试一试，代码说话</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">canvas.drawArc(mRectF, -<span class="number">90</span> , <span class="number">112</span>, <span class="keyword">false</span>, mPaint);</div><div class="line">canvas.drawArc(mRectF, <span class="number">270</span> , <span class="number">112</span>, <span class="keyword">false</span>, mPaint);</div></pre></td></tr></table></figure>
<p>上面两端代码实现效果其实是一致的</p>
<p><img src="/res/customview/1/screenshot-2.png" alt="截图"></p>
<p>接下来就是绘制文字的部分，我们需要将进度文字绘制到视图的正中央，那么我们可以先把辅助中心线绘制出来。后期进入生产阶段可以去除调试代码部分或者将代码放入到<code>if (isInEditMode())</code>代码块里</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">if</span> (isInEditMode()) &#123;</div><div class="line">    <span class="comment">// 绘制辅助线</span></div><div class="line">    mPaint.setStrokeWidth(<span class="number">1</span>);</div><div class="line">    mPaint.setColor(Color.LTGRAY);</div><div class="line">    canvas.drawLine(<span class="number">0</span>, width / <span class="number">2</span>, height , width /<span class="number">2</span> , mPaint);</div><div class="line">    canvas.drawLine(width / <span class="number">2</span>, <span class="number">0</span>, width / <span class="number">2</span>, height, mPaint);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>由于Android中对文字的绘制时一个复杂的处理过程，所以这里不做详细说明，将单独哪一篇博文来说明文字应该如何绘制。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 画进度文字</span></div><div class="line">mPaint.setStrokeWidth(mTextStrokeWidth);</div><div class="line">String text = <span class="number">88</span> + <span class="string">"%"</span>;</div><div class="line"><span class="keyword">int</span> textHeight = height / <span class="number">4</span>;</div><div class="line">mPaint.setTextSize(textHeight);</div><div class="line">FontMetrics fontMetrics = mPaint.getFontMetrics();</div><div class="line"><span class="keyword">float</span> baseline = (mRectF.bottom + mRectF.top - fontMetrics.bottom - fontMetrics.top) / <span class="number">2</span>;</div><div class="line"><span class="keyword">int</span> textWidth = (<span class="keyword">int</span>) mPaint.measureText(text, <span class="number">0</span>, text.length());</div><div class="line">mPaint.setStyle(Style.FILL);</div><div class="line">canvas.drawText(text, mRectF.centerX() - textWidth / <span class="number">2</span>, baseline, mPaint);</div></pre></td></tr></table></figure>
<p>由效果图我们可以看见，文字已经居中了，接下来分别在视图的上三分之一和下三分之一处绘制提示信息，原理同样与上述代码类似</p>
<p><img src="/res/customview/1/screenshot-3.png" alt="截图"></p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">if</span> (!TextUtils.isEmpty(mTxtHint1)) &#123;</div><div class="line">    mPaint.setStrokeWidth(mTextStrokeWidth);</div><div class="line">    text = mTxtHint1;</div><div class="line">    textHeight = height / <span class="number">8</span>;</div><div class="line">    mPaint.setTextSize(textHeight);</div><div class="line">    fontMetrics = mPaint.getFontMetrics();</div><div class="line">    mPaint.setColor(Color.rgb(<span class="number">0x99</span>, <span class="number">0x99</span>, <span class="number">0x99</span>));</div><div class="line">    textWidth = (<span class="keyword">int</span>) mPaint.measureText(text, <span class="number">0</span>, text.length());</div><div class="line">    mPaint.setStyle(Style.FILL);</div><div class="line">    baseline = height / <span class="number">4</span> - (fontMetrics.bottom + fontMetrics.top) / <span class="number">2</span>;</div><div class="line">    canvas.drawText(text, width / <span class="number">2</span> - textWidth / <span class="number">2</span>, baseline, mPaint);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">if</span> (!TextUtils.isEmpty(mTxtHint2)) &#123;</div><div class="line">    mPaint.setStrokeWidth(mTextStrokeWidth);</div><div class="line">    text = mTxtHint2;</div><div class="line">    textHeight = height / <span class="number">8</span>;</div><div class="line">    mPaint.setTextSize(textHeight);</div><div class="line">    fontMetrics = mPaint.getFontMetrics();</div><div class="line">    textWidth = (<span class="keyword">int</span>) mPaint.measureText(text, <span class="number">0</span>, text.length());</div><div class="line">    mPaint.setStyle(Style.FILL);</div><div class="line">    baseline = <span class="number">3</span> * height / <span class="number">4</span> - (fontMetrics.bottom + fontMetrics.top) / <span class="number">2</span>;</div><div class="line">    canvas.drawText(text, width / <span class="number">2</span> - textWidth / <span class="number">2</span>, baseline, mPaint);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>最后我们来看效果图</p>
<p><img src="/res/customview/1/screenshot-4.png" alt="截图"></p>
<p>然后我们对部分属性设置访问方法，或者再新增一些自定义属性就可以完成一个简单的自定义View。例如</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">declare-styleable</span> <span class="attr">name</span>=<span class="string">"ProgressView"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">attr</span> <span class="attr">name</span>=<span class="string">"progress"</span> <span class="attr">format</span>=<span class="string">"integer"</span>/&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">attr</span> <span class="attr">name</span>=<span class="string">"textHint"</span> <span class="attr">format</span>=<span class="string">"string"</span>/&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">attr</span> <span class="attr">name</span>=<span class="string">"hint"</span> <span class="attr">format</span>=<span class="string">"string"</span>/&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">attr</span> <span class="attr">name</span>=<span class="string">"strokeColor"</span> <span class="attr">format</span>=<span class="string">"color"</span> /&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">attr</span> <span class="attr">name</span>=<span class="string">"progressColor"</span> <span class="attr">format</span>=<span class="string">"color"</span> /&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">declare-styleable</span>&gt;</span></div></pre></td></tr></table></figure>
<p>然后在View中获取自定义属性，进行配置，完整代码如下</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div><div class="line">129</div><div class="line">130</div><div class="line">131</div><div class="line">132</div><div class="line">133</div><div class="line">134</div><div class="line">135</div><div class="line">136</div><div class="line">137</div><div class="line">138</div><div class="line">139</div><div class="line">140</div><div class="line">141</div><div class="line">142</div><div class="line">143</div><div class="line">144</div><div class="line">145</div><div class="line">146</div><div class="line">147</div><div class="line">148</div><div class="line">149</div><div class="line">150</div><div class="line">151</div><div class="line">152</div><div class="line">153</div><div class="line">154</div><div class="line">155</div><div class="line">156</div><div class="line">157</div><div class="line">158</div><div class="line">159</div><div class="line">160</div><div class="line">161</div><div class="line">162</div><div class="line">163</div><div class="line">164</div><div class="line">165</div><div class="line">166</div><div class="line">167</div><div class="line">168</div><div class="line">169</div><div class="line">170</div><div class="line">171</div><div class="line">172</div><div class="line">173</div><div class="line">174</div><div class="line">175</div><div class="line">176</div><div class="line">177</div><div class="line">178</div><div class="line">179</div><div class="line">180</div><div class="line">181</div><div class="line">182</div><div class="line">183</div><div class="line">184</div><div class="line">185</div><div class="line">186</div><div class="line">187</div><div class="line">188</div><div class="line">189</div><div class="line">190</div><div class="line">191</div><div class="line">192</div><div class="line">193</div><div class="line">194</div><div class="line">195</div><div class="line">196</div><div class="line">197</div><div class="line">198</div><div class="line">199</div><div class="line">200</div><div class="line">201</div><div class="line">202</div><div class="line">203</div><div class="line">204</div><div class="line">205</div><div class="line">206</div><div class="line">207</div><div class="line">208</div><div class="line">209</div><div class="line">210</div><div class="line">211</div><div class="line">212</div><div class="line">213</div><div class="line">214</div><div class="line">215</div><div class="line">216</div><div class="line">217</div><div class="line">218</div><div class="line">219</div><div class="line">220</div><div class="line">221</div><div class="line">222</div><div class="line">223</div><div class="line">224</div><div class="line">225</div><div class="line">226</div><div class="line">227</div><div class="line">228</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ProgressView</span> <span class="keyword">extends</span> <span class="title">View</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * 圆形画笔宽度</div><div class="line">     */</div><div class="line">    <span class="keyword">private</span> <span class="keyword">float</span> mProgressStrokeWidth = <span class="number">5</span>;</div><div class="line">    <span class="comment">/**</span></div><div class="line">     * 文字画笔欢度</div><div class="line">     */</div><div class="line">    <span class="keyword">private</span> <span class="keyword">float</span> mTextStrokeWidth = <span class="number">3</span>;</div><div class="line">    <span class="comment">/**</span></div><div class="line">     * 最大进度</div><div class="line">     */</div><div class="line">    <span class="keyword">private</span> <span class="keyword">int</span> mMaxProgress = <span class="number">100</span>;</div><div class="line">    <span class="comment">/**</span></div><div class="line">     * 当前进度</div><div class="line">     */</div><div class="line">    <span class="keyword">private</span> <span class="keyword">int</span> mCurrentProgress;</div><div class="line">    <span class="comment">/**</span></div><div class="line">     * 绘制区域</div><div class="line">     */</div><div class="line">    <span class="keyword">private</span> RectF mRectF;</div><div class="line">    <span class="comment">/**</span></div><div class="line">     * 画笔对象</div><div class="line">     */</div><div class="line">    <span class="keyword">private</span> Paint mPaint;</div><div class="line">    <span class="comment">/**</span></div><div class="line">     * 进度条画笔</div><div class="line">      */</div><div class="line">    <span class="keyword">private</span> Paint mProgressPaint;</div><div class="line">    <span class="keyword">private</span> TextPaint mTextPaint;</div><div class="line">    <span class="comment">/**</span></div><div class="line">     * 提示信息1</div><div class="line">     */</div><div class="line">    <span class="keyword">private</span> String mHint;</div><div class="line">    <span class="comment">/**</span></div><div class="line">     * 提示信息2</div><div class="line">     */</div><div class="line">    <span class="keyword">private</span> String mTextHint;</div><div class="line">    <span class="comment">/**</span></div><div class="line">     * 默认线条颜色</div><div class="line">     */</div><div class="line">    <span class="keyword">private</span> <span class="keyword">int</span> mStrokeColor;</div><div class="line">    <span class="comment">/**</span></div><div class="line">     * 进度线条颜色</div><div class="line">     */</div><div class="line">    <span class="keyword">private</span> <span class="keyword">int</span> mProgressColor;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">ProgressView</span><span class="params">(Context context)</span> </span>&#123;</div><div class="line">        <span class="keyword">this</span>(context, <span class="keyword">null</span>);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">ProgressView</span><span class="params">(Context context, AttributeSet attrs)</span> </span>&#123;</div><div class="line">        <span class="keyword">this</span>(context, attrs, <span class="number">0</span>);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">ProgressView</span><span class="params">(Context context, AttributeSet attrs, <span class="keyword">int</span> defStyleAttr)</span> </span>&#123;</div><div class="line">        <span class="keyword">super</span>(context, attrs, defStyleAttr);</div><div class="line">        init(context, attrs);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">init</span><span class="params">(Context context, AttributeSet attrs)</span> </span>&#123;</div><div class="line">        TypedArray ta = context.obtainStyledAttributes(attrs, R.styleable.ProgressView);</div><div class="line">        <span class="keyword">try</span> &#123;</div><div class="line">            mCurrentProgress = ta.getInt(R.styleable.ProgressView_progress, <span class="number">0</span>);</div><div class="line">            <span class="keyword">if</span> (mCurrentProgress &gt; mMaxProgress) &#123;</div><div class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(<span class="string">"progress only define less than 100"</span>);</div><div class="line">            &#125;</div><div class="line">            mHint = ta.getString(R.styleable.ProgressView_hint);</div><div class="line">            mTextHint = ta.getString(R.styleable.ProgressView_textHint);</div><div class="line">            mStrokeColor = ta.getColor(R.styleable.ProgressView_strokeColor, Color.rgb(<span class="number">0xe9</span>, <span class="number">0xe9</span>, <span class="number">0xe9</span>));</div><div class="line">            mProgressColor = ta.getColor(R.styleable.ProgressView_progressColor, getResources().getColor(R.color.colorPrimary));</div><div class="line">        &#125; <span class="keyword">finally</span> &#123;</div><div class="line">            ta.recycle();</div><div class="line">        &#125;</div><div class="line">        mPaint = <span class="keyword">new</span> Paint();</div><div class="line">        mRectF = <span class="keyword">new</span> RectF();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onDraw</span><span class="params">(Canvas canvas)</span> </span>&#123;</div><div class="line">        <span class="keyword">int</span> width = <span class="keyword">this</span>.getWidth();</div><div class="line">        <span class="keyword">int</span> height = <span class="keyword">this</span>.getHeight();</div><div class="line">        Log.d(<span class="string">"ProgressView"</span>, <span class="string">"width = "</span> + width + <span class="string">" height = "</span> + height);</div><div class="line">        <span class="keyword">if</span> (width != height) &#123;</div><div class="line">            <span class="keyword">int</span> min = Math.min(width, height);</div><div class="line">            width = min;</div><div class="line">            height = min;</div><div class="line">        &#125;</div><div class="line">        <span class="comment">// 画最底层</span></div><div class="line">        mPaint.setAntiAlias(<span class="keyword">true</span>); <span class="comment">// 设置抗锯齿</span></div><div class="line">        mPaint.setColor(mStrokeColor); <span class="comment">// 设置全圆弧颜色</span></div><div class="line">        mPaint.setStrokeWidth(mProgressStrokeWidth);</div><div class="line">        mPaint.setStyle(Style.STROKE);</div><div class="line">        mRectF.left = mRectF.top = mProgressStrokeWidth / <span class="number">2</span>;</div><div class="line">        mRectF.right = width - mProgressStrokeWidth / <span class="number">2</span>;</div><div class="line">        mRectF.bottom = height - mProgressStrokeWidth / <span class="number">2</span>;</div><div class="line">        canvas.drawArc(mRectF, <span class="number">0</span>, <span class="number">360</span>, <span class="keyword">false</span>, mPaint);</div><div class="line"></div><div class="line">        <span class="comment">// 画第二层</span></div><div class="line">        mPaint.setColor(mProgressColor);</div><div class="line">        canvas.drawArc(mRectF, <span class="number">270</span>, ((<span class="keyword">float</span>) mCurrentProgress / <span class="number">100</span>) * <span class="number">360</span>, <span class="keyword">false</span>, mPaint);</div><div class="line"></div><div class="line">        <span class="comment">// 画进度文字</span></div><div class="line">        mPaint.setStrokeWidth(mTextStrokeWidth);</div><div class="line">        String text = mCurrentProgress + <span class="string">"%"</span>;</div><div class="line">        <span class="keyword">int</span> textHeight = height / <span class="number">5</span>;</div><div class="line">        mPaint.setTextSize(textHeight);</div><div class="line">        FontMetrics fontMetrics = mPaint.getFontMetrics();</div><div class="line">        <span class="keyword">float</span> baseline = (mRectF.bottom + mRectF.top - fontMetrics.bottom - fontMetrics.top) / <span class="number">2</span>;</div><div class="line">        <span class="keyword">int</span> textWidth = (<span class="keyword">int</span>) mPaint.measureText(text, <span class="number">0</span>, text.length());</div><div class="line">        mPaint.setStyle(Style.FILL);</div><div class="line">        canvas.drawText(text, mRectF.centerX() - textWidth / <span class="number">2</span>, baseline, mPaint);</div><div class="line"></div><div class="line">        <span class="keyword">if</span> (!TextUtils.isEmpty(mHint)) &#123;</div><div class="line">            mPaint.setStrokeWidth(mTextStrokeWidth);</div><div class="line">            textHeight = height / <span class="number">8</span>;</div><div class="line">            mPaint.setTextSize(textHeight);</div><div class="line">            fontMetrics = mPaint.getFontMetrics();</div><div class="line">            mPaint.setColor(Color.rgb(<span class="number">0x99</span>, <span class="number">0x99</span>, <span class="number">0x99</span>));</div><div class="line">            textWidth = (<span class="keyword">int</span>) mPaint.measureText(mHint, <span class="number">0</span>, mHint.length());</div><div class="line">            mPaint.setStyle(Style.FILL);</div><div class="line">            baseline = height / <span class="number">4</span> - (fontMetrics.bottom + fontMetrics.top) / <span class="number">2</span>;</div><div class="line">            canvas.drawText(mHint, width / <span class="number">2</span> - textWidth / <span class="number">2</span>, baseline, mPaint);</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="keyword">if</span> (!TextUtils.isEmpty(mTextHint)) &#123;</div><div class="line">            mPaint.setStrokeWidth(mTextStrokeWidth);</div><div class="line">            textHeight = height / <span class="number">8</span>;</div><div class="line">            mPaint.setTextSize(textHeight);</div><div class="line">            fontMetrics = mPaint.getFontMetrics();</div><div class="line">            textWidth = (<span class="keyword">int</span>) mPaint.measureText(mTextHint, <span class="number">0</span>, mTextHint.length());</div><div class="line">            mPaint.setStyle(Style.FILL);</div><div class="line">            baseline = <span class="number">3</span> * height / <span class="number">4</span> - (fontMetrics.bottom + fontMetrics.top) / <span class="number">2</span>;</div><div class="line">            canvas.drawText(mTextHint, width / <span class="number">2</span> - textWidth / <span class="number">2</span>, baseline, mPaint);</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="keyword">if</span> (isInEditMode()) &#123;</div><div class="line">            <span class="comment">// 绘制辅助线</span></div><div class="line">            mPaint.setStrokeWidth(<span class="number">1</span>);</div><div class="line">            mPaint.setColor(Color.LTGRAY);</div><div class="line">            canvas.drawLine(<span class="number">0</span>, width / <span class="number">2</span>, width, width / <span class="number">2</span>, mPaint); <span class="comment">// 横线 1/2</span></div><div class="line">            canvas.drawLine(<span class="number">0</span>, height / <span class="number">4</span>, width, height / <span class="number">4</span>, mPaint); <span class="comment">// 横线 1/4</span></div><div class="line">            canvas.drawLine(<span class="number">0</span>, height / <span class="number">4</span> * <span class="number">3</span>, width, height / <span class="number">4</span> * <span class="number">3</span>, mPaint); <span class="comment">// 横线 3/4</span></div><div class="line">            canvas.drawLine(width / <span class="number">2</span>, <span class="number">0</span>, width / <span class="number">2</span>, height, mPaint); <span class="comment">// 竖线</span></div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getMaxProgress</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> mMaxProgress;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setMaxProgress</span><span class="params">(<span class="keyword">int</span> maxProgress)</span> </span>&#123;</div><div class="line">        <span class="keyword">this</span>.mMaxProgress = maxProgress;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setProgress</span><span class="params">(<span class="keyword">int</span> progress)</span> </span>&#123;</div><div class="line">        <span class="keyword">this</span>.mCurrentProgress = progress;</div><div class="line">        <span class="keyword">this</span>.invalidate();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setProgressNotInUIThread</span><span class="params">(<span class="keyword">int</span> progress)</span> </span>&#123;</div><div class="line">        <span class="keyword">this</span>.mCurrentProgress = progress;</div><div class="line">        <span class="keyword">this</span>.postInvalidate();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getProgress</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> mCurrentProgress;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getHint</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> mHint;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setHint</span><span class="params">(String hint)</span> </span>&#123;</div><div class="line">        mHint = hint;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getTextHint</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> mTextHint;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setTextHint</span><span class="params">(String textHint)</span> </span>&#123;</div><div class="line">        mTextHint = textHint;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onMeasure</span><span class="params">(<span class="keyword">int</span> widthMeasureSpec, <span class="keyword">int</span> heightMeasureSpec)</span> </span>&#123;</div><div class="line"></div><div class="line">        <span class="keyword">int</span> desiredWidth = <span class="number">250</span>;</div><div class="line">        <span class="keyword">int</span> desiredHeight = <span class="number">250</span>;</div><div class="line"></div><div class="line">        <span class="keyword">int</span> widthMode = MeasureSpec.getMode(widthMeasureSpec);</div><div class="line">        <span class="keyword">int</span> widthSize = MeasureSpec.getSize(widthMeasureSpec);</div><div class="line">        <span class="keyword">int</span> heightMode = MeasureSpec.getMode(heightMeasureSpec);</div><div class="line">        <span class="keyword">int</span> heightSize = MeasureSpec.getSize(heightMeasureSpec);</div><div class="line"></div><div class="line">        <span class="keyword">int</span> width;</div><div class="line">        <span class="keyword">int</span> height;</div><div class="line"></div><div class="line">        <span class="comment">//Measure Width</span></div><div class="line">        <span class="keyword">if</span> (widthMode == MeasureSpec.EXACTLY) &#123;</div><div class="line">            <span class="comment">//Must be this size</span></div><div class="line">            width = widthSize;</div><div class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (widthMode == MeasureSpec.AT_MOST) &#123;</div><div class="line">            <span class="comment">//Can't be bigger than...</span></div><div class="line">            width = Math.min(desiredWidth, widthSize);</div><div class="line">        &#125; <span class="keyword">else</span> &#123;</div><div class="line">            <span class="comment">//Be whatever you want</span></div><div class="line">            width = desiredWidth;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="comment">//Measure Height</span></div><div class="line">        <span class="keyword">if</span> (heightMode == MeasureSpec.EXACTLY) &#123;</div><div class="line">            <span class="comment">//Must be this size</span></div><div class="line">            height = heightSize;</div><div class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (heightMode == MeasureSpec.AT_MOST) &#123;</div><div class="line">            <span class="comment">//Can't be bigger than...</span></div><div class="line">            height = Math.min(desiredHeight, heightSize);</div><div class="line">        &#125; <span class="keyword">else</span> &#123;</div><div class="line">            <span class="comment">//Be whatever you want</span></div><div class="line">            height = desiredHeight;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="comment">//MUST CALL THIS</span></div><div class="line">        setMeasuredDimension(width, height);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>看看我们最终的实现的效果图</p>
<p><img src="/res/customview/1/screenshot-5.png" alt="截图"></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;　　&lt;strong&gt; 概述：&lt;/strong&gt;在日常开发者自定义绘图是很常见的一个技能，有时候我们需要自己实现一个不是特别复杂的视图。则需要通过Android提供的API进行计算绘制等。本篇的目的就是通过简单的例子对Android绘图进行简单的认识。注意，本例中没有对其做任何封装，知识简单示范。&lt;br&gt;
    
    </summary>
    
      <category term="自定义View" scheme="http://daijinlin.com/categories/%E8%87%AA%E5%AE%9A%E4%B9%89View/"/>
    
    
      <category term="onDraw" scheme="http://daijinlin.com/tags/onDraw/"/>
    
  </entry>
  
  <entry>
    <title>设计模式之单例模式</title>
    <link href="http://daijinlin.com/2016/02/29/DesignPatterns-Singleton/"/>
    <id>http://daijinlin.com/2016/02/29/DesignPatterns-Singleton/</id>
    <published>2016-02-29T08:53:46.000Z</published>
    <updated>2017-04-05T09:12:48.036Z</updated>
    
    <content type="html"><![CDATA[<p>　　<strong> 概述：</strong>单例是设计模式中最常见也最简单的一种设计模式，保证了在程序中只有一个实例存在并且能全局的访问到。比如在android实际APP 开发中用到的，数据库对象（SQLiteOpenHelper）等都会用到单例模式。<br><a id="more"></a></p>
<p>常见的单例的几种写法：</p>
<h3 id="一、懒汉式"><a href="#一、懒汉式" class="headerlink" title="一、懒汉式"></a>一、懒汉式</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line">/**</div><div class="line"> * 懒汉式单例实现的示例</div><div class="line"> */</div><div class="line">public class Singleton &#123;</div><div class="line">    //4：定义一个变量来存储创建好的类实例</div><div class="line">    //5：因为这个变量要在静态方法中使用，所以需要加上static修饰</div><div class="line">    private static Singleton instance = null;</div><div class="line">    //1：私有化构造方法，好在内部控制创建实例的数目</div><div class="line">    private Singleton()&#123;    </div><div class="line">    &#125;</div><div class="line">    //2：定义一个方法来为客户端提供类实例</div><div class="line">    //3：这个方法需要定义成类方法，也就是要加static</div><div class="line">    public static Singleton getInstance()&#123;</div><div class="line">        //6：判断存储实例的变量是否有值</div><div class="line">        if(instance == null)&#123;</div><div class="line">            //6.1：如果没有，就创建一个类实例，并把值赋值给存储类实例的变量</div><div class="line">            instance = new Singleton();</div><div class="line">        &#125;</div><div class="line">        //6.2：如果有值，那就直接使用</div><div class="line">        return instance;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h6 id="优点：延迟加载，也就是需要时才回去加载"><a href="#优点：延迟加载，也就是需要时才回去加载" class="headerlink" title="优点：延迟加载，也就是需要时才回去加载"></a>优点：延迟加载，也就是需要时才回去加载</h6><h6 id="缺点：线程不安全，在多线程中很容易出现不同步的情况，如在数据库对象进行的频繁读写操作时。"><a href="#缺点：线程不安全，在多线程中很容易出现不同步的情况，如在数据库对象进行的频繁读写操作时。" class="headerlink" title="缺点：线程不安全，在多线程中很容易出现不同步的情况，如在数据库对象进行的频繁读写操作时。"></a>缺点：线程不安全，在多线程中很容易出现不同步的情况，如在数据库对象进行的频繁读写操作时。</h6><h3 id="二、饿汉式"><a href="#二、饿汉式" class="headerlink" title="二、饿汉式"></a>二、饿汉式</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line">/**</div><div class="line"> * 饿汉式单例实现的示例</div><div class="line"> */</div><div class="line">public class Singleton &#123;</div><div class="line">    //4：定义一个静态变量来存储创建好的类实例</div><div class="line">    //直接在这里创建类实例，只会创建一次</div><div class="line">    private static Singleton instance = new Singleton();</div><div class="line">    //1：私有化构造方法，好在内部控制创建实例的数目</div><div class="line">    private Singleton()&#123;        </div><div class="line">    &#125;</div><div class="line">    //2：定义一个方法来为客户端提供类实例</div><div class="line">    //3：这个方法需要定义成类方法，也就是要加static</div><div class="line">    //这个方法里面就不需要控制代码了</div><div class="line">    public static Singleton getInstance()&#123;</div><div class="line">        //5：直接使用已经创建好的实例</div><div class="line">        return instance;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h6 id="优点：饿汉式是线程安全的，因为虚拟机保证了只会装载一次，在装载类的时候是不会发生并发的。"><a href="#优点：饿汉式是线程安全的，因为虚拟机保证了只会装载一次，在装载类的时候是不会发生并发的。" class="headerlink" title="优点：饿汉式是线程安全的，因为虚拟机保证了只会装载一次，在装载类的时候是不会发生并发的。"></a>优点：饿汉式是线程安全的，因为虚拟机保证了只会装载一次，在装载类的时候是不会发生并发的。</h6><h3 id="三、双重检查加锁"><a href="#三、双重检查加锁" class="headerlink" title="三、双重检查加锁"></a>三、双重检查加锁</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line">public class Singleton &#123;</div><div class="line">    /**</div><div class="line">     * 对保存实例的变量添加volatile的修饰</div><div class="line">     */</div><div class="line">    private volatile static Singleton instance = null;</div><div class="line">    private Singleton()&#123;    </div><div class="line">    &#125;</div><div class="line">    public static  Singleton getInstance()&#123;</div><div class="line">        //先检查实例是否存在，如果不存在才进入下面的同步块</div><div class="line">        if(instance == null)&#123;</div><div class="line">            //同步块，线程安全的创建实例</div><div class="line">            synchronized(Singleton.class)&#123;</div><div class="line">                //再次检查实例是否存在，如果不存在才真的创建实例</div><div class="line">                if(instance == null)&#123;</div><div class="line">                    instance = new Singleton();</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        return instance;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h6 id="优点：在并发量不多，安全性不高的情况下或许能很完美运行单例模式"><a href="#优点：在并发量不多，安全性不高的情况下或许能很完美运行单例模式" class="headerlink" title="优点：在并发量不多，安全性不高的情况下或许能很完美运行单例模式"></a>优点：在并发量不多，安全性不高的情况下或许能很完美运行单例模式</h6><h6 id="缺点：不同平台编译过程中可能会存在严重安全隐患。"><a href="#缺点：不同平台编译过程中可能会存在严重安全隐患。" class="headerlink" title="缺点：不同平台编译过程中可能会存在严重安全隐患。"></a>缺点：不同平台编译过程中可能会存在严重安全隐患。</h6><h3 id="四、内部类实现"><a href="#四、内部类实现" class="headerlink" title="四、内部类实现"></a>四、内部类实现</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line">public class Singleton &#123;</div><div class="line">    /**</div><div class="line">     * 类级的内部类，也就是静态的成员式内部类，该内部类的实例与外部类的实例</div><div class="line">     * 没有绑定关系，而且只有被调用到才会装载，从而实现了延迟加载</div><div class="line">     */</div><div class="line">    private static class SingletonHolder&#123;</div><div class="line">        /**</div><div class="line">         * 静态初始化器，由JVM来保证线程安全</div><div class="line">         */</div><div class="line">        private static Singleton instance = new Singleton();</div><div class="line">    &#125;</div><div class="line">    /**</div><div class="line">     * 私有化构造方法</div><div class="line">     */</div><div class="line">    private Singleton()&#123;</div><div class="line">    &#125;</div><div class="line">    public static  Singleton getInstance()&#123;</div><div class="line">        return SingletonHolder.instance;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h6 id="优点：延迟加载，线程安全（java中class加载时互斥的），也减少了内存消耗"><a href="#优点：延迟加载，线程安全（java中class加载时互斥的），也减少了内存消耗" class="headerlink" title="优点：延迟加载，线程安全（java中class加载时互斥的），也减少了内存消耗"></a>优点：延迟加载，线程安全（java中class加载时互斥的），也减少了内存消耗</h6><h3 id="五、单例和枚举"><a href="#五、单例和枚举" class="headerlink" title="五、单例和枚举"></a>五、单例和枚举</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line">/**</div><div class="line"> * 使用枚举来实现单例模式的示例</div><div class="line"> */</div><div class="line">public enum Singleton &#123; </div><div class="line">    /**</div><div class="line">     * 定义一个枚举的元素,它就代表了Singleton的一个实例</div><div class="line">     */</div><div class="line">    uniqueInstance;</div><div class="line">     </div><div class="line">    /**</div><div class="line">     * 示意方法，单例可以有自己的操作</div><div class="line">     */</div><div class="line">    public void singletonOperation()&#123;</div><div class="line">        //功能处理</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h6 id="优点：无偿的提供了序列化的机制，并由JVM从根本上提供保障，绝对防止多次实例化，"><a href="#优点：无偿的提供了序列化的机制，并由JVM从根本上提供保障，绝对防止多次实例化，" class="headerlink" title="优点：无偿的提供了序列化的机制，并由JVM从根本上提供保障，绝对防止多次实例化，"></a>优点：无偿的提供了序列化的机制，并由JVM从根本上提供保障，绝对防止多次实例化，</h6><p>参考链接：<a href="http://www.cnblogs.com/sjms/tag/%E5%8D%95%E4%BE%8B%E6%A8%A1%E5%BC%8F/" target="_blank" rel="external">研磨设计模式</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;　　&lt;strong&gt; 概述：&lt;/strong&gt;单例是设计模式中最常见也最简单的一种设计模式，保证了在程序中只有一个实例存在并且能全局的访问到。比如在android实际APP 开发中用到的，数据库对象（SQLiteOpenHelper）等都会用到单例模式。&lt;br&gt;
    
    </summary>
    
      <category term="设计模式" scheme="http://daijinlin.com/categories/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
    
      <category term="单例" scheme="http://daijinlin.com/tags/%E5%8D%95%E4%BE%8B/"/>
    
  </entry>
  
  <entry>
    <title>不透明度16进制值</title>
    <link href="http://daijinlin.com/2016/02/18/alpha-value/"/>
    <id>http://daijinlin.com/2016/02/18/alpha-value/</id>
    <published>2016-02-18T05:22:16.000Z</published>
    <updated>2017-04-05T09:12:48.039Z</updated>
    
    <content type="html"><![CDATA[<p>　　<strong> 概述：</strong>本篇是移动开发常见的透明度十六进制转行，方便查找使用。<br><a id="more"></a></p>
<table>
<thead>
<tr>
<th style="text-align:left">不透明度</th>
<th style="text-align:center">16进制值</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">100%</td>
<td style="text-align:center">FF</td>
</tr>
<tr>
<td style="text-align:left">95%</td>
<td style="text-align:center">F2</td>
</tr>
<tr>
<td style="text-align:left">90%</td>
<td style="text-align:center">E6</td>
</tr>
<tr>
<td style="text-align:left">85%</td>
<td style="text-align:center">D9</td>
</tr>
<tr>
<td style="text-align:left">80%</td>
<td style="text-align:center">CC</td>
</tr>
<tr>
<td style="text-align:left">75%</td>
<td style="text-align:center">BF</td>
</tr>
<tr>
<td style="text-align:left">70%</td>
<td style="text-align:center">B3</td>
</tr>
<tr>
<td style="text-align:left">65%</td>
<td style="text-align:center">A6</td>
</tr>
<tr>
<td style="text-align:left">60%</td>
<td style="text-align:center">99</td>
</tr>
<tr>
<td style="text-align:left">55%</td>
<td style="text-align:center">8C</td>
</tr>
<tr>
<td style="text-align:left">50%</td>
<td style="text-align:center">80</td>
</tr>
<tr>
<td style="text-align:left">45%</td>
<td style="text-align:center">73</td>
</tr>
<tr>
<td style="text-align:left">40%</td>
<td style="text-align:center">66</td>
</tr>
<tr>
<td style="text-align:left">35%</td>
<td style="text-align:center">59</td>
</tr>
<tr>
<td style="text-align:left">30%</td>
<td style="text-align:center">4D</td>
</tr>
<tr>
<td style="text-align:left">25%</td>
<td style="text-align:center">40</td>
</tr>
<tr>
<td style="text-align:left">20%</td>
<td style="text-align:center">33</td>
</tr>
<tr>
<td style="text-align:left">15%</td>
<td style="text-align:center">26</td>
</tr>
<tr>
<td style="text-align:left">10%</td>
<td style="text-align:center">1A</td>
</tr>
<tr>
<td style="text-align:left">5%</td>
<td style="text-align:center">0D</td>
</tr>
<tr>
<td style="text-align:left">0%</td>
<td style="text-align:center">00</td>
</tr>
</tbody>
</table>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;　　&lt;strong&gt; 概述：&lt;/strong&gt;本篇是移动开发常见的透明度十六进制转行，方便查找使用。&lt;br&gt;
    
    </summary>
    
      <category term="Alpha" scheme="http://daijinlin.com/categories/Alpha/"/>
    
    
  </entry>
  
  <entry>
    <title>MarkDown语法实例</title>
    <link href="http://daijinlin.com/2016/02/17/my-first-markdown-blog/"/>
    <id>http://daijinlin.com/2016/02/17/my-first-markdown-blog/</id>
    <published>2016-02-17T05:21:34.000Z</published>
    <updated>2017-04-05T09:12:48.039Z</updated>
    
    <content type="html"><![CDATA[<p>　　<strong> 概述：</strong>本篇是对常用的MarkDown语法的演示示例，由于博客采用MarkDown方式书写，所以记录方便写博客的时候使用。<br><a id="more"></a></p>
<h1 id="First-level-header"><a href="#First-level-header" class="headerlink" title="First level header"></a>First level header</h1><h2 id="Second-level-header"><a href="#Second-level-header" class="headerlink" title="Second level header"></a>Second level header</h2><h1 id="H1-header"><a href="#H1-header" class="headerlink" title="H1 header"></a>H1 header</h1><h2 id="H2-header"><a href="#H2-header" class="headerlink" title="H2 header"></a>H2 header</h2><h3 id="H3-header"><a href="#H3-header" class="headerlink" title="H3 header"></a>H3 header</h3><h4 id="H4-header"><a href="#H4-header" class="headerlink" title="H4 header"></a>H4 header</h4><h5 id="H5-header"><a href="#H5-header" class="headerlink" title="H5 header"></a>H5 header</h5><h6 id="H6-header"><a href="#H6-header" class="headerlink" title="H6 header"></a>H6 header</h6><h1 id="A-header-without-an-ID"><a href="#A-header-without-an-ID" class="headerlink" title="A header without an ID"></a>A header without an ID</h1><blockquote>
<p>A sample blockquote.</p>
<blockquote>
<p>Nested blockquotes are<br>also possible.</p>
</blockquote>
<h2 id="Headers-work-too"><a href="#Headers-work-too" class="headerlink" title="Headers work too"></a>Headers work too</h2><p>This is the outer quote again.</p>
<p>This is a blockquote<br>continued on this<br>and this line.</p>
</blockquote>
<p>But this is a separate paragraph.</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">This is also a code block.</div><div class="line">~~~</div><div class="line">Ending lines must have at least as</div><div class="line">many tildes as the starting line.</div><div class="line">~~~~~~</div></pre></td></tr></table></figure>
<figure class="highlight ruby"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">what?</span></span></div><div class="line">  <span class="number">42</span></div><div class="line"><span class="keyword">end</span></div></pre></td></tr></table></figure>
<hr>
<hr>
<hr>
<hr>
<ol>
<li>This is a list item</li>
<li>And another item</li>
<li><p>And the third one<br>with additional text</p>
<ul>
<li>A list item<br>with additional text</li>
</ul>
</li>
<li><p>This is a list item</p>
<blockquote>
<p>with a blockquote</p>
</blockquote>
<h1 id="And-a-header"><a href="#And-a-header" class="headerlink" title="And a header"></a>And a header</h1></li>
<li><p>Followed by another item</p>
</li>
<li><p>Item one</p>
<ol>
<li>sub item one</li>
<li>sub item two</li>
<li>sub item three</li>
</ol>
</li>
<li>Item two</li>
</ol>
<p>This is a paragraph.</p>
<ol>
<li><p>This is NOT a list.</p>
</li>
<li><p>This is a list!</p>
</li>
</ol>
<ul>
<li>Item one</li>
</ul>
<ul>
<li>Item two</li>
</ul>
<ul>
<li>Item three</li>
</ul>
<p>term<br>: definition<br>: another definition</p>
<p>another term<br>and another term<br>: and a definition for the term</p>
<p>term</p>
<p>: definition<br>: definition</p>
<p>This <em>is</em> a term</p>
<p>: This will be a para</p>
<blockquote>
<p>a blockquote</p>
</blockquote>
<h1 id="A-header"><a href="#A-header" class="headerlink" title="A header"></a>A header</h1><p>| A simple | table |<br>| with multiple | lines|</p>
<table>
<thead>
<tr>
<th style="text-align:left">Header1</th>
<th style="text-align:center">Header2</th>
<th style="text-align:right">Header3</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">cell1</td>
<td style="text-align:center">cell2</td>
<td style="text-align:right">cell3</td>
</tr>
<tr>
<td style="text-align:left">cell4</td>
<td style="text-align:center">cell5</td>
<td style="text-align:right">cell6</td>
</tr>
<tr>
<td style="text-align:left">—-</td>
</tr>
<tr>
<td style="text-align:left">cell1</td>
<td style="text-align:center">cell2</td>
<td style="text-align:right">cell3</td>
</tr>
<tr>
<td style="text-align:left">cell4</td>
<td style="text-align:center">cell5</td>
<td style="text-align:right">cell6</td>
</tr>
<tr>
<td style="text-align:left">=====</td>
</tr>
<tr>
<td style="text-align:left">Foot1</td>
<td style="text-align:center">Foot2</td>
<td style="text-align:right">Foot3</td>
</tr>
</tbody>
</table>
<div style="float: right"><br>Something that stays right and is not wrapped in a para.<br></div>

<p><div><br>This is wrapped in a para.<br></div></p>
<p><br>This can contain only <em>span</em> level elements.<br></p>


<blockquote>
<p>A nice blockquote<br>{: title=”Blockquote title”}</p>
<p>A nice blockquote<br>{: .class1 .class2}</p>
<p>A nice blockquote<br>{: #with-an-id}</p>
</blockquote>
<h1 id="Header-without-id"><a href="#Header-without-id" class="headerlink" title="Header without id"></a>Header without id</h1><p>This is <em>emphasized</em>,<br><em>this</em> too!</p>
<p>This is <strong>strong</strong>,<br><strong>this</strong> too!</p>
<p>This w<strong>ork</strong>s as expected!</p>
<p>A <a href="http://kramdown.gettalong.org" target="_blank" rel="external">link</a><br>to the kramdown homepage.</p>
<p>A <a href="http://kramdown.gettalong.org" title="hp" target="_blank" rel="external">link</a><br>to the homepage.</p>
<p>A <a href="http://kramdown.gettalong.org" title="hp" target="_blank" rel="external">link</a><br>to the homepage.</p>
<p>A link to the <a href="http://kramdown.gettalong.org" title="hp" target="_blank" rel="external">kramdown hp</a>.</p>
<p>An image: <img src="/images/head.png" alt="gras"></p>
<p>Use <code>Kramdown::Document.new(text).to_html</code><br>to convert the <code>text</code> in kramdown<br>syntax to HTML.</p>
<p>Use backticks to markup code,<br>e.g. <code>`code` </code>.</p>
<p>This is <span style="color: red">written in<br>red</span>.</p>
<p>This is <em>red</em>{: style=”color: red”}.</p>
<h1 id="大标题"><a href="#大标题" class="headerlink" title="大标题"></a>大标题</h1><p>  大标题一般显示工程名,类似html的\<h1\><br><br>  你只要在标题下面跟上=====即可</h1\></p>
<h2 id="中标题"><a href="#中标题" class="headerlink" title="中标题"></a>中标题</h2><p>  中标题一般显示重点项,类似html的\<h2\><br><br>  你只要在标题下面输入——即可</h2\></p>
<h3 id="小标题"><a href="#小标题" class="headerlink" title="小标题"></a>小标题</h3><p>  小标题类似html的\<h3\><br><br>  小标题的格式如下 ### 小标题<br><br>  注意#和标题字符中间要有空格</h3\></p>
<h3 id="注意-下面所有语法的提示我都先用小标题提醒了"><a href="#注意-下面所有语法的提示我都先用小标题提醒了" class="headerlink" title="注意!!!下面所有语法的提示我都先用小标题提醒了!!!"></a>注意!!!下面所有语法的提示我都先用小标题提醒了!!!</h3><h3 id="单行文本框"><a href="#单行文本框" class="headerlink" title="单行文本框"></a>单行文本框</h3><pre><code>这是一个单行的文本框,只要两个Tab再输入文字即可
</code></pre><h3 id="多行文本框"><a href="#多行文本框" class="headerlink" title="多行文本框"></a>多行文本框</h3><pre><code>这是一个有多行的文本框
你可以写入代码等,每行文字只要输入两个Tab再输入文字即可
这里你可以输入一段代码
</code></pre><h3 id="比如我们可以在多行文本框里输入一段代码-来一个Java版本的HelloWorld吧"><a href="#比如我们可以在多行文本框里输入一段代码-来一个Java版本的HelloWorld吧" class="headerlink" title="比如我们可以在多行文本框里输入一段代码,来一个Java版本的HelloWorld吧"></a>比如我们可以在多行文本框里输入一段代码,来一个Java版本的HelloWorld吧</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">public class HelloWorld &#123;</div><div class="line"></div><div class="line">  /**</div><div class="line">   * @param args</div><div class="line">  */</div><div class="line"> public static void main(String[] args) &#123;</div><div class="line">  System.out.println(&quot;HelloWorld!&quot;);</div><div class="line"> &#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="链接"><a href="#链接" class="headerlink" title="链接"></a>链接</h3><p>1.<a href="http://www.google.com" target="_blank" rel="external">点击这里你可以链接到www.google.com</a><br><br>2.<a href="http://daijinlin.com">点击这里我你可以链接到我的博客</a><br></p>
<h3 id="只是显示图片"><a href="#只是显示图片" class="headerlink" title="只是显示图片"></a>只是显示图片</h3><p><img src="https://avatars3.githubusercontent.com/u/6541847" alt="github" title="github"></p>
<h3 id="想点击某个图片进入一个网页-比如我想点击github的icon然后再进入github-com"><a href="#想点击某个图片进入一个网页-比如我想点击github的icon然后再进入github-com" class="headerlink" title="想点击某个图片进入一个网页,比如我想点击github的icon然后再进入github.com"></a>想点击某个图片进入一个网页,比如我想点击github的icon然后再进入github.com</h3><p><a href="http://github.com/" target="_blank" rel="external"><img src="https://avatars3.githubusercontent.com/u/6541847" alt="image" title="github"></a></p>
<h3 id="文字被些字符包围"><a href="#文字被些字符包围" class="headerlink" title="文字被些字符包围"></a>文字被些字符包围</h3><blockquote>
<p>文字被些字符包围</p>
<p>只要再文字前面加上&gt;空格即可</p>
<p>如果你要换行的话,新起一行,输入&gt;空格即可,后面不接文字<br>但&gt; 只能放在行首才有效</p>
</blockquote>
<h3 id="文字被些字符包围-多重包围"><a href="#文字被些字符包围-多重包围" class="headerlink" title="文字被些字符包围,多重包围"></a>文字被些字符包围,多重包围</h3><blockquote>
<p>文字被些字符包围开始</p>
<blockquote>
<p>只要再文字前面加上&gt;空格即可</p>
<blockquote>
<p>如果你要换行的话,新起一行,输入&gt;空格即可,后面不接文字</p>
<blockquote>
<p>但&gt; 只能放在行首才有效</p>
</blockquote>
</blockquote>
</blockquote>
</blockquote>
<h3 id="特殊字符处理"><a href="#特殊字符处理" class="headerlink" title="特殊字符处理"></a>特殊字符处理</h3><p>有一些特殊字符如&lt;,#等,只要在特殊字符前面加上转义字符\即可<br><br>你想换行的话其实可以直接用html标签\<br \=""></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;　　&lt;strong&gt; 概述：&lt;/strong&gt;本篇是对常用的MarkDown语法的演示示例，由于博客采用MarkDown方式书写，所以记录方便写博客的时候使用。&lt;br&gt;
    
    </summary>
    
      <category term="MarkDown" scheme="http://daijinlin.com/categories/MarkDown/"/>
    
    
  </entry>
  
</feed>
